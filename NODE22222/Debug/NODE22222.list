
NODE22222.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000403c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004184  08004184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004184  08004184  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004184  08004184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08004198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004198  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a5c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e85  00000000  00000000  00028a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb2  00000000  00000000  0002b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa24  00000000  00000000  000438a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e3d  00000000  00000000  0004e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002144  00000000  00000000  000d5154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004134 	.word	0x08004134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004134 	.word	0x08004134

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_f2uiz>:
 80009cc:	0042      	lsls	r2, r0, #1
 80009ce:	d20e      	bcs.n	80009ee <__aeabi_f2uiz+0x22>
 80009d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009d4:	d30b      	bcc.n	80009ee <__aeabi_f2uiz+0x22>
 80009d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009de:	d409      	bmi.n	80009f4 <__aeabi_f2uiz+0x28>
 80009e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr
 80009f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009f8:	d101      	bne.n	80009fe <__aeabi_f2uiz+0x32>
 80009fa:	0242      	lsls	r2, r0, #9
 80009fc:	d102      	bne.n	8000a04 <__aeabi_f2uiz+0x38>
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000a0c:	b4b0      	push	{r4, r5, r7}
 8000a0e:	b08f      	sub	sp, #60	; 0x3c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000a14:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000a20:	2307      	movs	r3, #7
 8000a22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 8000a2c:	23ff      	movs	r3, #255	; 0xff
 8000a2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	461d      	mov	r5, r3
 8000a40:	f107 0408 	add.w	r4, r7, #8
 8000a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	373c      	adds	r7, #60	; 0x3c
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bcb0      	pop	{r4, r5, r7}
 8000a5c:	4770      	bx	lr

08000a5e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6898      	ldr	r0, [r3, #8]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f001 ff22 	bl	80028ba <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 fefa 	bl	8001870 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6898      	ldr	r0, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	899b      	ldrh	r3, [r3, #12]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	f001 ff17 	bl	80028ba <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f000 feef 	bl	8001870 <HAL_Delay>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f99f 	bl	8000dea <LoRa_read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d107      	bne.n	8000aca <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	e03e      	b.n	8000b48 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d10c      	bne.n	8000aea <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ad4:	f023 0307 	bic.w	r3, r3, #7
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	61da      	str	r2, [r3, #28]
 8000ae8:	e02e      	b.n	8000b48 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d10c      	bne.n	8000b0a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af4:	f023 0307 	bic.w	r3, r3, #7
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f043 0303 	orr.w	r3, r3, #3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2203      	movs	r2, #3
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	e01e      	b.n	8000b48 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d10c      	bne.n	8000b2a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b14:	f023 0307 	bic.w	r3, r3, #7
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	f043 0305 	orr.w	r3, r3, #5
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2205      	movs	r2, #5
 8000b26:	61da      	str	r2, [r3, #28]
 8000b28:	e00e      	b.n	8000b48 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d10b      	bne.n	8000b48 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b34:	f023 0307 	bic.w	r3, r3, #7
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	f043 0306 	orr.w	r3, r3, #6
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2206      	movs	r2, #6
 8000b46:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f965 	bl	8000e1e <LoRa_write>
	//HAL_Delay(10);
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	889b      	ldrh	r3, [r3, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f001 fe9f 	bl	80028ba <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6998      	ldr	r0, [r3, #24]
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	f002 fcb0 	bl	80034ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b8c:	bf00      	nop
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f989 	bl	8003eaa <HAL_SPI_GetState>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d1f7      	bne.n	8000b8e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6998      	ldr	r0, [r3, #24]
 8000ba2:	8b3a      	ldrh	r2, [r7, #24]
 8000ba4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ba8:	6839      	ldr	r1, [r7, #0]
 8000baa:	f002 fddb 	bl	8003764 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bae:	bf00      	nop
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 f978 	bl	8003eaa <HAL_SPI_GetState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d1f7      	bne.n	8000bb0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	889b      	ldrh	r3, [r3, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f001 fe75 	bl	80028ba <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f001 fe61 	bl	80028ba <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6998      	ldr	r0, [r3, #24]
 8000bfc:	88fa      	ldrh	r2, [r7, #6]
 8000bfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	f002 fc72 	bl	80034ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c08:	bf00      	nop
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 f94b 	bl	8003eaa <HAL_SPI_GetState>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d1f7      	bne.n	8000c0a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6998      	ldr	r0, [r3, #24]
 8000c1e:	8b3a      	ldrh	r2, [r7, #24]
 8000c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c24:	6839      	ldr	r1, [r7, #0]
 8000c26:	f002 fc61 	bl	80034ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c2a:	bf00      	nop
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f93a 	bl	8003eaa <HAL_SPI_GetState>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d1f7      	bne.n	8000c2c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	889b      	ldrh	r3, [r3, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	f001 fe37 	bl	80028ba <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	04db      	lsls	r3, r3, #19
 8000c62:	115b      	asrs	r3, r3, #5
 8000c64:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	0c1b      	lsrs	r3, r3, #16
 8000c6a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2106      	movs	r1, #6
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f8d3 	bl	8000e1e <LoRa_write>
	HAL_Delay(5);
 8000c78:	2005      	movs	r0, #5
 8000c7a:	f000 fdf9 	bl	8001870 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	461a      	mov	r2, r3
 8000c88:	2107      	movs	r1, #7
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f8c7 	bl	8000e1e <LoRa_write>
	HAL_Delay(5);
 8000c90:	2005      	movs	r0, #5
 8000c92:	f000 fded 	bl	8001870 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000c9a:	7afb      	ldrb	r3, [r7, #11]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f8bc 	bl	8000e1e <LoRa_write>
	HAL_Delay(5);
 8000ca6:	2005      	movs	r0, #5
 8000ca8:	f000 fde2 	bl	8001870 <HAL_Delay>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	dd01      	ble.n	8000cc8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	dc01      	bgt.n	8000cd2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000cd2:	211e      	movs	r1, #30
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f888 	bl	8000dea <LoRa_read>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 fdc6 	bl	8001870 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	211e      	movs	r1, #30
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f88d 	bl	8000e1e <LoRa_write>
	HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fdb3 	bl	8001870 <HAL_Delay>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	461a      	mov	r2, r3
 8000d22:	2109      	movs	r1, #9
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f87a 	bl	8000e1e <LoRa_write>
	HAL_Delay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f000 fda0 	bl	8001870 <HAL_Delay>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b2c      	cmp	r3, #44	; 0x2c
 8000d4c:	d801      	bhi.n	8000d52 <LoRa_setOCP+0x1a>
		current = 45;
 8000d4e:	232d      	movs	r3, #45	; 0x2d
 8000d50:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	2bf0      	cmp	r3, #240	; 0xf0
 8000d56:	d901      	bls.n	8000d5c <LoRa_setOCP+0x24>
		current = 240;
 8000d58:	23f0      	movs	r3, #240	; 0xf0
 8000d5a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b78      	cmp	r3, #120	; 0x78
 8000d60:	d809      	bhi.n	8000d76 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	3b2d      	subs	r3, #45	; 0x2d
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <LoRa_setOCP+0x78>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1052      	asrs	r2, r2, #1
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e00b      	b.n	8000d8e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2bf0      	cmp	r3, #240	; 0xf0
 8000d7a:	d808      	bhi.n	8000d8e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	331e      	adds	r3, #30
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoRa_setOCP+0x78>)
 8000d82:	fb82 1203 	smull	r1, r2, r2, r3
 8000d86:	1092      	asrs	r2, r2, #2
 8000d88:	17db      	asrs	r3, r3, #31
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3320      	adds	r3, #32
 8000d92:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	461a      	mov	r2, r3
 8000d98:	210b      	movs	r1, #11
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f83f 	bl	8000e1e <LoRa_write>
	HAL_Delay(10);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f000 fd65 	bl	8001870 <HAL_Delay>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	66666667 	.word	0x66666667

08000db4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000dbc:	211e      	movs	r1, #30
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f813 	bl	8000dea <LoRa_read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f043 0307 	orr.w	r3, r3, #7
 8000dce:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	211e      	movs	r1, #30
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f821 	bl	8000e1e <LoRa_write>
	HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f000 fd47 	bl	8001870 <HAL_Delay>
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af02      	add	r7, sp, #8
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000e00:	f107 030f 	add.w	r3, r7, #15
 8000e04:	f107 010e 	add.w	r1, r7, #14
 8000e08:	2201      	movs	r2, #1
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fea4 	bl	8000b5c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af02      	add	r7, sp, #8
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000e38:	78bb      	ldrb	r3, [r7, #2]
 8000e3a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000e3c:	f107 030f 	add.w	r3, r7, #15
 8000e40:	f107 010e 	add.w	r1, r7, #14
 8000e44:	2201      	movs	r2, #1
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fec4 	bl	8000bd8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	461a      	mov	r2, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	72fb      	strb	r3, [r7, #11]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	889b      	ldrh	r3, [r3, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f001 fd1a 	bl	80028ba <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6998      	ldr	r0, [r3, #24]
 8000e8a:	f107 0117 	add.w	r1, r7, #23
 8000e8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e92:	2201      	movs	r2, #1
 8000e94:	f002 fb2a 	bl	80034ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e98:	bf00      	nop
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 f803 	bl	8003eaa <HAL_SPI_GetState>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d1f7      	bne.n	8000e9a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6998      	ldr	r0, [r3, #24]
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f002 fb18 	bl	80034ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ebc:	bf00      	nop
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fff1 	bl	8003eaa <HAL_SPI_GetState>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1f7      	bne.n	8000ebe <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 fcee 	bl	80028ba <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]

	return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	4611      	mov	r1, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000f16:	2101      	movs	r1, #1
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff fdbe 	bl	8000a9a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000f1e:	210e      	movs	r1, #14
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff ff62 	bl	8000dea <LoRa_read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000f2a:	7cfb      	ldrb	r3, [r7, #19]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	210d      	movs	r1, #13
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff ff74 	bl	8000e1e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2122      	movs	r1, #34	; 0x22
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ff6e 	bl	8000e1e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	2100      	movs	r1, #0
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff ff85 	bl	8000e58 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000f4e:	2103      	movs	r1, #3
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff fda2 	bl	8000a9a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000f56:	2112      	movs	r1, #18
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff46 	bl	8000dea <LoRa_read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00a      	beq.n	8000f82 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	2112      	movs	r1, #18
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff54 	bl	8000e1e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fd8e 	bl	8000a9a <LoRa_gotoMode>
			return 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	80bb      	strh	r3, [r7, #4]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000f8e:	6979      	ldr	r1, [r7, #20]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff fd82 	bl	8000a9a <LoRa_gotoMode>
				return 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e003      	b.n	8000fa2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fc68 	bl	8001870 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000fa0:	e7d9      	b.n	8000f56 <LoRa_transmit+0x5c>
	}

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fd70 	bl	8000a9a <LoRa_gotoMode>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff8b 	bl	8000ee6 <LoRa_isvalid>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8093 	beq.w	80010fe <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fd5d 	bl	8000a9a <LoRa_gotoMode>
			HAL_Delay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fc45 	bl	8001870 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fefe 	bl	8000dea <LoRa_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f000 fc3c 	bl	8001870 <HAL_Delay>
			data = read | 0x80;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	461a      	mov	r2, r3
 8001004:	2101      	movs	r1, #1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff09 	bl	8000e1e <LoRa_write>
			HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f000 fc2f 	bl	8001870 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fe1b 	bl	8000c54 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fe73 	bl	8000d12 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fe7f 	bl	8000d38 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800103a:	2223      	movs	r2, #35	; 0x23
 800103c:	210c      	movs	r1, #12
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff feed 	bl	8000e1e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff feb5 	bl	8000db4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fe2e 	bl	8000cb4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	211f      	movs	r1, #31
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fede 	bl	8000e1e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	461a      	mov	r2, r3
 8001082:	211d      	movs	r1, #29
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff feca 	bl	8000e1e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	2120      	movs	r1, #32
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fec0 	bl	8000e1e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	2121      	movs	r1, #33	; 0x21
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff feb8 	bl	8000e1e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fe9a 	bl	8000dea <LoRa_read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80010c0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff fea8 	bl	8000e1e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80010ce:	2101      	movs	r1, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fce2 	bl	8000a9a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 fbc7 	bl	8001870 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80010e2:	2142      	movs	r1, #66	; 0x42
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fe80 	bl	8000dea <LoRa_read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b12      	cmp	r3, #18
 80010f2:	d101      	bne.n	80010f8 <LoRa_init+0x136>
				return LORA_OK;
 80010f4:	23c8      	movs	r3, #200	; 0xc8
 80010f6:	e004      	b.n	8001102 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80010f8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80010fc:	e001      	b.n	8001102 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80010fe:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_ADC1_Init+0x74>)
 800111e:	4a19      	ldr	r2, [pc, #100]	; (8001184 <MX_ADC1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_ADC1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_ADC1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_ADC1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_ADC1_Init+0x74>)
 8001136:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_ADC1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_ADC1_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_ADC1_Init+0x74>)
 800114a:	f000 fbb5 	bl	80018b8 <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 fa0d 	bl	8001572 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115c:	2301      	movs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_ADC1_Init+0x74>)
 800116a:	f000 fef3 	bl	8001f54 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001174:	f000 f9fd 	bl	8001572 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000028 	.word	0x20000028
 8001184:	40012400 	.word	0x40012400

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_ADC_MspInit+0x6c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d121      	bne.n	80011ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_ADC_MspInit+0x70>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_ADC_MspInit+0x74>)
 80011e8:	f001 f9cc 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40012400 	.word	0x40012400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <MX_GPIO_Init+0xe0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <MX_GPIO_Init+0xe0>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <MX_GPIO_Init+0xe0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_GPIO_Init+0xe0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <MX_GPIO_Init+0xe0>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_GPIO_Init+0xe0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_GPIO_Init+0xe0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <MX_GPIO_Init+0xe0>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_GPIO_Init+0xe0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	4820      	ldr	r0, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xe4>)
 8001262:	f001 fb2a 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2101      	movs	r1, #1
 800126a:	481f      	ldr	r0, [pc, #124]	; (80012e8 <MX_GPIO_Init+0xe8>)
 800126c:	f001 fb25 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rain_Pin;
 8001270:	2304      	movs	r3, #4
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Rain_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_GPIO_Init+0xe4>)
 8001284:	f001 f97e 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001288:	2310      	movs	r3, #16
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_GPIO_Init+0xe4>)
 80012a0:	f001 f970 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <MX_GPIO_Init+0xe8>)
 80012bc:	f001 f962 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_GPIO_Init+0xe8>)
 80012d4:	f001 f956 	bl	8002584 <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	00000000 	.word	0x00000000

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b098      	sub	sp, #96	; 0x60
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fa59 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8df 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f7ff ff7f 	bl	8001200 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001302:	f7ff ff03 	bl	800110c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001306:	f000 f939 	bl	800157c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
LoRa myLoRa;

// initilize LoRa Module
myLoRa = newLoRa();
 800130a:	463b      	mov	r3, r7
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb7d 	bl	8000a0c <newLoRa>
 8001312:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001316:	463d      	mov	r5, r7
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
myLoRa.CS_port = NSS_GPIO_Port;
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <main+0x1a0>)
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
myLoRa.CS_pin = NSS_Pin;
 800132c:	2310      	movs	r3, #16
 800132e:	86bb      	strh	r3, [r7, #52]	; 0x34
myLoRa.reset_port = RST_GPIO_Port;
 8001330:	4b58      	ldr	r3, [pc, #352]	; (8001494 <main+0x1a4>)
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
myLoRa.reset_pin = RST_Pin;
 8001334:	2301      	movs	r3, #1
 8001336:	87bb      	strh	r3, [r7, #60]	; 0x3c
myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001338:	4b56      	ldr	r3, [pc, #344]	; (8001494 <main+0x1a4>)
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
myLoRa.DIO0_pin = DIO0_Pin;
 800133c:	2302      	movs	r3, #2
 800133e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
myLoRa.hSPIx = &hspi1;
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <main+0x1a8>)
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48

myLoRa.frequency             = 433        ;
 8001346:	f240 13b1 	movw	r3, #433	; 0x1b1
 800134a:	653b      	str	r3, [r7, #80]	; 0x50
myLoRa.spredingFactor        = SF_7       ;
 800134c:	2307      	movs	r3, #7
 800134e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
myLoRa.bandWidth			 = BW_125KHz  ;
 8001352:	2307      	movs	r3, #7
 8001354:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
myLoRa.crcRate               = CR_4_5     ;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
myLoRa.power				 = POWER_20db ;
 800135e:	23ff      	movs	r3, #255	; 0xff
 8001360:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
myLoRa.overCurrentProtection = 100        ;
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
myLoRa.preamble			     = 10         ;
 800136a:	230a      	movs	r3, #10
 800136c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
myLoRa.synwords = 0xF3;
 8001370:	23f3      	movs	r3, #243	; 0xf3
 8001372:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

LoRa_reset(&myLoRa);
 8001376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb6f 	bl	8000a5e <LoRa_reset>
LoRa_init(&myLoRa);
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe1c 	bl	8000fc2 <LoRa_init>
LoRa_startReceiving(&myLoRa);
 800138a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe0b 	bl	8000faa <LoRa_startReceiving>
HAL_ADC_Start_IT(&hadc1);
 8001394:	4841      	ldr	r0, [pc, #260]	; (800149c <main+0x1ac>)
 8001396:	f000 fd1b 	bl	8001dd0 <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */
//	  DHT_GetData(&DHT22_Data);
//	 	  Temp = DHT22_Data.Temperature;
//	 	  Hum = DHT22_Data.Humidity;
//	 	  BH1750_ReadLight(&BH1750_lux);
	  HAL_ADC_Start(&hadc1);
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <main+0x1ac>)
 800139c:	f000 fb64 	bl	8001a68 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80013a0:	2164      	movs	r1, #100	; 0x64
 80013a2:	483e      	ldr	r0, [pc, #248]	; (800149c <main+0x1ac>)
 80013a4:	f000 fc0e 	bl	8001bc4 <HAL_ADC_PollForConversion>
	  ADC_Value = HAL_ADC_GetValue(&hadc1)*3.5/4096;
 80013a8:	483c      	ldr	r0, [pc, #240]	; (800149c <main+0x1ac>)
 80013aa:	f000 fdc7 	bl	8001f3c <HAL_ADC_GetValue>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f80f 	bl	80003d4 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <main+0x1b0>)
 80013bc:	f7ff f884 	bl	80004c8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <main+0x1b4>)
 80013ce:	f7ff f9a5 	bl	800071c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fa87 	bl	80008ec <__aeabi_d2uiz>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <main+0x1b8>)
 80013e4:	801a      	strh	r2, [r3, #0]
	  soil = 100 - (ADC_Value/3.3)*100;
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x1b8>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f802 	bl	80003f4 <__aeabi_i2d>
 80013f0:	a325      	add	r3, pc, #148	; (adr r3, 8001488 <main+0x198>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f991 	bl	800071c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <main+0x1bc>)
 8001408:	f7ff f85e 	bl	80004c8 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	4925      	ldr	r1, [pc, #148]	; (80014ac <main+0x1bc>)
 8001416:	f7fe fe9f 	bl	8000158 <__aeabi_dsub>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fa83 	bl	800092c <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <main+0x1c0>)
 800142a:	6013      	str	r3, [r2, #0]
	  vRain = HAL_GPIO_ReadPin(GPIOA, Rain_Pin);
 800142c:	2104      	movs	r1, #4
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <main+0x1a0>)
 8001430:	f001 fa2c 	bl	800288c <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <main+0x1c4>)
 800143a:	701a      	strb	r2, [r3, #0]
	 	  HAL_Delay(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f000 fa16 	bl	8001870 <HAL_Delay>

	 	  ///	  Send data
	 	  	  	  TxBuffer[0] = 29;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <main+0x1c8>)
 8001446:	221d      	movs	r2, #29
 8001448:	701a      	strb	r2, [r3, #0]
	 	  	  	  TxBuffer[1] = 37;
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <main+0x1c8>)
 800144c:	2225      	movs	r2, #37	; 0x25
 800144e:	705a      	strb	r2, [r3, #1]
	 	  	  	  TxBuffer[2] = soil;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <main+0x1c0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fab9 	bl	80009cc <__aeabi_f2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <main+0x1c8>)
 8001460:	709a      	strb	r2, [r3, #2]
	 	  	  	  TxBuffer[3] = vRain;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <main+0x1c4>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <main+0x1c8>)
 8001468:	70da      	strb	r2, [r3, #3]

	 	  	  LoRa_transmit(&myLoRa, (uint8_t*)TxBuffer, 4, 500);
 800146a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800146e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001472:	2204      	movs	r2, #4
 8001474:	4910      	ldr	r1, [pc, #64]	; (80014b8 <main+0x1c8>)
 8001476:	f7ff fd40 	bl	8000efa <LoRa_transmit>
	 	  	  HAL_Delay(1000);
 800147a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147e:	f000 f9f7 	bl	8001870 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001482:	e78a      	b.n	800139a <main+0xaa>
 8001484:	f3af 8000 	nop.w
 8001488:	66666666 	.word	0x66666666
 800148c:	400a6666 	.word	0x400a6666
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00
 8001498:	200000e0 	.word	0x200000e0
 800149c:	20000028 	.word	0x20000028
 80014a0:	400c0000 	.word	0x400c0000
 80014a4:	40b00000 	.word	0x40b00000
 80014a8:	200000da 	.word	0x200000da
 80014ac:	40590000 	.word	0x40590000
 80014b0:	200000dc 	.word	0x200000dc
 80014b4:	200000d8 	.word	0x200000d8
 80014b8:	20000058 	.word	0x20000058

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	2228      	movs	r2, #40	; 0x28
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fe2a 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fa:	2301      	movs	r3, #1
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	2302      	movs	r3, #2
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001508:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f9ea 	bl	80028ec <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800151e:	f000 f828 	bl	8001572 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001532:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fc56 	bl	8002df0 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800154a:	f000 f812 	bl	8001572 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800154e:	2302      	movs	r3, #2
 8001550:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fdcc 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001566:	f000 f804 	bl	8001572 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i
}
 8001578:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157a:	e7fe      	b.n	800157a <Error_Handler+0x8>

0800157c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <MX_SPI1_Init+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800158c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015b0:	2210      	movs	r2, #16
 80015b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015c8:	220a      	movs	r2, #10
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015ce:	f001 ff09 	bl	80033e4 <HAL_SPI_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d8:	f7ff ffcb 	bl	8001572 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000e0 	.word	0x200000e0
 80015e4:	40013000 	.word	0x40013000

080015e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_SPI_MspInit+0x98>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d137      	bne.n	8001678 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 800160e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_SPI_MspInit+0x9c>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001638:	23a0      	movs	r3, #160	; 0xa0
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <HAL_SPI_MspInit+0xa0>)
 800164c:	f000 ff9a 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <HAL_SPI_MspInit+0xa0>)
 8001664:	f000 ff8e 	bl	8002584 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2023      	movs	r0, #35	; 0x23
 800166e:	f000 fedc 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001672:	2023      	movs	r0, #35	; 0x23
 8001674:	f000 fef5 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013000 	.word	0x40013000
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_MspInit+0x5c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_MspInit+0x5c>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_MspInit+0x5c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_MspInit+0x5c>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_MspInit+0x60>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_MspInit+0x60>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 f87f 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <SPI1_IRQHandler+0x10>)
 8001746:	f002 fac1 	bl	8003ccc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000e0 	.word	0x200000e0

08001754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffe5 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 fca7 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff fdaf 	bl	80012f0 <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800179c:	0800418c 	.word	0x0800418c
  ldr r2, =_sbss
 80017a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017a4:	2000013c 	.word	0x2000013c

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fe29 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff ff60 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fe41 	bl	800247e <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 fe09 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000008 	.word	0x20000008
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000008 	.word	0x20000008
 8001858:	20000138 	.word	0x20000138

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000138 	.word	0x20000138

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0be      	b.n	8001a58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fc46 	bl	8001188 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fc7b 	bl	80021f8 <ADC_ConversionStop_Disable>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8099 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8095 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001938:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b1b      	ldrb	r3, [r3, #12]
 800193e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001940:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d003      	beq.n	800195a <HAL_ADC_Init+0xa2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_Init+0xa8>
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	e000      	b.n	8001962 <HAL_ADC_Init+0xaa>
 8001960:	2300      	movs	r3, #0
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7d1b      	ldrb	r3, [r3, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d119      	bne.n	80019a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	3b01      	subs	r3, #1
 800197e:	035a      	lsls	r2, r3, #13
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_ADC_Init+0x1a8>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0x126>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_ADC_Init+0x1ac>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f023 0312 	bic.w	r3, r3, #18
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	ffe1f7fd 	.word	0xffe1f7fd
 8001a64:	ff1f0efe 	.word	0xff1f0efe

08001a68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Start+0x1a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e098      	b.n	8001bb4 <HAL_ADC_Start+0x14c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fb5a 	bl	8002144 <ADC_Enable>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 8087 	bne.w	8001baa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a41      	ldr	r2, [pc, #260]	; (8001bbc <HAL_ADC_Start+0x154>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_Start+0x5e>
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_ADC_Start+0x158>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d115      	bne.n	8001af2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d026      	beq.n	8001b2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af0:	e01d      	b.n	8001b2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <HAL_ADC_Start+0x158>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Start+0xaa>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_ADC_Start+0x154>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10d      	bne.n	8001b2e <HAL_ADC_Start+0xc6>
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_ADC_Start+0x158>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f023 0206 	bic.w	r2, r3, #6
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b46:	e002      	b.n	8001b4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0202 	mvn.w	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b6e:	d113      	bne.n	8001b98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_ADC_Start+0x154>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_ADC_Start+0x158>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	e00c      	b.n	8001bb2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e003      	b.n	8001bb2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40012800 	.word	0x40012800
 8001bc0:	40012400 	.word	0x40012400

08001bc4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bda:	f7ff fe3f 	bl	800185c <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	f043 0220 	orr.w	r2, r3, #32
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0d3      	b.n	8001dae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d131      	bne.n	8001c78 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d12a      	bne.n	8001c78 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c22:	e021      	b.n	8001c68 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d01d      	beq.n	8001c68 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x7e>
 8001c32:	f7ff fe13 	bl	800185c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d212      	bcs.n	8001c68 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0a2      	b.n	8001dae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0d6      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c76:	e070      	b.n	8001d5a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_ADC_PollForConversion+0x1f4>)
 8001c7a:	681c      	ldr	r4, [r3, #0]
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f001 faf1 	bl	8003264 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_ADC_PollForConversion+0x1f8>)
 8001c90:	400b      	ands	r3, r1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x104>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <HAL_ADC_PollForConversion+0x1fc>)
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d111      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x104>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_ADC_PollForConversion+0x200>)
 8001cac:	400b      	ands	r3, r1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x100>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_ADC_PollForConversion+0x204>)
 8001cba:	400b      	ands	r3, r1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x100>
 8001cc0:	2314      	movs	r3, #20
 8001cc2:	e020      	b.n	8001d06 <HAL_ADC_PollForConversion+0x142>
 8001cc4:	2329      	movs	r3, #41	; 0x29
 8001cc6:	e01e      	b.n	8001d06 <HAL_ADC_PollForConversion+0x142>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6919      	ldr	r1, [r3, #16]
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_ADC_PollForConversion+0x200>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x120>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_ADC_PollForConversion+0x204>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00d      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x13c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_ADC_PollForConversion+0x208>)
 8001cec:	400b      	ands	r3, r1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x140>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68d9      	ldr	r1, [r3, #12]
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_ADC_PollForConversion+0x208>)
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x140>
 8001d00:	2354      	movs	r3, #84	; 0x54
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_PollForConversion+0x142>
 8001d04:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d0c:	e021      	b.n	8001d52 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d01a      	beq.n	8001d4c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x168>
 8001d1c:	f7ff fd9e 	bl	800185c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d20f      	bcs.n	8001d4c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d90b      	bls.n	8001d4c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f043 0204 	orr.w	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e030      	b.n	8001dae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d8d9      	bhi.n	8001d0e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0212 	mvn.w	r2, #18
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d7e:	d115      	bne.n	8001dac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	24924924 	.word	0x24924924
 8001dc0:	00924924 	.word	0x00924924
 8001dc4:	12492492 	.word	0x12492492
 8001dc8:	00492492 	.word	0x00492492
 8001dcc:	00249249 	.word	0x00249249

08001dd0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Start_IT+0x1a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0a0      	b.n	8001f2c <HAL_ADC_Start_IT+0x15c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f9a6 	bl	8002144 <ADC_Enable>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 808f 	bne.w	8001f22 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a45      	ldr	r2, [pc, #276]	; (8001f34 <HAL_ADC_Start_IT+0x164>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d105      	bne.n	8001e2e <HAL_ADC_Start_IT+0x5e>
 8001e22:	4b45      	ldr	r3, [pc, #276]	; (8001f38 <HAL_ADC_Start_IT+0x168>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d026      	beq.n	8001e96 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e58:	e01d      	b.n	8001e96 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <HAL_ADC_Start_IT+0x168>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_Start_IT+0xaa>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <HAL_ADC_Start_IT+0x164>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10d      	bne.n	8001e96 <HAL_ADC_Start_IT+0xc6>
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_ADC_Start_IT+0x168>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f023 0206 	bic.w	r2, r3, #6
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f06f 0202 	mvn.w	r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ee2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ee6:	d113      	bne.n	8001f10 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_ADC_Start_IT+0x164>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_ADC_Start_IT+0x168>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	e00c      	b.n	8001f2a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40012800 	.word	0x40012800
 8001f38:	40012400 	.word	0x40012400

08001f3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x20>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0dc      	b.n	800212e <HAL_ADC_ConfigChannel+0x1da>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d81c      	bhi.n	8001fbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b05      	subs	r3, #5
 8001f96:	221f      	movs	r2, #31
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4019      	ands	r1, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3b05      	subs	r3, #5
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbc:	e03c      	b.n	8002038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d81c      	bhi.n	8002000 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b23      	subs	r3, #35	; 0x23
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	; 0x23
 8001ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffe:	e01b      	b.n	8002038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b41      	subs	r3, #65	; 0x41
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b41      	subs	r3, #65	; 0x41
 800202c:	fa00 f203 	lsl.w	r2, r0, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b09      	cmp	r3, #9
 800203e:	d91c      	bls.n	800207a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	4019      	ands	r1, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6898      	ldr	r0, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	3b1e      	subs	r3, #30
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e019      	b.n	80020ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	2207      	movs	r2, #7
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	4019      	ands	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6898      	ldr	r0, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d003      	beq.n	80020be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ba:	2b11      	cmp	r3, #17
 80020bc:	d132      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_ADC_ConfigChannel+0x1e4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d125      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d126      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d11a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_ADC_ConfigChannel+0x1e8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <HAL_ADC_ConfigChannel+0x1ec>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	0c9a      	lsrs	r2, r3, #18
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002104:	e002      	b.n	800210c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3b01      	subs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f9      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x1b2>
 8002112:	e007      	b.n	8002124 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f043 0220 	orr.w	r2, r3, #32
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40012400 	.word	0x40012400
 800213c:	20000000 	.word	0x20000000
 8002140:	431bde83 	.word	0x431bde83

08002144 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d040      	beq.n	80021e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <ADC_Enable+0xac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <ADC_Enable+0xb0>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002180:	e002      	b.n	8002188 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800218e:	f7ff fb65 	bl	800185c <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002194:	e01f      	b.n	80021d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002196:	f7ff fb61 	bl	800185c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d918      	bls.n	80021d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d011      	beq.n	80021d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d1d8      	bne.n	8002196 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d12e      	bne.n	8002270 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002222:	f7ff fb1b 	bl	800185c <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002228:	e01b      	b.n	8002262 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800222a:	f7ff fb17 	bl	800185c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d914      	bls.n	8002262 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10d      	bne.n	8002262 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e007      	b.n	8002272 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d0dc      	beq.n	800222a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <__NVIC_EnableIRQ+0x34>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff90 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff2d 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff42 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff90 	bl	800236c <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5f 	bl	8002318 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff35 	bl	80022e0 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d005      	beq.n	80024ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e051      	b.n	800255e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 020e 	bic.w	r2, r2, #14
 80024c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_DMA_Abort_IT+0xd0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d029      	beq.n	8002538 <HAL_DMA_Abort_IT+0xa0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_DMA_Abort_IT+0xd4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Abort_IT+0x9c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_DMA_Abort_IT+0xd8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01a      	beq.n	800252e <HAL_DMA_Abort_IT+0x96>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_DMA_Abort_IT+0xdc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d012      	beq.n	8002528 <HAL_DMA_Abort_IT+0x90>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_DMA_Abort_IT+0xe0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00a      	beq.n	8002522 <HAL_DMA_Abort_IT+0x8a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_DMA_Abort_IT+0xe4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d102      	bne.n	800251c <HAL_DMA_Abort_IT+0x84>
 8002516:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800251a:	e00e      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 800251c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002520:	e00b      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 8002522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002526:	e008      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	e005      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 800252e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002532:	e002      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 8002534:	2310      	movs	r3, #16
 8002536:	e000      	b.n	800253a <HAL_DMA_Abort_IT+0xa2>
 8002538:	2301      	movs	r3, #1
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_DMA_Abort_IT+0xe8>)
 800253c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
    } 
  }
  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40020008 	.word	0x40020008
 800256c:	4002001c 	.word	0x4002001c
 8002570:	40020030 	.word	0x40020030
 8002574:	40020044 	.word	0x40020044
 8002578:	40020058 	.word	0x40020058
 800257c:	4002006c 	.word	0x4002006c
 8002580:	40020000 	.word	0x40020000

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b08b      	sub	sp, #44	; 0x2c
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e169      	b.n	800286c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002598:	2201      	movs	r2, #1
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 8158 	bne.w	8002866 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a9a      	ldr	r2, [pc, #616]	; (8002824 <HAL_GPIO_Init+0x2a0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d05e      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025c0:	4a98      	ldr	r2, [pc, #608]	; (8002824 <HAL_GPIO_Init+0x2a0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d875      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025c6:	4a98      	ldr	r2, [pc, #608]	; (8002828 <HAL_GPIO_Init+0x2a4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d058      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025cc:	4a96      	ldr	r2, [pc, #600]	; (8002828 <HAL_GPIO_Init+0x2a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d86f      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025d2:	4a96      	ldr	r2, [pc, #600]	; (800282c <HAL_GPIO_Init+0x2a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d052      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025d8:	4a94      	ldr	r2, [pc, #592]	; (800282c <HAL_GPIO_Init+0x2a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d869      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025de:	4a94      	ldr	r2, [pc, #592]	; (8002830 <HAL_GPIO_Init+0x2ac>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d04c      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025e4:	4a92      	ldr	r2, [pc, #584]	; (8002830 <HAL_GPIO_Init+0x2ac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d863      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025ea:	4a92      	ldr	r2, [pc, #584]	; (8002834 <HAL_GPIO_Init+0x2b0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d046      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025f0:	4a90      	ldr	r2, [pc, #576]	; (8002834 <HAL_GPIO_Init+0x2b0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d85d      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d82a      	bhi.n	8002650 <HAL_GPIO_Init+0xcc>
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d859      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_GPIO_Init+0x80>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	0800267f 	.word	0x0800267f
 8002608:	08002659 	.word	0x08002659
 800260c:	0800266b 	.word	0x0800266b
 8002610:	080026ad 	.word	0x080026ad
 8002614:	080026b3 	.word	0x080026b3
 8002618:	080026b3 	.word	0x080026b3
 800261c:	080026b3 	.word	0x080026b3
 8002620:	080026b3 	.word	0x080026b3
 8002624:	080026b3 	.word	0x080026b3
 8002628:	080026b3 	.word	0x080026b3
 800262c:	080026b3 	.word	0x080026b3
 8002630:	080026b3 	.word	0x080026b3
 8002634:	080026b3 	.word	0x080026b3
 8002638:	080026b3 	.word	0x080026b3
 800263c:	080026b3 	.word	0x080026b3
 8002640:	080026b3 	.word	0x080026b3
 8002644:	080026b3 	.word	0x080026b3
 8002648:	08002661 	.word	0x08002661
 800264c:	08002675 	.word	0x08002675
 8002650:	4a79      	ldr	r2, [pc, #484]	; (8002838 <HAL_GPIO_Init+0x2b4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002656:	e02c      	b.n	80026b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	623b      	str	r3, [r7, #32]
          break;
 800265e:	e029      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	623b      	str	r3, [r7, #32]
          break;
 8002668:	e024      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	3308      	adds	r3, #8
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e01f      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	330c      	adds	r3, #12
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e01a      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002686:	2304      	movs	r3, #4
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e013      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002694:	2308      	movs	r3, #8
 8002696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	611a      	str	r2, [r3, #16]
          break;
 800269e:	e009      	b.n	80026b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a0:	2308      	movs	r3, #8
 80026a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	615a      	str	r2, [r3, #20]
          break;
 80026aa:	e003      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
          break;
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          break;
 80026b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d801      	bhi.n	80026be <HAL_GPIO_Init+0x13a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e001      	b.n	80026c2 <HAL_GPIO_Init+0x13e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2bff      	cmp	r3, #255	; 0xff
 80026c8:	d802      	bhi.n	80026d0 <HAL_GPIO_Init+0x14c>
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x152>
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	3b08      	subs	r3, #8
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	210f      	movs	r1, #15
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80b1 	beq.w	8002866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_GPIO_Init+0x2b8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a4c      	ldr	r2, [pc, #304]	; (800283c <HAL_GPIO_Init+0x2b8>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_GPIO_Init+0x2b8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800271c:	4a48      	ldr	r2, [pc, #288]	; (8002840 <HAL_GPIO_Init+0x2bc>)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <HAL_GPIO_Init+0x2c0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_GPIO_Init+0x1ec>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <HAL_GPIO_Init+0x2c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00d      	beq.n	800276c <HAL_GPIO_Init+0x1e8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3e      	ldr	r2, [pc, #248]	; (800284c <HAL_GPIO_Init+0x2c8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0x1e4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3d      	ldr	r2, [pc, #244]	; (8002850 <HAL_GPIO_Init+0x2cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_GPIO_Init+0x1e0>
 8002760:	2303      	movs	r3, #3
 8002762:	e006      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002764:	2304      	movs	r3, #4
 8002766:	e004      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002768:	2302      	movs	r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002770:	2300      	movs	r3, #0
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	4093      	lsls	r3, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002782:	492f      	ldr	r1, [pc, #188]	; (8002840 <HAL_GPIO_Init+0x2bc>)
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	492c      	ldr	r1, [pc, #176]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4928      	ldr	r1, [pc, #160]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4922      	ldr	r1, [pc, #136]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	491e      	ldr	r1, [pc, #120]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4918      	ldr	r1, [pc, #96]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	4914      	ldr	r1, [pc, #80]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d021      	beq.n	8002858 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
 8002820:	e021      	b.n	8002866 <HAL_GPIO_Init+0x2e2>
 8002822:	bf00      	nop
 8002824:	10320000 	.word	0x10320000
 8002828:	10310000 	.word	0x10310000
 800282c:	10220000 	.word	0x10220000
 8002830:	10210000 	.word	0x10210000
 8002834:	10120000 	.word	0x10120000
 8002838:	10110000 	.word	0x10110000
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	40010800 	.word	0x40010800
 8002848:	40010c00 	.word	0x40010c00
 800284c:	40011000 	.word	0x40011000
 8002850:	40011400 	.word	0x40011400
 8002854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_GPIO_Init+0x304>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	43db      	mvns	r3, r3
 8002860:	4909      	ldr	r1, [pc, #36]	; (8002888 <HAL_GPIO_Init+0x304>)
 8002862:	4013      	ands	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f ae8e 	bne.w	8002598 <HAL_GPIO_Init+0x14>
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	372c      	adds	r7, #44	; 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	807b      	strh	r3, [r7, #2]
 80028c6:	4613      	mov	r3, r2
 80028c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ca:	787b      	ldrb	r3, [r7, #1]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e272      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8087 	beq.w	8002a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800290c:	4b92      	ldr	r3, [pc, #584]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	d00c      	beq.n	8002932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002918:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d112      	bne.n	800294a <HAL_RCC_OscConfig+0x5e>
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d10b      	bne.n	800294a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002932:	4b89      	ldr	r3, [pc, #548]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d06c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x12c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d168      	bne.n	8002a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e24c      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x76>
 8002954:	4b80      	ldr	r3, [pc, #512]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a7f      	ldr	r2, [pc, #508]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e02e      	b.n	80029c0 <HAL_RCC_OscConfig+0xd4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x98>
 800296a:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xd4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0xbc>
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6e      	ldr	r2, [pc, #440]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xd4>
 80029a8:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b68      	ldr	r3, [pc, #416]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a67      	ldr	r2, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe ff48 	bl	800185c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe ff44 	bl	800185c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e200      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b5d      	ldr	r3, [pc, #372]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xe4>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe ff34 	bl	800185c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe ff30 	bl	800185c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1ec      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x10c>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d063      	beq.n	8002aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x18c>
 8002a3e:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x176>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1c0      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4939      	ldr	r1, [pc, #228]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e03a      	b.n	8002aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_RCC_OscConfig+0x270>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fee9 	bl	800185c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fee5 	bl	800185c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1a1      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4927      	ldr	r1, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	e015      	b.n	8002aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_RCC_OscConfig+0x270>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fec8 	bl	800185c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fec4 	bl	800185c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e180      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03a      	beq.n	8002b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b08:	f7fe fea8 	bl	800185c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe fea4 	bl	800185c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e160      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f000 fac4 	bl	80030bc <RCC_Delay>
 8002b34:	e01c      	b.n	8002b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe8e 	bl	800185c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b42:	e00f      	b.n	8002b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b44:	f7fe fe8a 	bl	800185c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d908      	bls.n	8002b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e146      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	42420000 	.word	0x42420000
 8002b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b92      	ldr	r3, [pc, #584]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e9      	bne.n	8002b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a6 	beq.w	8002cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a87      	ldr	r2, [pc, #540]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	61d3      	str	r3, [r2, #28]
 8002b9a:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <HAL_RCC_OscConfig+0x4c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	; (8002db4 <HAL_RCC_OscConfig+0x4c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7e      	ldr	r2, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x4c8>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fe4b 	bl	800185c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe fe47 	bl	800185c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	; 0x64
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e103      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <HAL_RCC_OscConfig+0x4c8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x312>
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4a6e      	ldr	r2, [pc, #440]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6213      	str	r3, [r2, #32]
 8002bfc:	e02d      	b.n	8002c5a <HAL_RCC_OscConfig+0x36e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x334>
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a66      	ldr	r2, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	e01c      	b.n	8002c5a <HAL_RCC_OscConfig+0x36e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x356>
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a5d      	ldr	r2, [pc, #372]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	e00b      	b.n	8002c5a <HAL_RCC_OscConfig+0x36e>
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a5a      	ldr	r2, [pc, #360]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 0304 	bic.w	r3, r3, #4
 8002c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d015      	beq.n	8002c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fdfb 	bl	800185c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fdf7 	bl	800185c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0b1      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ee      	beq.n	8002c6a <HAL_RCC_OscConfig+0x37e>
 8002c8c:	e014      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fde5 	bl	800185c <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fde1 	bl	800185c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e09b      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a3b      	ldr	r2, [pc, #236]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8087 	beq.w	8002de2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d061      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d146      	bne.n	8002d76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fdb5 	bl	800185c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fdb1 	bl	800185c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e06d      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d108      	bne.n	8002d30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4921      	ldr	r1, [pc, #132]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a19      	ldr	r1, [r3, #32]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	430b      	orrs	r3, r1
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fd85 	bl	800185c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fe fd81 	bl	800185c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e03d      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x46a>
 8002d74:	e035      	b.n	8002de2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fd6e 	bl	800185c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fd6a 	bl	800185c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e026      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x498>
 8002da2:	e01e      	b.n	8002de2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e019      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x500>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d0      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d910      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	4965      	ldr	r1, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d040      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e073      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06b      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4936      	ldr	r1, [pc, #216]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fcbc 	bl	800185c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fe fcb8 	bl	800185c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e053      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d210      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1cc>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fc1a 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	0800416c 	.word	0x0800416c
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	b490      	push	{r4, r7}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fca:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fcc:	1d3c      	adds	r4, r7, #4
 8002fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fd4:	f240 2301 	movw	r3, #513	; 0x201
 8002fd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fee:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x46>
 8003002:	e02b      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	e02b      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3328      	adds	r3, #40	; 0x28
 8003014:	443b      	add	r3, r7
 8003016:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800301a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d012      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0c5b      	lsrs	r3, r3, #17
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	3328      	adds	r3, #40	; 0x28
 8003032:	443b      	add	r3, r7
 8003034:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003038:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_RCC_GetSysClockFreq+0xb4>)
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	e004      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	623b      	str	r3, [r7, #32]
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_GetSysClockFreq+0xb4>)
 800305e:	623b      	str	r3, [r7, #32]
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6a3b      	ldr	r3, [r7, #32]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bc90      	pop	{r4, r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0800414c 	.word	0x0800414c
 8003074:	40021000 	.word	0x40021000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	003d0900 	.word	0x003d0900

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <HAL_RCC_GetHCLKFreq+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003098:	f7ff fff2 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	0800417c 	.word	0x0800417c

080030bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <RCC_Delay+0x34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <RCC_Delay+0x38>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a5b      	lsrs	r3, r3, #9
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d8:	bf00      	nop
  }
  while (Delay --);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	60fa      	str	r2, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f9      	bne.n	80030d8 <RCC_Delay+0x1c>
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000000 	.word	0x20000000
 80030f4:	10624dd3 	.word	0x10624dd3

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003118:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	61d3      	str	r3, [r2, #28]
 8003130:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b46      	ldr	r3, [pc, #280]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d118      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a42      	ldr	r2, [pc, #264]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003158:	f7fe fb80 	bl	800185c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fe fb7c 	bl	800185c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e06d      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b3a      	ldr	r3, [pc, #232]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d027      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b2:	4a29      	ldr	r2, [pc, #164]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d014      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fb4b 	bl	800185c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fb47 	bl	800185c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4917      	ldr	r1, [pc, #92]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	490b      	ldr	r1, [pc, #44]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
 8003260:	42420440 	.word	0x42420440

08003264 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b08d      	sub	sp, #52	; 0x34
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800326e:	f107 040c 	add.w	r4, r7, #12
 8003272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003278:	f240 2301 	movw	r3, #513	; 0x201
 800327c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b10      	cmp	r3, #16
 800329c:	f200 808e 	bhi.w	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d049      	beq.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d079      	beq.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032ac:	e086      	b.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07f      	beq.n	80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	0c9b      	lsrs	r3, r3, #18
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	3330      	adds	r3, #48	; 0x30
 80032ca:	443b      	add	r3, r7
 80032cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c5b      	lsrs	r3, r3, #17
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	3330      	adds	r3, #48	; 0x30
 80032e8:	443b      	add	r3, r7
 80032ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032fa:	4a37      	ldr	r2, [pc, #220]	; (80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	d102      	bne.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003328:	e04a      	b.n	80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4a2c      	ldr	r2, [pc, #176]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003338:	e042      	b.n	80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d108      	bne.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	e01f      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003368:	d109      	bne.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800336a:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003376:	f649 4340 	movw	r3, #40000	; 0x9c40
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003388:	d11c      	bne.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003396:	f24f 4324 	movw	r3, #62500	; 0xf424
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800339c:	e012      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800339e:	e011      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033a0:	f7ff fe78 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	0b9b      	lsrs	r3, r3, #14
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	3301      	adds	r3, #1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033ba:	e004      	b.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80033c4:	bf00      	nop
    }
  }
  return (frequency);
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3734      	adds	r7, #52	; 0x34
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	0800415c 	.word	0x0800415c
 80033d4:	40021000 	.word	0x40021000
 80033d8:	007a1200 	.word	0x007a1200
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	aaaaaaab 	.word	0xaaaaaaab

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e076      	b.n	80034e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003406:	d009      	beq.n	800341c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	e005      	b.n	800341c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe f8d6 	bl	80015e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1a      	lsrs	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 0204 	and.w	r2, r2, #4
 80034c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_SPI_Transmit+0x22>
 800350a:	2302      	movs	r3, #2
 800350c:	e126      	b.n	800375c <HAL_SPI_Transmit+0x270>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003516:	f7fe f9a1 	bl	800185c <HAL_GetTick>
 800351a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003530:	e10b      	b.n	800374a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_SPI_Transmit+0x52>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003542:	e102      	b.n	800374a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358a:	d10f      	bne.n	80035ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d007      	beq.n	80035ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d2:	d14b      	bne.n	800366c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0xf6>
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d13e      	bne.n	8003660 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003606:	e02b      	b.n	8003660 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d112      	bne.n	800363c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
 800363a:	e011      	b.n	8003660 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363c:	f7fe f90e 	bl	800185c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d803      	bhi.n	8003654 <HAL_SPI_Transmit+0x168>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d102      	bne.n	800365a <HAL_SPI_Transmit+0x16e>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800365e:	e074      	b.n	800374a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ce      	bne.n	8003608 <HAL_SPI_Transmit+0x11c>
 800366a:	e04c      	b.n	8003706 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_Transmit+0x18e>
 8003674:	8afb      	ldrh	r3, [r7, #22]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d140      	bne.n	80036fc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036a0:	e02c      	b.n	80036fc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d113      	bne.n	80036d8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80036d6:	e011      	b.n	80036fc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d8:	f7fe f8c0 	bl	800185c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d803      	bhi.n	80036f0 <HAL_SPI_Transmit+0x204>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d102      	bne.n	80036f6 <HAL_SPI_Transmit+0x20a>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036fa:	e026      	b.n	800374a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1cd      	bne.n	80036a2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fcc8 	bl	80040a0 <SPI_EndRxTxTransaction>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e000      	b.n	800374a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003748:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800375a:	7ffb      	ldrb	r3, [r7, #31]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003780:	d112      	bne.n	80037a8 <HAL_SPI_Receive+0x44>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10e      	bne.n	80037a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2204      	movs	r2, #4
 800378e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8f1 	bl	8003986 <HAL_SPI_TransmitReceive>
 80037a4:	4603      	mov	r3, r0
 80037a6:	e0ea      	b.n	800397e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Receive+0x52>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0e3      	b.n	800397e <HAL_SPI_Receive+0x21a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037be:	f7fe f84d 	bl	800185c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d002      	beq.n	80037d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
 80037d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037d4:	e0ca      	b.n	800396c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_Receive+0x7e>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037e6:	e0c1      	b.n	800396c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2204      	movs	r2, #4
 80037ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382e:	d10f      	bne.n	8003850 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d007      	beq.n	800386e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d162      	bne.n	800393c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003876:	e02e      	b.n	80038d6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d115      	bne.n	80038b2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f103 020c 	add.w	r2, r3, #12
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fd ffd3 	bl	800185c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Receive+0x166>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Receive+0x16c>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038d4:	e04a      	b.n	800396c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1cb      	bne.n	8003878 <HAL_SPI_Receive+0x114>
 80038e0:	e031      	b.n	8003946 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d113      	bne.n	8003918 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	b292      	uxth	r2, r2
 80038fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003916:	e011      	b.n	800393c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003918:	f7fd ffa0 	bl	800185c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d803      	bhi.n	8003930 <HAL_SPI_Receive+0x1cc>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d102      	bne.n	8003936 <HAL_SPI_Receive+0x1d2>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800393a:	e017      	b.n	800396c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1cd      	bne.n	80038e2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fb56 	bl	8003ffc <SPI_EndRxTransaction>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
 8003968:	e000      	b.n	800396c <HAL_SPI_Receive+0x208>
  }

error :
 800396a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08c      	sub	sp, #48	; 0x30
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x26>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e18a      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x33c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b4:	f7fd ff52 	bl	800185c <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00f      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x70>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039dc:	d107      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x68>
 80039e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f4:	e15b      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x82>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x82>
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a0e:	e14e      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d003      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2205      	movs	r2, #5
 8003a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d007      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a80:	d178      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x10a>
 8003a8a:	8b7b      	ldrh	r3, [r7, #26]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d166      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab4:	e053      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d11b      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x176>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x176>
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d113      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	1c9a      	adds	r2, r3, #2
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d119      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x1b8>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d014      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	1c9a      	adds	r2, r3, #2
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b3e:	f7fd fe8d 	bl	800185c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d807      	bhi.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d003      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b5c:	e0a7      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1a6      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x130>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1a1      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x130>
 8003b72:	e07c      	b.n	8003c6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x1fc>
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d16b      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba8:	e057      	b.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d114      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d119      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x2ae>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c30:	2301      	movs	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c34:	f7fd fe12 	bl	800185c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d803      	bhi.n	8003c4c <HAL_SPI_TransmitReceive+0x2c6>
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x2cc>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c58:	e029      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1a2      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x224>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d19d      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fa14 	bl	80040a0 <SPI_EndRxTxTransaction>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c8a:	e010      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	e000      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10f      	bne.n	8003d10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
    return;
 8003d0e:	e0be      	b.n	8003e8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_SPI_IRQHandler+0x66>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	09db      	lsrs	r3, r3, #7
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
    return;
 8003d30:	e0ad      	b.n	8003e8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_SPI_IRQHandler+0x80>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a1 	beq.w	8003e8e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 809a 	beq.w	8003e8e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d023      	beq.n	8003dae <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d011      	beq.n	8003d96 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e00b      	b.n	8003dae <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
        return;
 8003dac:	e06f      	b.n	8003e8e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d014      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04f      	beq.n	8003e8c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dfa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <HAL_SPI_IRQHandler+0x14c>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d034      	beq.n	8003e82 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0203 	bic.w	r2, r2, #3
 8003e26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d011      	beq.n	8003e54 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_SPI_IRQHandler+0x1c8>)
 8003e36:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fb2b 	bl	8002498 <HAL_DMA_Abort_IT>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_SPI_IRQHandler+0x1c8>)
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fb15 	bl	8002498 <HAL_DMA_Abort_IT>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e80:	e003      	b.n	8003e8a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f808 	bl	8003e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e88:	e000      	b.n	8003e8c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003e8a:	bf00      	nop
    return;
 8003e8c:	bf00      	nop
  }
}
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08003ec5 	.word	0x08003ec5

08003e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb8:	b2db      	uxtb	r3, r3
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff ffda 	bl	8003e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003efc:	f7fd fcae 	bl	800185c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f0c:	f7fd fca6 	bl	800185c <HAL_GetTick>
 8003f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	015b      	lsls	r3, r3, #5
 8003f18:	0d1b      	lsrs	r3, r3, #20
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f22:	e054      	b.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d050      	beq.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f2c:	f7fd fc96 	bl	800185c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d902      	bls.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d13d      	bne.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5a:	d111      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	d004      	beq.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d107      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d10f      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e017      	b.n	8003fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d19b      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000000 	.word	0x20000000

08003ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004010:	d111      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d004      	beq.n	8004026 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d107      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d117      	bne.n	8004070 <SPI_EndRxTransaction+0x74>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d112      	bne.n	8004070 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2200      	movs	r2, #0
 8004052:	2101      	movs	r1, #1
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff ff49 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e013      	b.n	8004098 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ff36 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e000      	b.n	8004098 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff ff18 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e000      	b.n	80040d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	2600      	movs	r6, #0
 80040e0:	4d0c      	ldr	r5, [pc, #48]	; (8004114 <__libc_init_array+0x38>)
 80040e2:	4c0d      	ldr	r4, [pc, #52]	; (8004118 <__libc_init_array+0x3c>)
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	f000 f822 	bl	8004134 <_init>
 80040f0:	2600      	movs	r6, #0
 80040f2:	4d0a      	ldr	r5, [pc, #40]	; (800411c <__libc_init_array+0x40>)
 80040f4:	4c0a      	ldr	r4, [pc, #40]	; (8004120 <__libc_init_array+0x44>)
 80040f6:	1b64      	subs	r4, r4, r5
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004184 	.word	0x08004184
 8004118:	08004184 	.word	0x08004184
 800411c:	08004184 	.word	0x08004184
 8004120:	08004188 	.word	0x08004188

08004124 <memset>:
 8004124:	4603      	mov	r3, r0
 8004126:	4402      	add	r2, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <_init>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr

08004140 <_fini>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

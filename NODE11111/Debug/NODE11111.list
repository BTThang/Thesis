
NODE11111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b880  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800b990  0800b990  0001b990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beec  0800beec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800beec  0800beec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800beec  0800beec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beec  0800beec  0001beec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  200001e0  0800c0d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001378  0800c0d4  00021378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013015  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003421  00000000  00000000  0003321e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00036640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00037970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0ca  00000000  00000000  00038b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ae8  00000000  00000000  00053c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095805  00000000  00000000  00069712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006038  00000000  00000000  000fef68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b978 	.word	0x0800b978

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b978 	.word	0x0800b978

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;



uint32_t DWT_Delay_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <DWT_Delay_Init+0x58>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <DWT_Delay_Init+0x58>)
 800102e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001032:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <DWT_Delay_Init+0x58>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <DWT_Delay_Init+0x58>)
 800103a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800103e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <DWT_Delay_Init+0x5c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <DWT_Delay_Init+0x5c>)
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <DWT_Delay_Init+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <DWT_Delay_Init+0x5c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <DWT_Delay_Init+0x5c>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800105e:	bf00      	nop
     __ASM volatile ("NOP");
 8001060:	bf00      	nop
  __ASM volatile ("NOP");
 8001062:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <DWT_Delay_Init+0x5c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800106c:	2300      	movs	r3, #0
 800106e:	e000      	b.n	8001072 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001070:	2301      	movs	r3, #1
  }
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000edf0 	.word	0xe000edf0
 8001080:	e0001000 	.word	0xe0001000

08001084 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <delay+0x40>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001092:	f005 fbb9 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <delay+0x44>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010a8:	bf00      	nop
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <delay+0x40>)
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3f8      	bcc.n	80010aa <delay+0x26>
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e0001000 	.word	0xe0001000
 80010c8:	431bde83 	.word	0x431bde83

080010cc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f002 fa83 	bl	8003604 <HAL_GPIO_Init>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f002 fa66 	bl	8003604 <HAL_GPIO_Init>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <DHT_Start>:


void DHT_Start (void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001144:	f7ff ff6e 	bl	8001024 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <DHT_Start+0x48>)
 800114e:	f7ff ffbd 	bl	80010cc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <DHT_Start+0x48>)
 800115a:	f002 fbee 	bl	800393a <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (12000);  // >1ms delay
 800115e:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001162:	f7ff ff8f 	bl	8001084 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <DHT_Start+0x48>)
 800116e:	f002 fbe4 	bl	800393a <HAL_GPIO_WritePin>
    delay (30);   // wait for 30us
 8001172:	201e      	movs	r0, #30
 8001174:	f7ff ff86 	bl	8001084 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <DHT_Start+0x48>)
 800117e:	f7ff ffc2 	bl	8001106 <Set_Pin_Input>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010c00 	.word	0x40010c00

0800118c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);
 8001192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <DHT_Check_Response+0x68>)
 8001198:	f7ff ffb5 	bl	8001106 <Set_Pin_Input>
	uint8_t Response = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80011a0:	2028      	movs	r0, #40	; 0x28
 80011a2:	f7ff ff6f 	bl	8001084 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <DHT_Check_Response+0x68>)
 80011ac:	f002 fbae 	bl	800390c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <DHT_Check_Response+0x4a>
	{
		delay (80);
 80011b6:	2050      	movs	r0, #80	; 0x50
 80011b8:	f7ff ff64 	bl	8001084 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <DHT_Check_Response+0x68>)
 80011c2:	f002 fba3 	bl	800390c <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <DHT_Check_Response+0x46>
 80011cc:	2301      	movs	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e001      	b.n	80011d6 <DHT_Check_Response+0x4a>
		else Response = -1;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80011d6:	bf00      	nop
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <DHT_Check_Response+0x68>)
 80011de:	f002 fb95 	bl	800390c <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f7      	bne.n	80011d8 <DHT_Check_Response+0x4c>

	return Response;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint8_t i = 0,j;
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
	for (j=0;j<8;j++)
 8001202:	2300      	movs	r3, #0
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	e03a      	b.n	800127e <DHT_Read+0x86>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001208:	bf00      	nop
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4820      	ldr	r0, [pc, #128]	; (8001290 <DHT_Read+0x98>)
 8001210:	f002 fb7c 	bl	800390c <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f7      	beq.n	800120a <DHT_Read+0x12>
		delay (40);   // wait for 40 us
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f7ff ff32 	bl	8001084 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001224:	481a      	ldr	r0, [pc, #104]	; (8001290 <DHT_Read+0x98>)
 8001226:	f002 fb71 	bl	800390c <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10e      	bne.n	800124e <DHT_Read+0x56>
		{
			i&= ~(1<<(7-j));   // write 0
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2201      	movs	r2, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	b25a      	sxtb	r2, r3
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	4013      	ands	r3, r2
 8001248:	b25b      	sxtb	r3, r3
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	e00b      	b.n	8001266 <DHT_Read+0x6e>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	f1c3 0307 	rsb	r3, r3, #7
 8001254:	2201      	movs	r2, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	b25a      	sxtb	r2, r3
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4313      	orrs	r3, r2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001266:	bf00      	nop
 8001268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <DHT_Read+0x98>)
 800126e:	f002 fb4d 	bl	800390c <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f7      	bne.n	8001268 <DHT_Read+0x70>
	for (j=0;j<8;j++)
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	3301      	adds	r3, #1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b07      	cmp	r3, #7
 8001282:	d9c1      	bls.n	8001208 <DHT_Read+0x10>
	}
	return i;
 8001284:	79fb      	ldrb	r3, [r7, #7]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010c00 	.word	0x40010c00

08001294 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800129c:	f7ff ff50 	bl	8001140 <DHT_Start>
	Presence = DHT_Check_Response ();
 80012a0:	f7ff ff74 	bl	800118c <DHT_Check_Response>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <DHT_GetData+0xc8>)
 80012aa:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80012ac:	f7ff ffa4 	bl	80011f8 <DHT_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <DHT_GetData+0xcc>)
 80012b6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80012b8:	f7ff ff9e 	bl	80011f8 <DHT_Read>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <DHT_GetData+0xd0>)
 80012c2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80012c4:	f7ff ff98 	bl	80011f8 <DHT_Read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <DHT_GetData+0xd4>)
 80012ce:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80012d0:	f7ff ff92 	bl	80011f8 <DHT_Read>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <DHT_GetData+0xd8>)
 80012da:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80012dc:	f7ff ff8c 	bl	80011f8 <DHT_Read>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <DHT_GetData+0xdc>)
 80012e6:	801a      	strh	r2, [r3, #0]

	if (SUM == ((Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2) &0x00FF))
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <DHT_GetData+0xdc>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <DHT_GetData+0xcc>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <DHT_GetData+0xd0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <DHT_GetData+0xd4>)
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <DHT_GetData+0xd8>)
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	4413      	add	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4299      	cmp	r1, r3
 800130a:	d123      	bne.n	8001354 <DHT_GetData+0xc0>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ( ((Temp_byte1<<8)|Temp_byte2)*0.1f);
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <DHT_GetData+0xd4>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <DHT_GetData+0xd8>)
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcbf 	bl	8000c9c <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4914      	ldr	r1, [pc, #80]	; (8001374 <DHT_GetData+0xe0>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd0e 	bl	8000d44 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = ( ((Rh_byte1<<8)|Rh_byte2)*0.1f);
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <DHT_GetData+0xcc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <DHT_GetData+0xd0>)
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	4313      	orrs	r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fcad 	bl	8000c9c <__aeabi_i2f>
 8001342:	4603      	mov	r3, r0
 8001344:	490b      	ldr	r1, [pc, #44]	; (8001374 <DHT_GetData+0xe0>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcfc 	bl	8000d44 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
		#endif
	}
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000202 	.word	0x20000202
 8001360:	200001fc 	.word	0x200001fc
 8001364:	200001fd 	.word	0x200001fd
 8001368:	200001fe 	.word	0x200001fe
 800136c:	200001ff 	.word	0x200001ff
 8001370:	20000200 	.word	0x20000200
 8001374:	3dcccccd 	.word	0x3dcccccd

08001378 <LoRa_reset>:
 arguments   :
 LoRa* LoRa --> LoRa object handler

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa *_LoRa) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6898      	ldr	r0, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	899b      	ldrh	r3, [r3, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f002 fad5 	bl	800393a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f001 fb4d 	bl	8002a30 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6898      	ldr	r0, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	899b      	ldrh	r3, [r3, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	f002 faca 	bl	800393a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f001 fb42 	bl	8002a30 <HAL_Delay>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <LoRa_gotoMode>:
 LoRa* LoRa    --> LoRa object handler
 mode	        --> select from defined modes

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa *_LoRa, int mode) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	uint8_t read;
	uint8_t data;

	read = LoRa_read(_LoRa, RegOpMode);
 80013be:	2101      	movs	r1, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f9a0 	bl	8001706 <LoRa_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73bb      	strb	r3, [r7, #14]
	data = read;
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	73fb      	strb	r3, [r7, #15]

	if (mode == SLEEP_MODE) {
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	f023 0307 	bic.w	r3, r3, #7
 80013da:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
 80013e2:	e03e      	b.n	8001462 <LoRa_gotoMode+0xae>
	} else if (mode == STNBY_MODE) {
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10c      	bne.n	8001404 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80013ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	61da      	str	r2, [r3, #28]
 8001402:	e02e      	b.n	8001462 <LoRa_gotoMode+0xae>
	} else if (mode == TRANSMIT_MODE) {
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d10c      	bne.n	8001424 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800140a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800140e:	f023 0307 	bic.w	r3, r3, #7
 8001412:	b25b      	sxtb	r3, r3
 8001414:	f043 0303 	orr.w	r3, r3, #3
 8001418:	b25b      	sxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	61da      	str	r2, [r3, #28]
 8001422:	e01e      	b.n	8001462 <LoRa_gotoMode+0xae>
	} else if (mode == RXCONTIN_MODE) {
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d10c      	bne.n	8001444 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800142a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800142e:	f023 0307 	bic.w	r3, r3, #7
 8001432:	b25b      	sxtb	r3, r3
 8001434:	f043 0305 	orr.w	r3, r3, #5
 8001438:	b25b      	sxtb	r3, r3
 800143a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2205      	movs	r2, #5
 8001440:	61da      	str	r2, [r3, #28]
 8001442:	e00e      	b.n	8001462 <LoRa_gotoMode+0xae>
	} else if (mode == RXSINGLE_MODE) {
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d10b      	bne.n	8001462 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800144a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800144e:	f023 0307 	bic.w	r3, r3, #7
 8001452:	b25b      	sxtb	r3, r3
 8001454:	f043 0306 	orr.w	r3, r3, #6
 8001458:	b25b      	sxtb	r3, r3
 800145a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2206      	movs	r2, #6
 8001460:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	461a      	mov	r2, r3
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f966 	bl	800173a <LoRa_write>
	//HAL_Delay(10);
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <LoRa_readReg>:
 uint16_t w_length	--> detemines number of bytes that you want to read

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa *_LoRa, uint8_t *address, uint16_t r_length,
		uint8_t *output, uint16_t w_length) {
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	889b      	ldrh	r3, [r3, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	f002 fa52 	bl	800393a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6998      	ldr	r0, [r3, #24]
 800149a:	88fa      	ldrh	r2, [r7, #6]
 800149c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	f005 fbfb 	bl	8006c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014a6:	bf00      	nop
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 ffe4 	bl	800747a <HAL_SPI_GetState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1f7      	bne.n	80014a8 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6998      	ldr	r0, [r3, #24]
 80014bc:	8b3a      	ldrh	r2, [r7, #24]
 80014be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	f005 fd26 	bl	8006f14 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014c8:	bf00      	nop
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 ffd3 	bl	800747a <HAL_SPI_GetState>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d1f7      	bne.n	80014ca <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4619      	mov	r1, r3
 80014e6:	f002 fa28 	bl	800393a <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LoRa_writeReg>:
 uint16_t w_length	--> detemines number of bytes that you want to send

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa *_LoRa, uint8_t *address, uint16_t r_length,
		uint8_t *values, uint16_t w_length) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	f002 fa14 	bl	800393a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6998      	ldr	r0, [r3, #24]
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	f005 fbbd 	bl	8006c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001522:	bf00      	nop
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 ffa6 	bl	800747a <HAL_SPI_GetState>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d1f7      	bne.n	8001524 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6998      	ldr	r0, [r3, #24]
 8001538:	8b3a      	ldrh	r2, [r7, #24]
 800153a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	f005 fbac 	bl	8006c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001544:	bf00      	nop
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4618      	mov	r0, r3
 800154c:	f005 ff95 	bl	800747a <HAL_SPI_GetState>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1f7      	bne.n	8001546 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	889b      	ldrh	r3, [r3, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	f002 f9ea 	bl	800393a <HAL_GPIO_WritePin>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <LoRa_setFrequency>:
 int   freq        --> desired frequency in MHz unit, e.g 434

 returns     : Nothing
 DONE
 \* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa *_LoRa, int freq) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
	uint8_t data;
	uint32_t F;
	F = (freq * 524288) >> 5;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	04db      	lsls	r3, r3, #19
 800157c:	115b      	asrs	r3, r3, #5
 800157e:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	0c1b      	lsrs	r3, r3, #16
 8001584:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	461a      	mov	r2, r3
 800158a:	2106      	movs	r1, #6
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f8d4 	bl	800173a <LoRa_write>
	HAL_Delay(5);
 8001592:	2005      	movs	r0, #5
 8001594:	f001 fa4c 	bl	8002a30 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	461a      	mov	r2, r3
 80015a2:	2107      	movs	r1, #7
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8c8 	bl	800173a <LoRa_write>
	HAL_Delay(5);
 80015aa:	2005      	movs	r0, #5
 80015ac:	f001 fa40 	bl	8002a30 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	461a      	mov	r2, r3
 80015b8:	2108      	movs	r1, #8
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8bd 	bl	800173a <LoRa_write>
	HAL_Delay(5);
 80015c0:	2005      	movs	r0, #5
 80015c2:	f001 fa35 	bl	8002a30 <HAL_Delay>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <LoRa_setSpreadingFactor>:
 LoRa* LoRa        --> LoRa object handler
 int   SP          --> desired spreading factor e.g 7

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa *_LoRa, int SF) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
	uint8_t data;
	uint8_t read;

	if (SF < 6)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	dc02      	bgt.n	80015e4 <LoRa_setSpreadingFactor+0x16>
		SF = 6;
 80015de:	2306      	movs	r3, #6
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	e004      	b.n	80015ee <LoRa_setSpreadingFactor+0x20>
	else if (SF > 12)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	dd01      	ble.n	80015ee <LoRa_setSpreadingFactor+0x20>
		SF = 12;
 80015ea:	230c      	movs	r3, #12
 80015ec:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80015ee:	211e      	movs	r1, #30
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f888 	bl	8001706 <LoRa_read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80015fa:	200a      	movs	r0, #10
 80015fc:	f001 fa18 	bl	8002a30 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	461a      	mov	r2, r3
 8001618:	211e      	movs	r1, #30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f88d 	bl	800173a <LoRa_write>
	HAL_Delay(10);
 8001620:	200a      	movs	r0, #10
 8001622:	f001 fa05 	bl	8002a30 <HAL_Delay>
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <LoRa_setPower>:
 LoRa* LoRa        --> LoRa object handler
 int   power       --> desired power e.g POWER_17db

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa *_LoRa, uint8_t power) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	461a      	mov	r2, r3
 800163e:	2109      	movs	r1, #9
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f87a 	bl	800173a <LoRa_write>
	HAL_Delay(10);
 8001646:	200a      	movs	r0, #10
 8001648:	f001 f9f2 	bl	8002a30 <HAL_Delay>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <LoRa_setOCP>:
 LoRa* LoRa        --> LoRa object handler
 int   current     --> desired max currnet in mA, e.g 120

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa *_LoRa, uint8_t current) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
	uint8_t OcpTrim = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

	if (current < 45)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b2c      	cmp	r3, #44	; 0x2c
 8001668:	d801      	bhi.n	800166e <LoRa_setOCP+0x1a>
		current = 45;
 800166a:	232d      	movs	r3, #45	; 0x2d
 800166c:	70fb      	strb	r3, [r7, #3]
	if (current > 240)
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2bf0      	cmp	r3, #240	; 0xf0
 8001672:	d901      	bls.n	8001678 <LoRa_setOCP+0x24>
		current = 240;
 8001674:	23f0      	movs	r3, #240	; 0xf0
 8001676:	70fb      	strb	r3, [r7, #3]

	if (current <= 120)
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b78      	cmp	r3, #120	; 0x78
 800167c:	d809      	bhi.n	8001692 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45) / 5;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	3b2d      	subs	r3, #45	; 0x2d
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <LoRa_setOCP+0x78>)
 8001684:	fb82 1203 	smull	r1, r2, r2, r3
 8001688:	1052      	asrs	r2, r2, #1
 800168a:	17db      	asrs	r3, r3, #31
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e00b      	b.n	80016aa <LoRa_setOCP+0x56>
	else if (current <= 240)
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2bf0      	cmp	r3, #240	; 0xf0
 8001696:	d808      	bhi.n	80016aa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30) / 10;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	331e      	adds	r3, #30
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoRa_setOCP+0x78>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	1092      	asrs	r2, r2, #2
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3320      	adds	r3, #32
 80016ae:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	461a      	mov	r2, r3
 80016b4:	210b      	movs	r1, #11
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f83f 	bl	800173a <LoRa_write>
	HAL_Delay(10);
 80016bc:	200a      	movs	r0, #10
 80016be:	f001 f9b7 	bl	8002a30 <HAL_Delay>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	66666667 	.word	0x66666667

080016d0 <LoRa_setTOMsb_setCRCon>:
 arguments   :
 LoRa* LoRa        --> LoRa object handler

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa *_LoRa) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80016d8:	211e      	movs	r1, #30
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f813 	bl	8001706 <LoRa_read>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	f043 0307 	orr.w	r3, r3, #7
 80016ea:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	461a      	mov	r2, r3
 80016f0:	211e      	movs	r1, #30
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f821 	bl	800173a <LoRa_write>

	HAL_Delay(10);
 80016f8:	200a      	movs	r0, #10
 80016fa:	f001 f999 	bl	8002a30 <HAL_Delay>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <LoRa_read>:
 LoRa*   LoRa        --> LoRa object handler
 uint8_t address     -->	address of the register e.g 0x1D

 returns     : register value
 \* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa *_LoRa, uint8_t address) {
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af02      	add	r7, sp, #8
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001718:	b2db      	uxtb	r3, r3
 800171a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800171c:	f107 030f 	add.w	r3, r7, #15
 8001720:	f107 010e 	add.w	r1, r7, #14
 8001724:	2201      	movs	r2, #1
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fea3 	bl	8001476 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <LoRa_write>:
 uint8_t address     -->	address of the register e.g 0x1D
 uint8_t value       --> value that you want to write

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa *_LoRa, uint8_t address, uint8_t value) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af02      	add	r7, sp, #8
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	70fb      	strb	r3, [r7, #3]
 8001746:	4613      	mov	r3, r2
 8001748:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001750:	b2db      	uxtb	r3, r3
 8001752:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001754:	78bb      	ldrb	r3, [r7, #2]
 8001756:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001758:	f107 030f 	add.w	r3, r7, #15
 800175c:	f107 010e 	add.w	r1, r7, #14
 8001760:	2201      	movs	r2, #1
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fec3 	bl	80014f2 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <LoRa_BurstWrite>:
 uint8_t *value      --> address of values that you want to write

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa *_LoRa, uint8_t address, uint8_t *value,
		uint8_t length) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	461a      	mov	r2, r3
 8001780:	460b      	mov	r3, r1
 8001782:	72fb      	strb	r3, [r7, #11]
 8001784:	4613      	mov	r3, r2
 8001786:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800178e:	b2db      	uxtb	r3, r3
 8001790:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f002 f8cc 	bl	800393a <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6998      	ldr	r0, [r3, #24]
 80017a6:	f107 0117 	add.w	r1, r7, #23
 80017aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017ae:	2201      	movs	r2, #1
 80017b0:	f005 fa74 	bl	8006c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80017b4:	bf00      	nop
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fe5d 	bl	800747a <HAL_SPI_GetState>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d1f7      	bne.n	80017b6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6998      	ldr	r0, [r3, #24]
 80017ca:	7abb      	ldrb	r3, [r7, #10]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f005 fa62 	bl	8006c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80017d8:	bf00      	nop
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fe4b 	bl	800747a <HAL_SPI_GetState>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d1f7      	bne.n	80017da <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f002 f8a0 	bl	800393a <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <LoRa_isvalid>:
 arguments   :
 LoRa* LoRa --> LoRa object handler

 returns     : returns 1 if all of the values were given, otherwise returns 0
 \* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa *_LoRa) {
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]

	return 1;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <LoRa_transmit>:
	LoRa_transmit(_LoRa,send_buf ,24 + send_msg.buf_size, 500);
	free(send_buf);
}

uint8_t LoRa_transmit(LoRa *_LoRa, uint8_t *data, uint8_t length,
		uint16_t timeout) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	4611      	mov	r1, r2
 8001822:	461a      	mov	r2, r3
 8001824:	460b      	mov	r3, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001832:	2101      	movs	r1, #1
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fdbd 	bl	80013b4 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800183a:	210e      	movs	r1, #14
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff ff62 	bl	8001706 <LoRa_read>
 8001842:	4603      	mov	r3, r0
 8001844:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	461a      	mov	r2, r3
 800184a:	210d      	movs	r1, #13
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff74 	bl	800173a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	461a      	mov	r2, r3
 8001856:	2122      	movs	r1, #34	; 0x22
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff ff6e 	bl	800173a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	2100      	movs	r1, #0
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff ff85 	bl	8001774 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800186a:	2103      	movs	r1, #3
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fda1 	bl	80013b4 <LoRa_gotoMode>
	while (1) {
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001872:	2112      	movs	r1, #18
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff ff46 	bl	8001706 <LoRa_read>
 800187a:	4603      	mov	r3, r0
 800187c:	74fb      	strb	r3, [r7, #19]
		if ((read & 0x08) != 0) {
 800187e:	7cfb      	ldrb	r3, [r7, #19]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00a      	beq.n	800189e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001888:	22ff      	movs	r2, #255	; 0xff
 800188a:	2112      	movs	r1, #18
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff ff54 	bl	800173a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001892:	6979      	ldr	r1, [r7, #20]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fd8d 	bl	80013b4 <LoRa_gotoMode>
			return 1;
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <LoRa_transmit+0xa8>
		} else {
			if (--timeout == 0) {
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	80bb      	strh	r3, [r7, #4]
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80018aa:	6979      	ldr	r1, [r7, #20]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff fd81 	bl	80013b4 <LoRa_gotoMode>
				return 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e003      	b.n	80018be <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f001 f8ba 	bl	8002a30 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80018bc:	e7d9      	b.n	8001872 <LoRa_transmit+0x5c>
	}

}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <LoRa_startReceiving>:
 arguments   :
 LoRa*    LoRa     --> LoRa object handler

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa *_LoRa) {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
//	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
	LoRa_write(_LoRa, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80018ce:	2285      	movs	r2, #133	; 0x85
 80018d0:	2101      	movs	r1, #1
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff31 	bl	800173a <LoRa_write>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <received>:

int received(LoRa *_LoRa) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	if (LoRa_read(_LoRa, REG_IRQ_FLAGS) & IRQ_RX_DONE_MASK)
 80018e8:	2112      	movs	r1, #18
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff0b 	bl	8001706 <LoRa_read>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <received+0x1e>
		return 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <received+0x20>
	return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LoRa_receive>:
 uint8_t  data			--> A pointer to the array that you want to write bytes in it
 uint8_t	 length   --> Determines how many bytes you want to read

 returns     : The number of bytes received
 \* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa *_LoRa, uint8_t *data, uint8_t length) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	4613      	mov	r3, r2
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < length; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	e007      	b.n	8001930 <LoRa_receive+0x28>
		data[i] = 0;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4413      	add	r3, r2
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3301      	adds	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf3      	blt.n	8001920 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001938:	2101      	movs	r1, #1
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fd3a 	bl	80013b4 <LoRa_gotoMode>
//	LoRa_read(_LoRa, RegFiFoAddPtr);
//	LoRa_read(_LoRa, RegFiFoAddPtr);
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001940:	2112      	movs	r1, #18
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fedf 	bl	8001706 <LoRa_read>
 8001948:	4603      	mov	r3, r0
 800194a:	74fb      	strb	r3, [r7, #19]

	if ((read & 0x40) != 0) {
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02f      	beq.n	80019b6 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	2112      	movs	r1, #18
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff feed 	bl	800173a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001960:	2113      	movs	r1, #19
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fecf 	bl	8001706 <LoRa_read>
 8001968:	4603      	mov	r3, r0
 800196a:	74bb      	strb	r3, [r7, #18]

		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800196c:	2110      	movs	r1, #16
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff fec9 	bl	8001706 <LoRa_read>
 8001974:	4603      	mov	r3, r0
 8001976:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	461a      	mov	r2, r3
 800197c:	210d      	movs	r1, #13
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff fedb 	bl	800173a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001984:	7cba      	ldrb	r2, [r7, #18]
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4293      	cmp	r3, r2
 800198a:	bf28      	it	cs
 800198c:	4613      	movcs	r3, r2
 800198e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < min; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00b      	b.n	80019ae <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	18d4      	adds	r4, r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff feb1 	bl	8001706 <LoRa_read>
 80019a4:	4603      	mov	r3, r0
 80019a6:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < min; i++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbef      	blt.n	8001996 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80019b6:	2105      	movs	r1, #5
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fcfb 	bl	80013b4 <LoRa_gotoMode>
	return min;
 80019be:	7ffb      	ldrb	r3, [r7, #31]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3724      	adds	r7, #36	; 0x24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <LoRa_init>:
 arguments   :
 LoRa* LoRa        --> LoRa object handler

 returns     : Nothing
 \* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa *_LoRa) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t read;

	if (LoRa_isvalid(_LoRa)) {
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff16 	bl	8001802 <LoRa_isvalid>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8093 	beq.w	8001b04 <LoRa_init+0x13c>
		// goto sleep mode:
		LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80019de:	2100      	movs	r1, #0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fce7 	bl	80013b4 <LoRa_gotoMode>
		HAL_Delay(10);
 80019e6:	200a      	movs	r0, #10
 80019e8:	f001 f822 	bl	8002a30 <HAL_Delay>

		// turn on lora mode:
		read = LoRa_read(_LoRa, RegOpMode);
 80019ec:	2101      	movs	r1, #1
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fe89 	bl	8001706 <LoRa_read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f001 f819 	bl	8002a30 <HAL_Delay>
		data = read | 0x80;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a04:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegOpMode, data);
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fe94 	bl	800173a <LoRa_write>
		HAL_Delay(100);
 8001a12:	2064      	movs	r0, #100	; 0x64
 8001a14:	f001 f80c 	bl	8002a30 <HAL_Delay>

		// set frequency:
		LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fda5 	bl	800156e <LoRa_setFrequency>

		// set output power gain:
		LoRa_setPower(_LoRa, _LoRa->power);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fdfe 	bl	800162e <LoRa_setPower>

		// set over current protection:
		LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fe0a 	bl	8001654 <LoRa_setOCP>

		// set LNA gain:
		LoRa_write(_LoRa, RegLna, 0x03);
 8001a40:	2203      	movs	r2, #3
 8001a42:	210c      	movs	r1, #12
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fe78 	bl	800173a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
		LoRa_setTOMsb_setCRCon(_LoRa);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe40 	bl	80016d0 <LoRa_setTOMsb_setCRCon>
		LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fdb8 	bl	80015ce <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
		LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	211f      	movs	r1, #31
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fe69 	bl	800173a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
		// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
		//       bits represent --> |   bandwidth   |     CR    |I/E|
		data = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73bb      	strb	r3, [r7, #14]
		data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig1, data);
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	461a      	mov	r2, r3
 8001a88:	211d      	movs	r1, #29
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fe55 	bl	800173a <LoRa_write>

		// set preamble:
		LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fe4b 	bl	800173a <LoRa_write>
		LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2121      	movs	r1, #33	; 0x21
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fe43 	bl	800173a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
		read = LoRa_read(_LoRa, RegDioMapping1);
 8001ab4:	2140      	movs	r1, #64	; 0x40
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fe25 	bl	8001706 <LoRa_read>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
		data = read | 0x3F;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001ac6:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegDioMapping1, data);
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	461a      	mov	r2, r3
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fe33 	bl	800173a <LoRa_write>

		// goto standby mode:
		LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fc6c 	bl	80013b4 <LoRa_gotoMode>
		_LoRa->current_mode = STNBY_MODE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	61da      	str	r2, [r3, #28]
		HAL_Delay(10);
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f000 ffa4 	bl	8002a30 <HAL_Delay>

		read = LoRa_read(_LoRa, RegVersion);
 8001ae8:	2142      	movs	r1, #66	; 0x42
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fe0b 	bl	8001706 <LoRa_read>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
		if (read == 0x12)
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d101      	bne.n	8001afe <LoRa_init+0x136>
			return LORA_OK;
 8001afa:	23c8      	movs	r3, #200	; 0xc8
 8001afc:	e004      	b.n	8001b08 <LoRa_init+0x140>
		else
			return LORA_NOT_FOUND;
 8001afe:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001b02:	e001      	b.n	8001b08 <LoRa_init+0x140>
	} else {
		return LORA_UNAVAILABLE;
 8001b04:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <BH1750_Init+0x34>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001b1e:	f000 f813 	bl	8001b48 <BH1750_Reset>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001b28:	2045      	movs	r0, #69	; 0x45
 8001b2a:	f000 f859 	bl	8001be0 <BH1750_SetMtreg>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <BH1750_Init+0x28>
			return BH1750_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000204 	.word	0x20000204

08001b48 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <BH1750_Reset+0x30>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	1dfa      	adds	r2, r7, #7
 8001b58:	230a      	movs	r3, #10
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2146      	movs	r1, #70	; 0x46
 8001b60:	f002 f848 	bl	8003bf4 <HAL_I2C_Master_Transmit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <BH1750_Reset+0x26>
		return BH1750_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000204 	.word	0x20000204

08001b7c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <BH1750_SetMode+0x22>
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <BH1750_SetMode+0x22>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e018      	b.n	8001bd0 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <BH1750_SetMode+0x30>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e011      	b.n	8001bd0 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8001bac:	79fa      	ldrb	r2, [r7, #7]
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <BH1750_SetMode+0x5c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <BH1750_SetMode+0x60>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	1dfa      	adds	r2, r7, #7
 8001bb8:	230a      	movs	r3, #10
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2146      	movs	r1, #70	; 0x46
 8001bc0:	f002 f818 	bl	8003bf4 <HAL_I2C_Master_Transmit>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <BH1750_SetMode+0x52>
		return BH1750_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000208 	.word	0x20000208
 8001bdc:	20000204 	.word	0x20000204

08001be0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b1e      	cmp	r3, #30
 8001bee:	d902      	bls.n	8001bf6 <BH1750_SetMtreg+0x16>
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d101      	bne.n	8001bfa <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e037      	b.n	8001c6a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <BH1750_SetMtreg+0x94>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BH1750_SetMtreg+0x98>)
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	f107 020c 	add.w	r2, r7, #12
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2146      	movs	r1, #70	; 0x46
 8001c32:	f001 ffdf 	bl	8003bf4 <HAL_I2C_Master_Transmit>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e012      	b.n	8001c6a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <BH1750_SetMtreg+0x98>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	230a      	movs	r3, #10
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2146      	movs	r1, #70	; 0x46
 8001c56:	f001 ffcd 	bl	8003bf4 <HAL_I2C_Master_Transmit>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000209 	.word	0x20000209
 8001c78:	20000204 	.word	0x20000204

08001c7c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <BH1750_ReadLight+0x9c>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2302      	movs	r3, #2
 8001c92:	2146      	movs	r1, #70	; 0x46
 8001c94:	f002 f8ac 	bl	8003df0 <HAL_I2C_Master_Receive>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d136      	bne.n	8001d0c <BH1750_ReadLight+0x90>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8001c9e:	7a3b      	ldrb	r3, [r7, #8]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	7a7a      	ldrb	r2, [r7, #9]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fff8 	bl	8000c9c <__aeabi_i2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <BH1750_ReadLight+0xa0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b45      	cmp	r3, #69	; 0x45
 8001cb6:	d010      	beq.n	8001cda <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <BH1750_ReadLight+0xa0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe ffe9 	bl	8000c94 <__aeabi_ui2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4816      	ldr	r0, [pc, #88]	; (8001d20 <BH1750_ReadLight+0xa4>)
 8001cc8:	f7ff f8f0 	bl	8000eac <__aeabi_fdiv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff f837 	bl	8000d44 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60fb      	str	r3, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <BH1750_ReadLight+0xa8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b21      	cmp	r3, #33	; 0x21
 8001ce0:	d003      	beq.n	8001cea <BH1750_ReadLight+0x6e>
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <BH1750_ReadLight+0xa8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d106      	bne.n	8001cf8 <BH1750_ReadLight+0x7c>
		{
			result /= 2.0;
 8001cea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff f8dc 	bl	8000eac <__aeabi_fdiv>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001cf8:	490b      	ldr	r1, [pc, #44]	; (8001d28 <BH1750_ReadLight+0xac>)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff f8d6 	bl	8000eac <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
		return BH1750_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <BH1750_ReadLight+0x92>
	}
	return BH1750_ERROR;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000204 	.word	0x20000204
 8001d1c:	20000209 	.word	0x20000209
 8001d20:	428a0000 	.word	0x428a0000
 8001d24:	20000208 	.word	0x20000208
 8001d28:	3f99999a 	.word	0x3f99999a

08001d2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <vApplicationGetIdleTaskMemory+0x28>)
 8001d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	2000020c 	.word	0x2000020c
 8001d58:	20000260 	.word	0x20000260

08001d5c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE* f)
#endif

PUTCHAR_PROTOTYPE {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001d64:	1d39      	adds	r1, r7, #4
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4803      	ldr	r0, [pc, #12]	; (8001d7c <__io_putchar+0x20>)
 8001d6e:	f005 fcd6 	bl	800771e <HAL_UART_Transmit>
	return ch;
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200005c4 	.word	0x200005c4

08001d80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b096      	sub	sp, #88	; 0x58
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d8a:	657b      	str	r3, [r7, #84]	; 0x54
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d8c:	f000 fdee 	bl	800296c <HAL_Init>

	/* USER CODE BEGIN Init */
	LoRa_Config();
 8001d90:	f000 fa12 	bl	80021b8 <LoRa_Config>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d94:	f000 f870 	bl	8001e78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d98:	f000 f996 	bl	80020c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d9c:	f000 f906 	bl	8001fac <MX_I2C1_Init>
	MX_SPI1_Init();
 8001da0:	f000 f932 	bl	8002008 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001da4:	f000 f966 	bl	8002074 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001da8:	f000 f8c2 	bl	8001f30 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	DHT_Start();
 8001dac:	f7ff f9c8 	bl	8001140 <DHT_Start>
	BH1750_Init(&hi2c1);
 8001db0:	4828      	ldr	r0, [pc, #160]	; (8001e54 <main+0xd4>)
 8001db2:	f7ff fead 	bl	8001b10 <BH1750_Init>
	BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001db6:	2011      	movs	r0, #17
 8001db8:	f7ff fee0 	bl	8001b7c <BH1750_SetMode>
//	HAL_ADC_Start_IT(&hadc1);

	HAL_GetUIDw0();
 8001dbc:	f000 fe5c 	bl	8002a78 <HAL_GetUIDw0>

	// initialize LoRa Module
	LoRa_reset(&myLoRa);
 8001dc0:	4825      	ldr	r0, [pc, #148]	; (8001e58 <main+0xd8>)
 8001dc2:	f7ff fad9 	bl	8001378 <LoRa_reset>
	LoRa_init(&myLoRa);
 8001dc6:	4824      	ldr	r0, [pc, #144]	; (8001e58 <main+0xd8>)
 8001dc8:	f7ff fdfe 	bl	80019c8 <LoRa_init>
	if (LoRa_init(&myLoRa) == LORA_OK)
 8001dcc:	4822      	ldr	r0, [pc, #136]	; (8001e58 <main+0xd8>)
 8001dce:	f7ff fdfb 	bl	80019c8 <LoRa_init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2bc8      	cmp	r3, #200	; 0xc8
 8001dd6:	d102      	bne.n	8001dde <main+0x5e>
		printf("Lora init success\n");
 8001dd8:	4820      	ldr	r0, [pc, #128]	; (8001e5c <main+0xdc>)
 8001dda:	f007 fe0b 	bl	80099f4 <puts>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <main+0xe0>)
 8001de0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001de4:	461d      	mov	r5, r3
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001df2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 fe19 	bl	8007a30 <osThreadCreate>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <main+0xe4>)
 8001e02:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <main+0xe8>)
 8001e06:	f107 041c 	add.w	r4, r7, #28
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 fe06 	bl	8007a30 <osThreadCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <main+0xec>)
 8001e28:	6013      	str	r3, [r2, #0]

	/* definition and creation of myReceived */
	osThreadDef(myReceived, StartTask03, osPriorityIdle, 0, 128);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <main+0xf0>)
 8001e2c:	463c      	mov	r4, r7
 8001e2e:	461d      	mov	r5, r3
 8001e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myReceivedHandle = osThreadCreate(osThread(myReceived), NULL);
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 fdf5 	bl	8007a30 <osThreadCreate>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <main+0xf4>)
 8001e4a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001e4c:	f005 fde9 	bl	8007a22 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001e50:	e7fe      	b.n	8001e50 <main+0xd0>
 8001e52:	bf00      	nop
 8001e54:	20000518 	.word	0x20000518
 8001e58:	20000460 	.word	0x20000460
 8001e5c:	0800b9b4 	.word	0x0800b9b4
 8001e60:	0800b9c8 	.word	0x0800b9c8
 8001e64:	20000608 	.word	0x20000608
 8001e68:	0800b9e4 	.word	0x0800b9e4
 8001e6c:	2000060c 	.word	0x2000060c
 8001e70:	0800ba00 	.word	0x0800ba00
 8001e74:	20000610 	.word	0x20000610

08001e78 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e82:	2228      	movs	r2, #40	; 0x28
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f006 ffea 	bl	8008e60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ec4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f8d0 	bl	8006074 <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x66>
		Error_Handler();
 8001eda:	f000 fad9 	bl	8002490 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fb3c 	bl	8006578 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0x92>
		Error_Handler();
 8001f06:	f000 fac3 	bl	8002490 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f12:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fcc6 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SystemClock_Config+0xae>
		Error_Handler();
 8001f22:	f000 fab5 	bl	8002490 <Error_Handler>
	}
}
 8001f26:	bf00      	nop
 8001f28:	3750      	adds	r7, #80	; 0x50
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <MX_ADC1_Init+0x78>)
 8001f44:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f5e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f6e:	f000 fd8d 	bl	8002a8c <HAL_ADC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001f78:	f000 fa8a 	bl	8002490 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_ADC1_Init+0x74>)
 8001f8e:	f001 f815 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001f98:	f000 fa7a 	bl	8002490 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200004e8 	.word	0x200004e8
 8001fa8:	40012400 	.word	0x40012400

08001fac <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <MX_I2C1_Init+0x54>)
 8001fb4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_I2C1_Init+0x58>)
 8001fba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fea:	f001 fcbf 	bl	800396c <HAL_I2C_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001ff4:	f000 fa4c 	bl	8002490 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000518 	.word	0x20000518
 8002000:	40005400 	.word	0x40005400
 8002004:	000186a0 	.word	0x000186a0

08002008 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_SPI1_Init+0x64>)
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <MX_SPI1_Init+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_SPI1_Init+0x64>)
 8002014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002018:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_SPI1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_SPI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_SPI1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_SPI1_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002038:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_SPI1_Init+0x64>)
 800203c:	2210      	movs	r2, #16
 800203e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_SPI1_Init+0x64>)
 8002054:	220a      	movs	r2, #10
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_SPI1_Init+0x64>)
 800205a:	f004 fd9b 	bl	8006b94 <HAL_SPI_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002064:	f000 fa14 	bl	8002490 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000056c 	.word	0x2000056c
 8002070:	40013000 	.word	0x40013000

08002074 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <MX_USART3_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART3_UART_Init+0x4c>)
 80020ac:	f005 faea 	bl	8007684 <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80020b6:	f000 f9eb 	bl	8002490 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200005c4 	.word	0x200005c4
 80020c4:	40004800 	.word	0x40004800

080020c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <MX_GPIO_Init+0xe4>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <MX_GPIO_Init+0xe4>)
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <MX_GPIO_Init+0xe4>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <MX_GPIO_Init+0xe4>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <MX_GPIO_Init+0xe4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <MX_GPIO_Init+0xe4>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <MX_GPIO_Init+0xe4>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <MX_GPIO_Init+0xe4>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <MX_GPIO_Init+0xe4>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RELAY1_Pin | RELAY2_Pin | NSS_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2113      	movs	r1, #19
 8002128:	4821      	ldr	r0, [pc, #132]	; (80021b0 <MX_GPIO_Init+0xe8>)
 800212a:	f001 fc06 	bl	800393a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | DHT22_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f241 0101 	movw	r1, #4097	; 0x1001
 8002134:	481f      	ldr	r0, [pc, #124]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002136:	f001 fc00 	bl	800393a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RELAY1_Pin RELAY2_Pin NSS_Pin */
	GPIO_InitStruct.Pin = RELAY1_Pin | RELAY2_Pin | NSS_Pin;
 800213a:	2313      	movs	r3, #19
 800213c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	4817      	ldr	r0, [pc, #92]	; (80021b0 <MX_GPIO_Init+0xe8>)
 8002152:	f001 fa57 	bl	8003604 <HAL_GPIO_Init>

	/*Configure GPIO pin : RAIN_Pin */
	GPIO_InitStruct.Pin = RAIN_Pin;
 8002156:	2304      	movs	r3, #4
 8002158:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4619      	mov	r1, r3
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <MX_GPIO_Init+0xe8>)
 800216a:	f001 fa4b 	bl	8003604 <HAL_GPIO_Init>

	/*Configure GPIO pins : RST_Pin DHT22_Pin */
	GPIO_InitStruct.Pin = RST_Pin | DHT22_Pin;
 800216e:	f241 0301 	movw	r3, #4097	; 0x1001
 8002172:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2302      	movs	r3, #2
 800217e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4619      	mov	r1, r3
 8002186:	480b      	ldr	r0, [pc, #44]	; (80021b4 <MX_GPIO_Init+0xec>)
 8002188:	f001 fa3c 	bl	8003604 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO0_Pin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 800218c:	2302      	movs	r3, #2
 800218e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_GPIO_Init+0xec>)
 80021a0:	f001 fa30 	bl	8003604 <HAL_GPIO_Init>

}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010800 	.word	0x40010800
 80021b4:	40010c00 	.word	0x40010c00

080021b8 <LoRa_Config>:

/* USER CODE BEGIN 4 */
void LoRa_Config(void) {
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	myLoRa.CS_port = NSS_GPIO_Port;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <LoRa_Config+0x74>)
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <LoRa_Config+0x78>)
 80021c0:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <LoRa_Config+0x74>)
 80021c4:	2210      	movs	r2, #16
 80021c6:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <LoRa_Config+0x74>)
 80021ca:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <LoRa_Config+0x7c>)
 80021cc:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <LoRa_Config+0x74>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <LoRa_Config+0x74>)
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <LoRa_Config+0x7c>)
 80021d8:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <LoRa_Config+0x74>)
 80021dc:	2202      	movs	r2, #2
 80021de:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <LoRa_Config+0x74>)
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <LoRa_Config+0x80>)
 80021e4:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <LoRa_Config+0x74>)
 80021e8:	f240 12b1 	movw	r2, #433	; 0x1b1
 80021ec:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <LoRa_Config+0x74>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <LoRa_Config+0x74>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <LoRa_Config+0x74>)
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_17db;
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <LoRa_Config+0x74>)
 8002208:	22fc      	movs	r2, #252	; 0xfc
 800220a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 100;
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <LoRa_Config+0x74>)
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 10;
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <LoRa_Config+0x74>)
 8002218:	220a      	movs	r2, #10
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
	myLoRa.synwords = 0xF3;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <LoRa_Config+0x74>)
 800221e:	22f3      	movs	r2, #243	; 0xf3
 8002220:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000460 	.word	0x20000460
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	2000056c 	.word	0x2000056c
 800223c:	00000000 	.word	0x00000000

08002240 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8002248:	484b      	ldr	r0, [pc, #300]	; (8002378 <StartDefaultTask+0x138>)
 800224a:	f000 fcf7 	bl	8002c3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800224e:	2164      	movs	r1, #100	; 0x64
 8002250:	4849      	ldr	r0, [pc, #292]	; (8002378 <StartDefaultTask+0x138>)
 8002252:	f000 fda1 	bl	8002d98 <HAL_ADC_PollForConversion>
		giatri = HAL_ADC_GetValue(&hadc1);
 8002256:	4848      	ldr	r0, [pc, #288]	; (8002378 <StartDefaultTask+0x138>)
 8002258:	f000 fea4 	bl	8002fa4 <HAL_ADC_GetValue>
 800225c:	4603      	mov	r3, r0
 800225e:	4a47      	ldr	r2, [pc, #284]	; (800237c <StartDefaultTask+0x13c>)
 8002260:	6013      	str	r3, [r2, #0]
		printf("Gia tri:------------ %d\n", giatri);
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <StartDefaultTask+0x13c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	4845      	ldr	r0, [pc, #276]	; (8002380 <StartDefaultTask+0x140>)
 800226a:	f007 fb3d 	bl	80098e8 <iprintf>
		soil = (4096 - giatri) / 20.96;
 800226e:	4b43      	ldr	r3, [pc, #268]	; (800237c <StartDefaultTask+0x13c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f8b4 	bl	80003e4 <__aeabi_ui2d>
 800227c:	a33c      	add	r3, pc, #240	; (adr r3, 8002370 <StartDefaultTask+0x130>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fa53 	bl	800072c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fbfb 	bl	8000a88 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <StartDefaultTask+0x144>)
 8002296:	6013      	str	r3, [r2, #0]
		vRain = HAL_GPIO_ReadPin(RAIN_GPIO_Port, RAIN_Pin);
 8002298:	2104      	movs	r1, #4
 800229a:	483b      	ldr	r0, [pc, #236]	; (8002388 <StartDefaultTask+0x148>)
 800229c:	f001 fb36 	bl	800390c <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <StartDefaultTask+0x14c>)
 80022a6:	701a      	strb	r2, [r3, #0]
		DHT_GetData(&DHT22_Data);
 80022a8:	4839      	ldr	r0, [pc, #228]	; (8002390 <StartDefaultTask+0x150>)
 80022aa:	f7fe fff3 	bl	8001294 <DHT_GetData>
		HAL_Delay(1000);
 80022ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b2:	f000 fbbd 	bl	8002a30 <HAL_Delay>
		Temp = DHT22_Data.Temperature;
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <StartDefaultTask+0x150>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fe92 	bl	8000fe4 <__aeabi_f2uiz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <StartDefaultTask+0x154>)
 80022c6:	701a      	strb	r2, [r3, #0]
		Humi = DHT22_Data.Humidity;
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <StartDefaultTask+0x150>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fe89 	bl	8000fe4 <__aeabi_f2uiz>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <StartDefaultTask+0x158>)
 80022d8:	701a      	strb	r2, [r3, #0]
		BH1750_ReadLight(&BH1750_lux);
 80022da:	4830      	ldr	r0, [pc, #192]	; (800239c <StartDefaultTask+0x15c>)
 80022dc:	f7ff fcce 	bl	8001c7c <BH1750_ReadLight>
		TxBuffer[10] = Temp;
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <StartDefaultTask+0x154>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <StartDefaultTask+0x160>)
 80022e6:	729a      	strb	r2, [r3, #10]
		TxBuffer[11] = Humi;
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <StartDefaultTask+0x158>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <StartDefaultTask+0x160>)
 80022ee:	72da      	strb	r2, [r3, #11]
		TxBuffer[12] = BH1750_lux;
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <StartDefaultTask+0x15c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fe75 	bl	8000fe4 <__aeabi_f2uiz>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <StartDefaultTask+0x160>)
 8002300:	731a      	strb	r2, [r3, #12]
		TxBuffer[13] = vRain;
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <StartDefaultTask+0x14c>)
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <StartDefaultTask+0x160>)
 8002308:	735a      	strb	r2, [r3, #13]
		TxBuffer[14] = soil;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <StartDefaultTask+0x144>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe68 	bl	8000fe4 <__aeabi_f2uiz>
 8002314:	4603      	mov	r3, r0
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <StartDefaultTask+0x160>)
 800231a:	739a      	strb	r2, [r3, #14]
		printf("Nhiet do: %d\n", TxBuffer[10]);
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <StartDefaultTask+0x160>)
 800231e:	7a9b      	ldrb	r3, [r3, #10]
 8002320:	4619      	mov	r1, r3
 8002322:	4820      	ldr	r0, [pc, #128]	; (80023a4 <StartDefaultTask+0x164>)
 8002324:	f007 fae0 	bl	80098e8 <iprintf>
		printf("Do am: %d\n", TxBuffer[11]);
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <StartDefaultTask+0x160>)
 800232a:	7adb      	ldrb	r3, [r3, #11]
 800232c:	4619      	mov	r1, r3
 800232e:	481e      	ldr	r0, [pc, #120]	; (80023a8 <StartDefaultTask+0x168>)
 8002330:	f007 fada 	bl	80098e8 <iprintf>
		printf("Cuong do anh sang: %d\n", TxBuffer[12]);
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <StartDefaultTask+0x160>)
 8002336:	7b1b      	ldrb	r3, [r3, #12]
 8002338:	4619      	mov	r1, r3
 800233a:	481c      	ldr	r0, [pc, #112]	; (80023ac <StartDefaultTask+0x16c>)
 800233c:	f007 fad4 	bl	80098e8 <iprintf>
		printf("Troi cos mua hay khong: %d\n", TxBuffer[13]);
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <StartDefaultTask+0x160>)
 8002342:	7b5b      	ldrb	r3, [r3, #13]
 8002344:	4619      	mov	r1, r3
 8002346:	481a      	ldr	r0, [pc, #104]	; (80023b0 <StartDefaultTask+0x170>)
 8002348:	f007 face 	bl	80098e8 <iprintf>
		printf("Do am dat: %d\n", TxBuffer[14]);
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <StartDefaultTask+0x160>)
 800234e:	7b9b      	ldrb	r3, [r3, #14]
 8002350:	4619      	mov	r1, r3
 8002352:	4818      	ldr	r0, [pc, #96]	; (80023b4 <StartDefaultTask+0x174>)
 8002354:	f007 fac8 	bl	80098e8 <iprintf>
//		memset(data.dest_addr, 0, sizeof(data.dest_addr));
//		data.buf_size = 3;
//		data.buf = TxBuffer;

//		lora_addr_send(&myLoRa, data);
		LoRa_transmit(&myLoRa, (uint8_t*) TxBuffer, 20, 500);
 8002358:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800235c:	2214      	movs	r2, #20
 800235e:	4910      	ldr	r1, [pc, #64]	; (80023a0 <StartDefaultTask+0x160>)
 8002360:	4815      	ldr	r0, [pc, #84]	; (80023b8 <StartDefaultTask+0x178>)
 8002362:	f7ff fa58 	bl	8001816 <LoRa_transmit>
		osDelay(2000);
 8002366:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800236a:	f005 fbad 	bl	8007ac8 <osDelay>
		HAL_ADC_Start(&hadc1);
 800236e:	e76b      	b.n	8002248 <StartDefaultTask+0x8>
 8002370:	8f5c28f6 	.word	0x8f5c28f6
 8002374:	4034f5c2 	.word	0x4034f5c2
 8002378:	200004e8 	.word	0x200004e8
 800237c:	200004b0 	.word	0x200004b0
 8002380:	0800ba1c 	.word	0x0800ba1c
 8002384:	200004b4 	.word	0x200004b4
 8002388:	40010800 	.word	0x40010800
 800238c:	200004ac 	.word	0x200004ac
 8002390:	200004e0 	.word	0x200004e0
 8002394:	200004a4 	.word	0x200004a4
 8002398:	200004a5 	.word	0x200004a5
 800239c:	200004a8 	.word	0x200004a8
 80023a0:	200004b8 	.word	0x200004b8
 80023a4:	0800ba38 	.word	0x0800ba38
 80023a8:	0800ba48 	.word	0x0800ba48
 80023ac:	0800ba54 	.word	0x0800ba54
 80023b0:	0800ba6c 	.word	0x0800ba6c
 80023b4:	0800ba88 	.word	0x0800ba88
 80023b8:	20000460 	.word	0x20000460

080023bc <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		LoRa_startReceiving(&myLoRa);
 80023c4:	4828      	ldr	r0, [pc, #160]	; (8002468 <StartTask02+0xac>)
 80023c6:	f7ff fa7e 	bl	80018c6 <LoRa_startReceiving>
		printf("Xin chao TMT\n");
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <StartTask02+0xb0>)
 80023cc:	f007 fb12 	bl	80099f4 <puts>
		while (received(&myLoRa) == 1) {
 80023d0:	e03e      	b.n	8002450 <StartTask02+0x94>
			LoRa_receive(&myLoRa, received_data, 20);
 80023d2:	2214      	movs	r2, #20
 80023d4:	4926      	ldr	r1, [pc, #152]	; (8002470 <StartTask02+0xb4>)
 80023d6:	4824      	ldr	r0, [pc, #144]	; (8002468 <StartTask02+0xac>)
 80023d8:	f7ff fa96 	bl	8001908 <LoRa_receive>
			RxBuffer[0] = received_data[0];
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <StartTask02+0xb4>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <StartTask02+0xb8>)
 80023e2:	701a      	strb	r2, [r3, #0]
			RxBuffer[1] = received_data[1];
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <StartTask02+0xb4>)
 80023e6:	785a      	ldrb	r2, [r3, #1]
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <StartTask02+0xb8>)
 80023ea:	705a      	strb	r2, [r3, #1]
			if (RxBuffer[0] == 1) {
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <StartTask02+0xb8>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <StartTask02+0x44>

				HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 80023f4:	2201      	movs	r2, #1
 80023f6:	2101      	movs	r1, #1
 80023f8:	481f      	ldr	r0, [pc, #124]	; (8002478 <StartTask02+0xbc>)
 80023fa:	f001 fa9e 	bl	800393a <HAL_GPIO_WritePin>
 80023fe:	e008      	b.n	8002412 <StartTask02+0x56>
			} else if (RxBuffer[0] == 2) {
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <StartTask02+0xb8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d104      	bne.n	8002412 <StartTask02+0x56>

				HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2101      	movs	r1, #1
 800240c:	481a      	ldr	r0, [pc, #104]	; (8002478 <StartTask02+0xbc>)
 800240e:	f001 fa94 	bl	800393a <HAL_GPIO_WritePin>
			}
			if (RxBuffer[1] == 1) {
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <StartTask02+0xb8>)
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <StartTask02+0x6a>

				HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	2102      	movs	r1, #2
 800241e:	4816      	ldr	r0, [pc, #88]	; (8002478 <StartTask02+0xbc>)
 8002420:	f001 fa8b 	bl	800393a <HAL_GPIO_WritePin>
 8002424:	e008      	b.n	8002438 <StartTask02+0x7c>
			} else if (RxBuffer[1] == 2) {
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <StartTask02+0xb8>)
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d104      	bne.n	8002438 <StartTask02+0x7c>

				HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	2102      	movs	r1, #2
 8002432:	4811      	ldr	r0, [pc, #68]	; (8002478 <StartTask02+0xbc>)
 8002434:	f001 fa81 	bl	800393a <HAL_GPIO_WritePin>
			}

			printf("Gia tri hien tai cua R0: %d - R1: %d\n", RxBuffer[0],
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <StartTask02+0xb8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
					RxBuffer[1]);
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <StartTask02+0xb8>)
 8002440:	785b      	ldrb	r3, [r3, #1]
			printf("Gia tri hien tai cua R0: %d - R1: %d\n", RxBuffer[0],
 8002442:	461a      	mov	r2, r3
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <StartTask02+0xc0>)
 8002446:	f007 fa4f 	bl	80098e8 <iprintf>
			LoRa_startReceiving(&myLoRa);
 800244a:	4807      	ldr	r0, [pc, #28]	; (8002468 <StartTask02+0xac>)
 800244c:	f7ff fa3b 	bl	80018c6 <LoRa_startReceiving>
		while (received(&myLoRa) == 1) {
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <StartTask02+0xac>)
 8002452:	f7ff fa45 	bl	80018e0 <received>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d0ba      	beq.n	80023d2 <StartTask02+0x16>
		}

		osDelay(500);
 800245c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002460:	f005 fb32 	bl	8007ac8 <osDelay>
		LoRa_startReceiving(&myLoRa);
 8002464:	e7ae      	b.n	80023c4 <StartTask02+0x8>
 8002466:	bf00      	nop
 8002468:	20000460 	.word	0x20000460
 800246c:	0800ba98 	.word	0x0800ba98
 8002470:	20000490 	.word	0x20000490
 8002474:	200004cc 	.word	0x200004cc
 8002478:	40010800 	.word	0x40010800
 800247c:	0800baa8 	.word	0x0800baa8

08002480 <StartTask03>:
 * @brief Function implementing the myReceived thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f005 fb1d 	bl	8007ac8 <osDelay>
 800248e:	e7fb      	b.n	8002488 <StartTask03+0x8>

08002490 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state
	 */
	__disable_irq();
	while (1) {
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_MspInit+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <HAL_MspInit+0x68>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6193      	str	r3, [r2, #24]
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_MspInit+0x68>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_MspInit+0x68>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_MspInit+0x68>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_MspInit+0x68>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	210f      	movs	r1, #15
 80024d6:	f06f 0001 	mvn.w	r0, #1
 80024da:	f000 ffda 	bl	8003492 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_MspInit+0x6c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_MspInit+0x6c>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000

0800250c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a14      	ldr	r2, [pc, #80]	; (8002578 <HAL_ADC_MspInit+0x6c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d121      	bne.n	8002570 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_ADC_MspInit+0x70>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_ADC_MspInit+0x70>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_ADC_MspInit+0x70>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_ADC_MspInit+0x70>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_ADC_MspInit+0x70>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_ADC_MspInit+0x70>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = soil_adc_Pin;
 800255c:	2308      	movs	r3, #8
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002560:	2303      	movs	r3, #3
 8002562:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(soil_adc_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	4619      	mov	r1, r3
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_ADC_MspInit+0x74>)
 800256c:	f001 f84a 	bl	8003604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40012400 	.word	0x40012400
 800257c:	40021000 	.word	0x40021000
 8002580:	40010800 	.word	0x40010800

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_I2C_MspInit+0x80>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d12b      	bne.n	80025fc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	4619      	mov	r1, r3
 80025ce:	480f      	ldr	r0, [pc, #60]	; (800260c <HAL_I2C_MspInit+0x88>)
 80025d0:	f001 f818 	bl	8003604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025de:	61d3      	str	r3, [r2, #28]
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_I2C_MspInit+0x84>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2105      	movs	r1, #5
 80025f0:	201f      	movs	r0, #31
 80025f2:	f000 ff4e 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025f6:	201f      	movs	r0, #31
 80025f8:	f000 ff67 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40005400 	.word	0x40005400
 8002608:	40021000 	.word	0x40021000
 800260c:	40010c00 	.word	0x40010c00

08002610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <HAL_SPI_MspInit+0x88>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d12f      	bne.n	8002690 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002660:	23a0      	movs	r3, #160	; 0xa0
 8002662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_SPI_MspInit+0x90>)
 8002674:	f000 ffc6 	bl	8003604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_SPI_MspInit+0x90>)
 800268c:	f000 ffba 	bl	8003604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013000 	.word	0x40013000
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_UART_MspInit+0x8c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d131      	bne.n	8002728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ce:	61d3      	str	r3, [r2, #28]
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <HAL_UART_MspInit+0x94>)
 800270a:	f000 ff7b 	bl	8003604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800270e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_UART_MspInit+0x94>)
 8002724:	f000 ff6e 	bl	8003604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40004800 	.word	0x40004800
 8002734:	40021000 	.word	0x40021000
 8002738:	40010c00 	.word	0x40010c00

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276a:	f000 f945 	bl	80029f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800276e:	f005 ff29 	bl	80085c4 <xTaskGetSchedulerState>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002778:	f006 f916 	bl	80089a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <I2C1_EV_IRQHandler+0x10>)
 8002786:	f001 fd93 	bl	80042b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000518 	.word	0x20000518

08002794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
	return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <_kill>:

int _kill(int pid, int sig)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ac:	f006 fb18 	bl	8008de0 <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2216      	movs	r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
	return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_exit>:

void _exit (int status)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027ca:	f04f 31ff 	mov.w	r1, #4294967295
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffe7 	bl	80027a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027d4:	e7fe      	b.n	80027d4 <_exit+0x12>

080027d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00a      	b.n	80027fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e8:	f3af 8000 	nop.w
 80027ec:	4601      	mov	r1, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	dbf0      	blt.n	80027e8 <_read+0x12>
	}

return len;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e009      	b.n	8002836 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fa96 	bl	8001d5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf1      	blt.n	8002822 <_write+0x12>
	}
	return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_close>:

int _close(int file)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286e:	605a      	str	r2, [r3, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_isatty>:

int _isatty(int file)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f006 fa82 	bl	8008de0 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20005000 	.word	0x20005000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000614 	.word	0x20000614
 8002910:	20001378 	.word	0x20001378

08002914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	; (8002964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002946:	f7ff ffe5 	bl	8002914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f006 fa4f 	bl	8008dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294e:	f7ff fa17 	bl	8001d80 <main>
  bx lr
 8002952:	4770      	bx	lr
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800295c:	0800bef4 	.word	0x0800bef4
  ldr r2, =_sbss
 8002960:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002964:	20001378 	.word	0x20001378

08002968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC1_2_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x28>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fd7d 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fd88 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd95 	bl	80034e6 <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 fd5d 	bl	8003492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000004 	.word	0x20000004

080029f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x1c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x20>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000008 	.word	0x20000008
 8002a18:	20000618 	.word	0x20000618

08002a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_GetTick+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000618 	.word	0x20000618

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffe0 	bl	8002a1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000008 	.word	0x20000008

08002a78 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <HAL_GetUIDw0+0x10>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	1ffff7e8 	.word	0x1ffff7e8

08002a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0be      	b.n	8002c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fd1e 	bl	800250c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fbc5 	bl	8003260 <ADC_ConversionStop_Disable>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8099 	bne.w	8002c1a <HAL_ADC_Init+0x18e>
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8095 	bne.w	8002c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af8:	f023 0302 	bic.w	r3, r3, #2
 8002afc:	f043 0202 	orr.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7b1b      	ldrb	r3, [r3, #12]
 8002b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b24:	d003      	beq.n	8002b2e <HAL_ADC_Init+0xa2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_ADC_Init+0xa8>
 8002b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_Init+0xaa>
 8002b34:	2300      	movs	r3, #0
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7d1b      	ldrb	r3, [r3, #20]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d119      	bne.n	8002b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7b1b      	ldrb	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	035a      	lsls	r2, r3, #13
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e00b      	b.n	8002b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_ADC_Init+0x1a8>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d003      	beq.n	8002bb2 <HAL_ADC_Init+0x126>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d104      	bne.n	8002bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	051b      	lsls	r3, r3, #20
 8002bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_ADC_Init+0x1ac>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bf6:	e018      	b.n	8002c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f023 0312 	bic.w	r3, r3, #18
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	ffe1f7fd 	.word	0xffe1f7fd
 8002c38:	ff1f0efe 	.word	0xff1f0efe

08002c3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Start+0x1a>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e098      	b.n	8002d88 <HAL_ADC_Start+0x14c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 faa4 	bl	80031ac <ADC_Enable>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8087 	bne.w	8002d7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a41      	ldr	r2, [pc, #260]	; (8002d90 <HAL_ADC_Start+0x154>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_Start+0x5e>
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_ADC_Start+0x158>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d026      	beq.n	8002d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cc4:	e01d      	b.n	8002d02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_ADC_Start+0x158>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_Start+0xaa>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_ADC_Start+0x154>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10d      	bne.n	8002d02 <HAL_ADC_Start+0xc6>
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_ADC_Start+0x158>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f023 0206 	bic.w	r2, r3, #6
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0202 	mvn.w	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d42:	d113      	bne.n	8002d6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_ADC_Start+0x154>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_ADC_Start+0x158>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	e00c      	b.n	8002d86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40012800 	.word	0x40012800
 8002d94:	40012400 	.word	0x40012400

08002d98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dae:	f7ff fe35 	bl	8002a1c <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0d3      	b.n	8002f82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d131      	bne.n	8002e4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12a      	bne.n	8002e4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002df6:	e021      	b.n	8002e3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d01d      	beq.n	8002e3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_ADC_PollForConversion+0x7e>
 8002e06:	f7ff fe09 	bl	8002a1c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d212      	bcs.n	8002e3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0a2      	b.n	8002f82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0d6      	beq.n	8002df8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e4a:	e070      	b.n	8002f2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <HAL_ADC_PollForConversion+0x1f4>)
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	2002      	movs	r0, #2
 8002e52:	f003 fddf 	bl	8006a14 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e56:	4603      	mov	r3, r0
 8002e58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <HAL_ADC_PollForConversion+0x1f8>)
 8002e64:	400b      	ands	r3, r1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x104>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68d9      	ldr	r1, [r3, #12]
 8002e70:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <HAL_ADC_PollForConversion+0x1fc>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x104>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_ADC_PollForConversion+0x200>)
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_ADC_PollForConversion+0x100>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_ADC_PollForConversion+0x204>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_PollForConversion+0x100>
 8002e94:	2314      	movs	r3, #20
 8002e96:	e020      	b.n	8002eda <HAL_ADC_PollForConversion+0x142>
 8002e98:	2329      	movs	r3, #41	; 0x29
 8002e9a:	e01e      	b.n	8002eda <HAL_ADC_PollForConversion+0x142>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6919      	ldr	r1, [r3, #16]
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_ADC_PollForConversion+0x200>)
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x120>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68d9      	ldr	r1, [r3, #12]
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_ADC_PollForConversion+0x204>)
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_ADC_PollForConversion+0x13c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6919      	ldr	r1, [r3, #16]
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_ADC_PollForConversion+0x208>)
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_ADC_PollForConversion+0x140>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_ADC_PollForConversion+0x208>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_PollForConversion+0x140>
 8002ed4:	2354      	movs	r3, #84	; 0x54
 8002ed6:	e000      	b.n	8002eda <HAL_ADC_PollForConversion+0x142>
 8002ed8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ee0:	e021      	b.n	8002f26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d01a      	beq.n	8002f20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_ADC_PollForConversion+0x168>
 8002ef0:	f7ff fd94 	bl	8002a1c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d20f      	bcs.n	8002f20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d90b      	bls.n	8002f20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e030      	b.n	8002f82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3301      	adds	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d8d9      	bhi.n	8002ee2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f06f 0212 	mvn.w	r2, #18
 8002f36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f52:	d115      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	24924924 	.word	0x24924924
 8002f94:	00924924 	.word	0x00924924
 8002f98:	12492492 	.word	0x12492492
 8002f9c:	00492492 	.word	0x00492492
 8002fa0:	00249249 	.word	0x00249249

08002fa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0dc      	b.n	8003196 <HAL_ADC_ConfigChannel+0x1da>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d81c      	bhi.n	8003026 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b05      	subs	r3, #5
 8002ffe:	221f      	movs	r2, #31
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	4019      	ands	r1, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	fa00 f203 	lsl.w	r2, r0, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	; 0x34
 8003024:	e03c      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d81c      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b23      	subs	r3, #35	; 0x23
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	4019      	ands	r1, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b23      	subs	r3, #35	; 0x23
 800305a:	fa00 f203 	lsl.w	r2, r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	e01b      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	; 0x41
 800307a:	221f      	movs	r2, #31
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	4019      	ands	r1, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	; 0x41
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d91c      	bls.n	80030e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68d9      	ldr	r1, [r3, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	3b1e      	subs	r3, #30
 80030ba:	2207      	movs	r2, #7
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4019      	ands	r1, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6898      	ldr	r0, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	fa00 f203 	lsl.w	r2, r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e019      	b.n	8003116 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6919      	ldr	r1, [r3, #16]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4019      	ands	r1, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6898      	ldr	r0, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003122:	2b11      	cmp	r3, #17
 8003124:	d132      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d125      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d126      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800314c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d11a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	0c9a      	lsrs	r2, r3, #18
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800316c:	e002      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3b01      	subs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <HAL_ADC_ConfigChannel+0x1b2>
 800317a:	e007      	b.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012400 	.word	0x40012400
 80031a4:	20000000 	.word	0x20000000
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d040      	beq.n	800324c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <ADC_Enable+0xac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <ADC_Enable+0xb0>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031e8:	e002      	b.n	80031f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031f6:	f7ff fc11 	bl	8002a1c <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031fc:	e01f      	b.n	800323e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031fe:	f7ff fc0d 	bl	8002a1c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d918      	bls.n	800323e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d011      	beq.n	800323e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d1d8      	bne.n	80031fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000
 800325c:	431bde83 	.word	0x431bde83

08003260 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12e      	bne.n	80032d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328a:	f7ff fbc7 	bl	8002a1c <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003290:	e01b      	b.n	80032ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003292:	f7ff fbc3 	bl	8002a1c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d914      	bls.n	80032ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10d      	bne.n	80032ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e007      	b.n	80032da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d0dc      	beq.n	8003292 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	db0b      	blt.n	8003372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4906      	ldr	r1, [pc, #24]	; (800337c <__NVIC_EnableIRQ+0x34>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100

08003380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0a      	blt.n	80033aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	490c      	ldr	r1, [pc, #48]	; (80033cc <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a8:	e00a      	b.n	80033c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	440b      	add	r3, r1
 80033be:	761a      	strb	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f1c3 0307 	rsb	r3, r3, #7
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf28      	it	cs
 80033f2:	2304      	movcs	r3, #4
 80033f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d902      	bls.n	8003404 <NVIC_EncodePriority+0x30>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b03      	subs	r3, #3
 8003402:	e000      	b.n	8003406 <NVIC_EncodePriority+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	f04f 32ff 	mov.w	r2, #4294967295
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341c:	f04f 31ff 	mov.w	r1, #4294967295
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43d9      	mvns	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	4313      	orrs	r3, r2
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f7ff ff90 	bl	8003380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff2d 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff ff42 	bl	800332c <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff90 	bl	80033d4 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5f 	bl	8003380 <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff35 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ffa2 	bl	8003438 <SysTick_Config>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003512:	2b02      	cmp	r3, #2
 8003514:	d005      	beq.n	8003522 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e051      	b.n	80035c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 020e 	bic.w	r2, r2, #14
 8003530:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_DMA_Abort_IT+0xd0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d029      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xa0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_DMA_Abort_IT+0xd4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_DMA_Abort_IT+0x9c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_DMA_Abort_IT+0xd8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01a      	beq.n	8003596 <HAL_DMA_Abort_IT+0x96>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_DMA_Abort_IT+0xdc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d012      	beq.n	8003590 <HAL_DMA_Abort_IT+0x90>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_DMA_Abort_IT+0xe0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00a      	beq.n	800358a <HAL_DMA_Abort_IT+0x8a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_DMA_Abort_IT+0xe4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d102      	bne.n	8003584 <HAL_DMA_Abort_IT+0x84>
 800357e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003582:	e00e      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	e00b      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 800358a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358e:	e008      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 8003590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003594:	e005      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 8003596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359a:	e002      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 800359c:	2310      	movs	r3, #16
 800359e:	e000      	b.n	80035a2 <HAL_DMA_Abort_IT+0xa2>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_DMA_Abort_IT+0xe8>)
 80035a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
    } 
  }
  return status;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40020008 	.word	0x40020008
 80035d4:	4002001c 	.word	0x4002001c
 80035d8:	40020030 	.word	0x40020030
 80035dc:	40020044 	.word	0x40020044
 80035e0:	40020058 	.word	0x40020058
 80035e4:	4002006c 	.word	0x4002006c
 80035e8:	40020000 	.word	0x40020000

080035ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003604:	b480      	push	{r7}
 8003606:	b08b      	sub	sp, #44	; 0x2c
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003616:	e169      	b.n	80038ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003618:	2201      	movs	r2, #1
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 8158 	bne.w	80038e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a9a      	ldr	r2, [pc, #616]	; (80038a4 <HAL_GPIO_Init+0x2a0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d05e      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
 8003640:	4a98      	ldr	r2, [pc, #608]	; (80038a4 <HAL_GPIO_Init+0x2a0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d875      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 8003646:	4a98      	ldr	r2, [pc, #608]	; (80038a8 <HAL_GPIO_Init+0x2a4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d058      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
 800364c:	4a96      	ldr	r2, [pc, #600]	; (80038a8 <HAL_GPIO_Init+0x2a4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d86f      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 8003652:	4a96      	ldr	r2, [pc, #600]	; (80038ac <HAL_GPIO_Init+0x2a8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d052      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
 8003658:	4a94      	ldr	r2, [pc, #592]	; (80038ac <HAL_GPIO_Init+0x2a8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d869      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 800365e:	4a94      	ldr	r2, [pc, #592]	; (80038b0 <HAL_GPIO_Init+0x2ac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04c      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
 8003664:	4a92      	ldr	r2, [pc, #584]	; (80038b0 <HAL_GPIO_Init+0x2ac>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d863      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 800366a:	4a92      	ldr	r2, [pc, #584]	; (80038b4 <HAL_GPIO_Init+0x2b0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d046      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
 8003670:	4a90      	ldr	r2, [pc, #576]	; (80038b4 <HAL_GPIO_Init+0x2b0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d85d      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 8003676:	2b12      	cmp	r3, #18
 8003678:	d82a      	bhi.n	80036d0 <HAL_GPIO_Init+0xcc>
 800367a:	2b12      	cmp	r3, #18
 800367c:	d859      	bhi.n	8003732 <HAL_GPIO_Init+0x12e>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_GPIO_Init+0x80>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036ff 	.word	0x080036ff
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036eb 	.word	0x080036eb
 8003690:	0800372d 	.word	0x0800372d
 8003694:	08003733 	.word	0x08003733
 8003698:	08003733 	.word	0x08003733
 800369c:	08003733 	.word	0x08003733
 80036a0:	08003733 	.word	0x08003733
 80036a4:	08003733 	.word	0x08003733
 80036a8:	08003733 	.word	0x08003733
 80036ac:	08003733 	.word	0x08003733
 80036b0:	08003733 	.word	0x08003733
 80036b4:	08003733 	.word	0x08003733
 80036b8:	08003733 	.word	0x08003733
 80036bc:	08003733 	.word	0x08003733
 80036c0:	08003733 	.word	0x08003733
 80036c4:	08003733 	.word	0x08003733
 80036c8:	080036e1 	.word	0x080036e1
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	4a79      	ldr	r2, [pc, #484]	; (80038b8 <HAL_GPIO_Init+0x2b4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036d6:	e02c      	b.n	8003732 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	623b      	str	r3, [r7, #32]
          break;
 80036de:	e029      	b.n	8003734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	3304      	adds	r3, #4
 80036e6:	623b      	str	r3, [r7, #32]
          break;
 80036e8:	e024      	b.n	8003734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	3308      	adds	r3, #8
 80036f0:	623b      	str	r3, [r7, #32]
          break;
 80036f2:	e01f      	b.n	8003734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	330c      	adds	r3, #12
 80036fa:	623b      	str	r3, [r7, #32]
          break;
 80036fc:	e01a      	b.n	8003734 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003706:	2304      	movs	r3, #4
 8003708:	623b      	str	r3, [r7, #32]
          break;
 800370a:	e013      	b.n	8003734 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003714:	2308      	movs	r3, #8
 8003716:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	611a      	str	r2, [r3, #16]
          break;
 800371e:	e009      	b.n	8003734 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003720:	2308      	movs	r3, #8
 8003722:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	615a      	str	r2, [r3, #20]
          break;
 800372a:	e003      	b.n	8003734 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]
          break;
 8003730:	e000      	b.n	8003734 <HAL_GPIO_Init+0x130>
          break;
 8003732:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2bff      	cmp	r3, #255	; 0xff
 8003738:	d801      	bhi.n	800373e <HAL_GPIO_Init+0x13a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	e001      	b.n	8003742 <HAL_GPIO_Init+0x13e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2bff      	cmp	r3, #255	; 0xff
 8003748:	d802      	bhi.n	8003750 <HAL_GPIO_Init+0x14c>
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x152>
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	3b08      	subs	r3, #8
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	210f      	movs	r1, #15
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	6a39      	ldr	r1, [r7, #32]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	431a      	orrs	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80b1 	beq.w	80038e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_GPIO_Init+0x2b8>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_GPIO_Init+0x2b8>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_GPIO_Init+0x2b8>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800379c:	4a48      	ldr	r2, [pc, #288]	; (80038c0 <HAL_GPIO_Init+0x2bc>)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <HAL_GPIO_Init+0x2c0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d013      	beq.n	80037f0 <HAL_GPIO_Init+0x1ec>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <HAL_GPIO_Init+0x2c4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00d      	beq.n	80037ec <HAL_GPIO_Init+0x1e8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3e      	ldr	r2, [pc, #248]	; (80038cc <HAL_GPIO_Init+0x2c8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <HAL_GPIO_Init+0x1e4>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3d      	ldr	r2, [pc, #244]	; (80038d0 <HAL_GPIO_Init+0x2cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_GPIO_Init+0x1e0>
 80037e0:	2303      	movs	r3, #3
 80037e2:	e006      	b.n	80037f2 <HAL_GPIO_Init+0x1ee>
 80037e4:	2304      	movs	r3, #4
 80037e6:	e004      	b.n	80037f2 <HAL_GPIO_Init+0x1ee>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e002      	b.n	80037f2 <HAL_GPIO_Init+0x1ee>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_GPIO_Init+0x1ee>
 80037f0:	2300      	movs	r3, #0
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	f002 0203 	and.w	r2, r2, #3
 80037f8:	0092      	lsls	r2, r2, #2
 80037fa:	4093      	lsls	r3, r2
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003802:	492f      	ldr	r1, [pc, #188]	; (80038c0 <HAL_GPIO_Init+0x2bc>)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	492c      	ldr	r1, [pc, #176]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	43db      	mvns	r3, r3
 8003832:	4928      	ldr	r1, [pc, #160]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003834:	4013      	ands	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	43db      	mvns	r3, r3
 800385a:	491e      	ldr	r1, [pc, #120]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800385c:	4013      	ands	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4918      	ldr	r1, [pc, #96]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	43db      	mvns	r3, r3
 8003882:	4914      	ldr	r1, [pc, #80]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003884:	4013      	ands	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d021      	beq.n	80038d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_GPIO_Init+0x2d0>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e021      	b.n	80038e6 <HAL_GPIO_Init+0x2e2>
 80038a2:	bf00      	nop
 80038a4:	10320000 	.word	0x10320000
 80038a8:	10310000 	.word	0x10310000
 80038ac:	10220000 	.word	0x10220000
 80038b0:	10210000 	.word	0x10210000
 80038b4:	10120000 	.word	0x10120000
 80038b8:	10110000 	.word	0x10110000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40010800 	.word	0x40010800
 80038c8:	40010c00 	.word	0x40010c00
 80038cc:	40011000 	.word	0x40011000
 80038d0:	40011400 	.word	0x40011400
 80038d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_GPIO_Init+0x304>)
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	43db      	mvns	r3, r3
 80038e0:	4909      	ldr	r1, [pc, #36]	; (8003908 <HAL_GPIO_Init+0x304>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	3301      	adds	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f47f ae8e 	bne.w	8003618 <HAL_GPIO_Init+0x14>
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	372c      	adds	r7, #44	; 0x2c
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	40010400 	.word	0x40010400

0800390c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e001      	b.n	800392e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]
 8003946:	4613      	mov	r3, r2
 8003948:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394a:	787b      	ldrb	r3, [r7, #1]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003950:	887a      	ldrh	r2, [r7, #2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003956:	e003      	b.n	8003960 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	041a      	lsls	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	611a      	str	r2, [r3, #16]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e12b      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fdf6 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d0:	f002 ff24 	bl	800681c <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a81      	ldr	r2, [pc, #516]	; (8003be0 <HAL_I2C_Init+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <HAL_I2C_Init+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_I2C_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e006      	b.n	80039fe <HAL_I2C_Init+0x92>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <HAL_I2C_Init+0x27c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0e7      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a78      	ldr	r2, [pc, #480]	; (8003bec <HAL_I2C_Init+0x280>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <HAL_I2C_Init+0x274>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <HAL_I2C_Init+0xd4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	e009      	b.n	8003a54 <HAL_I2C_Init+0xe8>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <HAL_I2C_Init+0x284>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	495c      	ldr	r1, [pc, #368]	; (8003be0 <HAL_I2C_Init+0x274>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d819      	bhi.n	8003aa8 <HAL_I2C_Init+0x13c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e59      	subs	r1, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a88:	400b      	ands	r3, r1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_I2C_Init+0x138>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e59      	subs	r1, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	e051      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e04f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_I2C_Init+0x168>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_I2C_Init+0x18e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x196>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_I2C_Init+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e58      	subs	r0, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	e00f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6809      	ldr	r1, [r1, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6911      	ldr	r1, [r2, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000186a0 	.word	0x000186a0
 8003be4:	001e847f 	.word	0x001e847f
 8003be8:	003d08ff 	.word	0x003d08ff
 8003bec:	431bde83 	.word	0x431bde83
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	460b      	mov	r3, r1
 8003c02:	817b      	strh	r3, [r7, #10]
 8003c04:	4613      	mov	r3, r2
 8003c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7fe ff08 	bl	8002a1c <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	f040 80e0 	bne.w	8003ddc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	4970      	ldr	r1, [pc, #448]	; (8003de8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f001 fffc 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0d3      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2C_Master_Transmit+0x50>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0cc      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d007      	beq.n	8003c6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2210      	movs	r2, #16
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a50      	ldr	r2, [pc, #320]	; (8003dec <HAL_I2C_Master_Transmit+0x1f8>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cac:	8979      	ldrh	r1, [r7, #10]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f001 fdbe 	bl	8005834 <I2C_MasterRequestWrite>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e08d      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cd8:	e066      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	6a39      	ldr	r1, [r7, #32]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f002 f876 	bl	8005dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d11b      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x188>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f002 f866 	bl	8005e52 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d107      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01a      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d194      	bne.n	8003cda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	; 0x30
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7fe fe08 	bl	8002a1c <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 823f 	bne.w	800429a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	497f      	ldr	r1, [pc, #508]	; (8004024 <HAL_I2C_Master_Receive+0x234>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 fefc 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e232      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_Master_Receive+0x54>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e22b      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d007      	beq.n	8003e6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	; 0x22
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_I2C_Master_Receive+0x238>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f001 fd40 	bl	8005938 <I2C_MasterRequestRead>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1ec      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d113      	bne.n	8003ef2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e1c0      	b.n	8004274 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d11e      	bne.n	8003f38 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0a:	b672      	cpsid	i
}
 8003f0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f34:	b662      	cpsie	i
}
 8003f36:	e035      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d11e      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f50:	b672      	cpsid	i
}
 8003f52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f7a:	b662      	cpsie	i
}
 8003f7c:	e012      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fa4:	e166      	b.n	8004274 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 811f 	bhi.w	80041ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d123      	bne.n	8004000 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f001 ffbb 	bl	8005f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e167      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffe:	e139      	b.n	8004274 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d152      	bne.n	80040ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <HAL_I2C_Master_Receive+0x23c>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 fe06 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e13c      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000
 800402c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004030:	b672      	cpsid	i
}
 8004032:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004076:	b662      	cpsie	i
}
 8004078:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ac:	e0e2      	b.n	8004274 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2200      	movs	r2, #0
 80040b6:	497b      	ldr	r1, [pc, #492]	; (80042a4 <HAL_I2C_Master_Receive+0x4b4>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f001 fdb3 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0e9      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040d8:	b672      	cpsid	i
}
 80040da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800410e:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_I2C_Master_Receive+0x4b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_I2C_Master_Receive+0x4bc>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	0a1a      	lsrs	r2, r3, #8
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00da      	lsls	r2, r3, #3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	3b01      	subs	r3, #1
 800412c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d118      	bne.n	8004166 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004156:	b662      	cpsie	i
}
 8004158:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e09a      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d1d9      	bne.n	8004128 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041b6:	b662      	cpsie	i
}
 80041b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ec:	e042      	b.n	8004274 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 fea0 	bl	8005f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e04c      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d118      	bne.n	8004274 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	f47f ae94 	bne.w	8003fa6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	00010004 	.word	0x00010004
 80042a8:	20000000 	.word	0x20000000
 80042ac:	14f8b589 	.word	0x14f8b589

080042b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d003      	beq.n	80042e8 <HAL_I2C_EV_IRQHandler+0x38>
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	f040 80c1 	bne.w	800446a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10d      	bne.n	800431e <HAL_I2C_EV_IRQHandler+0x6e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004308:	d003      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x62>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004310:	d101      	bne.n	8004316 <HAL_I2C_EV_IRQHandler+0x66>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x68>
 8004316:	2300      	movs	r3, #0
 8004318:	2b01      	cmp	r3, #1
 800431a:	f000 8132 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x92>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	0a5b      	lsrs	r3, r3, #9
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 fe83 	bl	8006040 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fcc8 	bl	8004cd0 <I2C_Master_SB>
 8004340:	e092      	b.n	8004468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0xb2>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fd3d 	bl	8004dda <I2C_Master_ADD10>
 8004360:	e082      	b.n	8004468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_I2C_EV_IRQHandler+0xd2>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fd56 	bl	8004e2c <I2C_Master_ADDR>
 8004380:	e072      	b.n	8004468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03b      	beq.n	8004406 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	f000 80f3 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f942 	bl	800464e <I2C_MasterTransmit_TXE>
 80043ca:	e04d      	b.n	8004468 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80d6 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80cf 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043e8:	7bbb      	ldrb	r3, [r7, #14]
 80043ea:	2b21      	cmp	r3, #33	; 0x21
 80043ec:	d103      	bne.n	80043f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9c9 	bl	8004786 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f4:	e0c7      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	f040 80c4 	bne.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa37 	bl	8004872 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004404:	e0bf      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004414:	f000 80b7 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <HAL_I2C_EV_IRQHandler+0x194>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_I2C_EV_IRQHandler+0x194>
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 faac 	bl	800499a <I2C_MasterReceive_RXNE>
 8004442:	e011      	b.n	8004468 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 809a 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	0a5b      	lsrs	r3, r3, #9
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8093 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb4b 	bl	8004afc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004466:	e08e      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004468:	e08d      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e007      	b.n	800448c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_I2C_EV_IRQHandler+0x20e>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	0a5b      	lsrs	r3, r3, #9
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044b4:	69b9      	ldr	r1, [r7, #24]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff0f 	bl	80052da <I2C_Slave_ADDR>
 80044bc:	e066      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_I2C_EV_IRQHandler+0x22e>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	0a5b      	lsrs	r3, r3, #9
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 ff4a 	bl	8005370 <I2C_Slave_STOPF>
 80044dc:	e056      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	2b21      	cmp	r3, #33	; 0x21
 80044e2:	d002      	beq.n	80044ea <HAL_I2C_EV_IRQHandler+0x23a>
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	2b29      	cmp	r3, #41	; 0x29
 80044e8:	d125      	bne.n	8004536 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	09db      	lsrs	r3, r3, #7
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00f      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0x266>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	0a9b      	lsrs	r3, r3, #10
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0x266>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fe27 	bl	8005162 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004514:	e039      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d033      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x2da>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	0a5b      	lsrs	r3, r3, #9
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02d      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fe54 	bl	80051dc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004534:	e029      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00f      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	0a9b      	lsrs	r3, r3, #10
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0x2b2>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fe5e 	bl	800521c <I2C_SlaveReceive_RXNE>
 8004560:	e014      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	0a5b      	lsrs	r3, r3, #9
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fe8c 	bl	8005298 <I2C_SlaveReceive_BTF>
 8004580:	e004      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800458a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
 80045e6:	4613      	mov	r3, r2
 80045e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004664:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d150      	bne.n	8004716 <I2C_MasterTransmit_TXE+0xc8>
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b21      	cmp	r3, #33	; 0x21
 8004678:	d14d      	bne.n	8004716 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d01d      	beq.n	80046bc <I2C_MasterTransmit_TXE+0x6e>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b20      	cmp	r3, #32
 8004684:	d01a      	beq.n	80046bc <I2C_MasterTransmit_TXE+0x6e>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800468c:	d016      	beq.n	80046bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800469c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2211      	movs	r2, #17
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff6c 	bl	8004592 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046ba:	e060      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d107      	bne.n	8004706 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff81 	bl	8004606 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004704:	e03b      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff3f 	bl	8004592 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004714:	e033      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b21      	cmp	r3, #33	; 0x21
 800471a:	d005      	beq.n	8004728 <I2C_MasterTransmit_TXE+0xda>
 800471c:	7bbb      	ldrb	r3, [r7, #14]
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d12d      	bne.n	800477e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b22      	cmp	r3, #34	; 0x22
 8004726:	d12a      	bne.n	800477e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004742:	e01c      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d103      	bne.n	8004758 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f88e 	bl	8004872 <I2C_MemoryTransmit_TXE_BTF>
}
 8004756:	e012      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800477c:	e7ff      	b.n	800477e <I2C_MasterTransmit_TXE+0x130>
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b21      	cmp	r3, #33	; 0x21
 800479e:	d164      	bne.n	800486a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d012      	beq.n	80047d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80047ce:	e04c      	b.n	800486a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d01d      	beq.n	8004812 <I2C_MasterTransmit_BTF+0x8c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d01a      	beq.n	8004812 <I2C_MasterTransmit_BTF+0x8c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e2:	d016      	beq.n	8004812 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2211      	movs	r2, #17
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fec1 	bl	8004592 <HAL_I2C_MasterTxCpltCallback>
}
 8004810:	e02b      	b.n	800486a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004820:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004830:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d107      	bne.n	800485c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fed6 	bl	8004606 <HAL_I2C_MemTxCpltCallback>
}
 800485a:	e006      	b.n	800486a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fe94 	bl	8004592 <HAL_I2C_MasterTxCpltCallback>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004880:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11d      	bne.n	80048c6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d10b      	bne.n	80048aa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	b2da      	uxtb	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048a8:	e073      	b.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	121b      	asrs	r3, r3, #8
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048c4:	e065      	b.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10b      	bne.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048e4:	e055      	b.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d151      	bne.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b22      	cmp	r3, #34	; 0x22
 80048f2:	d10d      	bne.n	8004910 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800490e:	e040      	b.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d015      	beq.n	8004946 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d112      	bne.n	8004946 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004944:	e025      	b.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d120      	bne.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b21      	cmp	r3, #33	; 0x21
 8004954:	d11d      	bne.n	8004992 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004964:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fe3a 	bl	8004606 <HAL_I2C_MemTxCpltCallback>
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b22      	cmp	r3, #34	; 0x22
 80049ac:	f040 80a2 	bne.w	8004af4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d921      	bls.n	8004a02 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	f040 8082 	bne.w	8004af4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004a00:	e078      	b.n	8004af4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d074      	beq.n	8004af4 <I2C_MasterReceive_RXNE+0x15a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d002      	beq.n	8004a16 <I2C_MasterReceive_RXNE+0x7c>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d16e      	bne.n	8004af4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 fa5c 	bl	8005ed4 <I2C_WaitOnSTOPRequestThroughIT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d142      	bne.n	8004aa8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d10a      	bne.n	8004a92 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fdc4 	bl	8004618 <HAL_I2C_MemRxCpltCallback>
}
 8004a90:	e030      	b.n	8004af4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2212      	movs	r2, #18
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fd7f 	bl	80045a4 <HAL_I2C_MasterRxCpltCallback>
}
 8004aa6:	e025      	b.n	8004af4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ab6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fd9b 	bl	800462a <HAL_I2C_ErrorCallback>
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b4a:	e0bd      	b.n	8004cc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d129      	bne.n	8004baa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d00a      	beq.n	8004b82 <I2C_MasterReceive_BTF+0x86>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d007      	beq.n	8004b82 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ba8:	e08e      	b.n	8004cc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d176      	bne.n	8004ca2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <I2C_MasterReceive_BTF+0xc4>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d108      	bne.n	8004bd2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e019      	b.n	8004c06 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d002      	beq.n	8004bde <I2C_MasterReceive_BTF+0xe2>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d108      	bne.n	8004bf0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e00a      	b.n	8004c06 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d007      	beq.n	8004c06 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d10a      	bne.n	8004c8c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fcc7 	bl	8004618 <HAL_I2C_MemRxCpltCallback>
}
 8004c8a:	e01d      	b.n	8004cc8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2212      	movs	r2, #18
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fc82 	bl	80045a4 <HAL_I2C_MasterRxCpltCallback>
}
 8004ca0:	e012      	b.n	8004cc8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d117      	bne.n	8004d14 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cfc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004cfe:	e067      	b.n	8004dd0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]
}
 8004d12:	e05d      	b.n	8004dd0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1c:	d133      	bne.n	8004d86 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b21      	cmp	r3, #33	; 0x21
 8004d28:	d109      	bne.n	8004d3e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d3a:	611a      	str	r2, [r3, #16]
 8004d3c:	e008      	b.n	8004d50 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <I2C_Master_SB+0x92>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d032      	beq.n	8004dd0 <I2C_Master_SB+0x100>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d02d      	beq.n	8004dd0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d82:	605a      	str	r2, [r3, #4]
}
 8004d84:	e024      	b.n	8004dd0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10e      	bne.n	8004dac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	11db      	asrs	r3, r3, #7
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0306 	and.w	r3, r3, #6
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f063 030f 	orn	r3, r3, #15
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	611a      	str	r2, [r3, #16]
}
 8004daa:	e011      	b.n	8004dd0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10d      	bne.n	8004dd0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	11db      	asrs	r3, r3, #7
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0306 	and.w	r3, r3, #6
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f063 030e 	orn	r3, r3, #14
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	611a      	str	r2, [r3, #16]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <I2C_Master_ADD10+0x26>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <I2C_Master_ADD10+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e20:	605a      	str	r2, [r3, #4]
  }
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b091      	sub	sp, #68	; 0x44
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	f040 8174 	bne.w	8005140 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <I2C_Master_ADDR+0x54>
 8004e60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d10b      	bne.n	8004e80 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	e16b      	b.n	8005158 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11d      	bne.n	8004ec4 <I2C_Master_ADDR+0x98>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e90:	d118      	bne.n	8004ec4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec2:	e149      	b.n	8005158 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d113      	bne.n	8004ef6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e120      	b.n	8005138 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	f040 808a 	bne.w	8005016 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f08:	d137      	bne.n	8004f7a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f28:	d113      	bne.n	8004f52 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f38:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	e0f2      	b.n	8005138 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e0de      	b.n	8005138 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d02e      	beq.n	8004fde <I2C_Master_ADDR+0x1b2>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d02b      	beq.n	8004fde <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	2b12      	cmp	r3, #18
 8004f8a:	d102      	bne.n	8004f92 <I2C_Master_ADDR+0x166>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d125      	bne.n	8004fde <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d00e      	beq.n	8004fb6 <I2C_Master_ADDR+0x18a>
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d00b      	beq.n	8004fb6 <I2C_Master_ADDR+0x18a>
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d008      	beq.n	8004fb6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e007      	b.n	8004fc6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fc4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	e0ac      	b.n	8005138 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e090      	b.n	8005138 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d158      	bne.n	80050d2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b04      	cmp	r3, #4
 8005024:	d021      	beq.n	800506a <I2C_Master_ADDR+0x23e>
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b02      	cmp	r3, #2
 800502a:	d01e      	beq.n	800506a <I2C_Master_ADDR+0x23e>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b10      	cmp	r3, #16
 8005030:	d01b      	beq.n	800506a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e012      	b.n	8005090 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005078:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d14b      	bne.n	8005138 <I2C_Master_ADDR+0x30c>
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a6:	d00b      	beq.n	80050c0 <I2C_Master_ADDR+0x294>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d008      	beq.n	80050c0 <I2C_Master_ADDR+0x294>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d005      	beq.n	80050c0 <I2C_Master_ADDR+0x294>
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d002      	beq.n	80050c0 <I2C_Master_ADDR+0x294>
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d13b      	bne.n	8005138 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ce:	605a      	str	r2, [r3, #4]
 80050d0:	e032      	b.n	8005138 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f0:	d117      	bne.n	8005122 <I2C_Master_ADDR+0x2f6>
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d00b      	beq.n	8005112 <I2C_Master_ADDR+0x2e6>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d008      	beq.n	8005112 <I2C_Master_ADDR+0x2e6>
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	2b08      	cmp	r3, #8
 8005104:	d005      	beq.n	8005112 <I2C_Master_ADDR+0x2e6>
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2b10      	cmp	r3, #16
 800510a:	d002      	beq.n	8005112 <I2C_Master_ADDR+0x2e6>
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	2b20      	cmp	r3, #32
 8005110:	d107      	bne.n	8005122 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005120:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800513e:	e00b      	b.n	8005158 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
}
 8005156:	e7ff      	b.n	8005158 <I2C_Master_ADDR+0x32c>
 8005158:	bf00      	nop
 800515a:	3744      	adds	r7, #68	; 0x44
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d114      	bne.n	80051d4 <I2C_SlaveTransmit_TXE+0x72>
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b29      	cmp	r3, #41	; 0x29
 80051ae:	d111      	bne.n	80051d4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2221      	movs	r2, #33	; 0x21
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2228      	movs	r2, #40	; 0x28
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff f9f1 	bl	80045b6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d011      	beq.n	8005212 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d02c      	beq.n	8005290 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d114      	bne.n	8005290 <I2C_SlaveReceive_RXNE+0x74>
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b2a      	cmp	r3, #42	; 0x2a
 800526a:	d111      	bne.n	8005290 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2222      	movs	r2, #34	; 0x22
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2228      	movs	r2, #40	; 0x28
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff f99c 	bl	80045c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d012      	beq.n	80052d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f4:	2b28      	cmp	r3, #40	; 0x28
 80052f6:	d127      	bne.n	8005348 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	089b      	lsrs	r3, r3, #2
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	09db      	lsrs	r3, r3, #7
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	81bb      	strh	r3, [r7, #12]
 800532a:	e002      	b.n	8005332 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800533a:	89ba      	ldrh	r2, [r7, #12]
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff f94a 	bl	80045da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005346:	e00e      	b.n	8005366 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	60bb      	str	r3, [r7, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d172      	bne.n	80054b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b22      	cmp	r3, #34	; 0x22
 80053d2:	d002      	beq.n	80053da <I2C_Slave_STOPF+0x6a>
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b2a      	cmp	r3, #42	; 0x2a
 80053d8:	d135      	bne.n	8005446 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800540c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe f8ea 	bl	80035ec <HAL_DMA_GetState>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d049      	beq.n	80054b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	4a69      	ldr	r2, [pc, #420]	; (80055c8 <I2C_Slave_STOPF+0x258>)
 8005424:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe f868 	bl	8003500 <HAL_DMA_Abort_IT>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d03d      	beq.n	80054b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005444:	e035      	b.n	80054b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005478:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe f8b4 	bl	80035ec <HAL_DMA_GetState>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d014      	beq.n	80054b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	4a4e      	ldr	r2, [pc, #312]	; (80055c8 <I2C_Slave_STOPF+0x258>)
 8005490:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe f832 	bl	8003500 <HAL_DMA_Abort_IT>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ac:	4610      	mov	r0, r2
 80054ae:	4798      	blx	r3
 80054b0:	e000      	b.n	80054b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d03e      	beq.n	800553c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d112      	bne.n	80054f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d112      	bne.n	8005526 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f843 	bl	80055d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800554a:	e039      	b.n	80055c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d109      	bne.n	8005566 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2228      	movs	r2, #40	; 0x28
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff f831 	bl	80045c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b28      	cmp	r3, #40	; 0x28
 8005570:	d111      	bne.n	8005596 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	; (80055cc <I2C_Slave_STOPF+0x25c>)
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff f830 	bl	80045f4 <HAL_I2C_ListenCpltCallback>
}
 8005594:	e014      	b.n	80055c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	2b22      	cmp	r3, #34	; 0x22
 800559c:	d002      	beq.n	80055a4 <I2C_Slave_STOPF+0x234>
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b22      	cmp	r3, #34	; 0x22
 80055a2:	d10d      	bne.n	80055c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff f804 	bl	80045c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	08005ad5 	.word	0x08005ad5
 80055cc:	ffff0000 	.word	0xffff0000

080055d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d002      	beq.n	80055f4 <I2C_ITError+0x24>
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d10a      	bne.n	800560a <I2C_ITError+0x3a>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b22      	cmp	r3, #34	; 0x22
 80055f8:	d107      	bne.n	800560a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005610:	2b28      	cmp	r3, #40	; 0x28
 8005612:	d107      	bne.n	8005624 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2228      	movs	r2, #40	; 0x28
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005622:	e015      	b.n	8005650 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d00a      	beq.n	800564a <I2C_ITError+0x7a>
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b60      	cmp	r3, #96	; 0x60
 8005638:	d007      	beq.n	800564a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800565a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565e:	d161      	bne.n	8005724 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005678:	2b01      	cmp	r3, #1
 800567a:	d020      	beq.n	80056be <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	4a6a      	ldr	r2, [pc, #424]	; (800582c <I2C_ITError+0x25c>)
 8005682:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd ff39 	bl	8003500 <HAL_DMA_Abort_IT>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8089 	beq.w	80057a8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
 80056bc:	e074      	b.n	80057a8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4a5a      	ldr	r2, [pc, #360]	; (800582c <I2C_ITError+0x25c>)
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd ff18 	bl	8003500 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d068      	beq.n	80057a8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d10b      	bne.n	80056fc <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800571e:	4610      	mov	r0, r2
 8005720:	4798      	blx	r3
 8005722:	e041      	b.n	80057a8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d125      	bne.n	800577c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d10b      	bne.n	8005764 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fe ff61 	bl	800463c <HAL_I2C_AbortCpltCallback>
 800577a:	e015      	b.n	80057a8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d10b      	bne.n	80057a2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fe ff41 	bl	800462a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ec:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d113      	bne.n	8005822 <I2C_ITError+0x252>
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b28      	cmp	r3, #40	; 0x28
 80057fe:	d110      	bne.n	8005822 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <I2C_ITError+0x260>)
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fe fee9 	bl	80045f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	08005ad5 	.word	0x08005ad5
 8005830:	ffff0000 	.word	0xffff0000

08005834 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	460b      	mov	r3, r1
 8005842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d006      	beq.n	800585e <I2C_MasterRequestWrite+0x2a>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d003      	beq.n	800585e <I2C_MasterRequestWrite+0x2a>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800585c:	d108      	bne.n	8005870 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e00b      	b.n	8005888 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	2b12      	cmp	r3, #18
 8005876:	d107      	bne.n	8005888 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f9c5 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	d103      	bne.n	80058b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e035      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c4:	d108      	bne.n	80058d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058c6:	897b      	ldrh	r3, [r7, #10]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e01b      	b.n	8005910 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	11db      	asrs	r3, r3, #7
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0306 	and.w	r3, r3, #6
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f063 030f 	orn	r3, r3, #15
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	490e      	ldr	r1, [pc, #56]	; (8005930 <I2C_MasterRequestWrite+0xfc>)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f9eb 	bl	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e010      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4907      	ldr	r1, [pc, #28]	; (8005934 <I2C_MasterRequestWrite+0x100>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f9db 	bl	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	00010008 	.word	0x00010008
 8005934:	00010002 	.word	0x00010002

08005938 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	460b      	mov	r3, r1
 8005946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800595c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d006      	beq.n	8005972 <I2C_MasterRequestRead+0x3a>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d003      	beq.n	8005972 <I2C_MasterRequestRead+0x3a>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005970:	d108      	bne.n	8005984 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e00b      	b.n	800599c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	2b11      	cmp	r3, #17
 800598a:	d107      	bne.n	800599c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800599a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f93b 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c2:	d103      	bne.n	80059cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e079      	b.n	8005ac4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d8:	d108      	bne.n	80059ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]
 80059ea:	e05f      	b.n	8005aac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059ec:	897b      	ldrh	r3, [r7, #10]
 80059ee:	11db      	asrs	r3, r3, #7
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0306 	and.w	r3, r3, #6
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f063 030f 	orn	r3, r3, #15
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4930      	ldr	r1, [pc, #192]	; (8005acc <I2C_MasterRequestRead+0x194>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f961 	bl	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e054      	b.n	8005ac4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a1a:	897b      	ldrh	r3, [r7, #10]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4929      	ldr	r1, [pc, #164]	; (8005ad0 <I2C_MasterRequestRead+0x198>)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f951 	bl	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e044      	b.n	8005ac4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8d9 	bl	8005c24 <I2C_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a86:	d103      	bne.n	8005a90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e017      	b.n	8005ac4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a94:	897b      	ldrh	r3, [r7, #10]
 8005a96:	11db      	asrs	r3, r3, #7
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 0306 	and.w	r3, r3, #6
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f063 030e 	orn	r3, r3, #14
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4907      	ldr	r1, [pc, #28]	; (8005ad0 <I2C_MasterRequestRead+0x198>)
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f90d 	bl	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	00010008 	.word	0x00010008
 8005ad0:	00010002 	.word	0x00010002

08005ad4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005aee:	4b4b      	ldr	r3, [pc, #300]	; (8005c1c <I2C_DMAAbort+0x148>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	4a4a      	ldr	r2, [pc, #296]	; (8005c20 <I2C_DMAAbort+0x14c>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	0a1a      	lsrs	r2, r3, #8
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	00da      	lsls	r2, r3, #3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b1a:	e00a      	b.n	8005b32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b30:	d0ea      	beq.n	8005b08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	2200      	movs	r2, #0
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	2200      	movs	r2, #0
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	2200      	movs	r2, #0
 8005b76:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	2200      	movs	r2, #0
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d10e      	bne.n	8005bc2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7fe fd3e 	bl	800463c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bc0:	e027      	b.n	8005c12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bc8:	2b28      	cmp	r3, #40	; 0x28
 8005bca:	d117      	bne.n	8005bfc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2228      	movs	r2, #40	; 0x28
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bfa:	e007      	b.n	8005c0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f7fe fd0c 	bl	800462a <HAL_I2C_ErrorCallback>
}
 8005c12:	bf00      	nop
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000000 	.word	0x20000000
 8005c20:	14f8b589 	.word	0x14f8b589

08005c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c34:	e025      	b.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d021      	beq.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fc feed 	bl	8002a1c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d116      	bne.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e023      	b.n	8005cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	0c1b      	lsrs	r3, r3, #16
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d10d      	bne.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	43da      	mvns	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	e00c      	b.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d0b6      	beq.n	8005c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce0:	e051      	b.n	8005d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf0:	d123      	bne.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0204 	orr.w	r2, r3, #4
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e046      	b.n	8005dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d021      	beq.n	8005d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fc fe6b 	bl	8002a1c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d116      	bne.n	8005d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e020      	b.n	8005dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10c      	bne.n	8005daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	43da      	mvns	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e00b      	b.n	8005dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	43da      	mvns	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d18d      	bne.n	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ddc:	e02d      	b.n	8005e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f900 	bl	8005fe4 <I2C_IsAcknowledgeFailed>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e02d      	b.n	8005e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d021      	beq.n	8005e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fc fe11 	bl	8002a1c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d116      	bne.n	8005e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e007      	b.n	8005e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b80      	cmp	r3, #128	; 0x80
 8005e46:	d1ca      	bne.n	8005dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e5e:	e02d      	b.n	8005ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f8bf 	bl	8005fe4 <I2C_IsAcknowledgeFailed>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e02d      	b.n	8005ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d021      	beq.n	8005ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e78:	f7fc fdd0 	bl	8002a1c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d116      	bne.n	8005ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e007      	b.n	8005ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d1ca      	bne.n	8005e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0a1a      	lsrs	r2, r3, #8
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e008      	b.n	8005f24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f20:	d0e9      	beq.n	8005ef6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000000 	.word	0x20000000
 8005f34:	14f8b589 	.word	0x14f8b589

08005f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f44:	e042      	b.n	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d119      	bne.n	8005f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0210 	mvn.w	r2, #16
 8005f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e029      	b.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f88:	f7fc fd48 	bl	8002a1c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d302      	bcc.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d116      	bne.n	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e007      	b.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d1b5      	bne.n	8005f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffa:	d11b      	bne.n	8006034 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006004:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0204 	orr.w	r2, r3, #4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006050:	d103      	bne.n	800605a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006058:	e007      	b.n	800606a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006062:	d102      	bne.n	800606a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2208      	movs	r2, #8
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e272      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8087 	beq.w	80061a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006094:	4b92      	ldr	r3, [pc, #584]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b04      	cmp	r3, #4
 800609e:	d00c      	beq.n	80060ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060a0:	4b8f      	ldr	r3, [pc, #572]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d112      	bne.n	80060d2 <HAL_RCC_OscConfig+0x5e>
 80060ac:	4b8c      	ldr	r3, [pc, #560]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d10b      	bne.n	80060d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ba:	4b89      	ldr	r3, [pc, #548]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d06c      	beq.n	80061a0 <HAL_RCC_OscConfig+0x12c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d168      	bne.n	80061a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e24c      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060da:	d106      	bne.n	80060ea <HAL_RCC_OscConfig+0x76>
 80060dc:	4b80      	ldr	r3, [pc, #512]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a7f      	ldr	r2, [pc, #508]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e02e      	b.n	8006148 <HAL_RCC_OscConfig+0xd4>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0x98>
 80060f2:	4b7b      	ldr	r3, [pc, #492]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7a      	ldr	r2, [pc, #488]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80060f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	4b78      	ldr	r3, [pc, #480]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a77      	ldr	r2, [pc, #476]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	e01d      	b.n	8006148 <HAL_RCC_OscConfig+0xd4>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006114:	d10c      	bne.n	8006130 <HAL_RCC_OscConfig+0xbc>
 8006116:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a71      	ldr	r2, [pc, #452]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 800611c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	4b6f      	ldr	r3, [pc, #444]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a6e      	ldr	r2, [pc, #440]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e00b      	b.n	8006148 <HAL_RCC_OscConfig+0xd4>
 8006130:	4b6b      	ldr	r3, [pc, #428]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6a      	ldr	r2, [pc, #424]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a67      	ldr	r2, [pc, #412]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d013      	beq.n	8006178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006150:	f7fc fc64 	bl	8002a1c <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006158:	f7fc fc60 	bl	8002a1c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b64      	cmp	r3, #100	; 0x64
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e200      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616a:	4b5d      	ldr	r3, [pc, #372]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0xe4>
 8006176:	e014      	b.n	80061a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006178:	f7fc fc50 	bl	8002a1c <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006180:	f7fc fc4c 	bl	8002a1c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b64      	cmp	r3, #100	; 0x64
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e1ec      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006192:	4b53      	ldr	r3, [pc, #332]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <HAL_RCC_OscConfig+0x10c>
 800619e:	e000      	b.n	80061a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d063      	beq.n	8006276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ae:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061ba:	4b49      	ldr	r3, [pc, #292]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d11c      	bne.n	8006200 <HAL_RCC_OscConfig+0x18c>
 80061c6:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	4b43      	ldr	r3, [pc, #268]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_RCC_OscConfig+0x176>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e1c0      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ea:	4b3d      	ldr	r3, [pc, #244]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4939      	ldr	r1, [pc, #228]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061fe:	e03a      	b.n	8006276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d020      	beq.n	800624a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006208:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <HAL_RCC_OscConfig+0x270>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620e:	f7fc fc05 	bl	8002a1c <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006216:	f7fc fc01 	bl	8002a1c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e1a1      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006234:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4927      	ldr	r1, [pc, #156]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]
 8006248:	e015      	b.n	8006276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624a:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <HAL_RCC_OscConfig+0x270>)
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006250:	f7fc fbe4 	bl	8002a1c <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006258:	f7fc fbe0 	bl	8002a1c <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e180      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d03a      	beq.n	80062f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d019      	beq.n	80062be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800628a:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <HAL_RCC_OscConfig+0x274>)
 800628c:	2201      	movs	r2, #1
 800628e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006290:	f7fc fbc4 	bl	8002a1c <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006298:	f7fc fbc0 	bl	8002a1c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e160      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062b6:	2001      	movs	r0, #1
 80062b8:	f000 fad8 	bl	800686c <RCC_Delay>
 80062bc:	e01c      	b.n	80062f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <HAL_RCC_OscConfig+0x274>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c4:	f7fc fbaa 	bl	8002a1c <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ca:	e00f      	b.n	80062ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062cc:	f7fc fba6 	bl	8002a1c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d908      	bls.n	80062ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e146      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000
 80062e4:	42420000 	.word	0x42420000
 80062e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ec:	4b92      	ldr	r3, [pc, #584]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e9      	bne.n	80062cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a6 	beq.w	8006452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800630a:	4b8b      	ldr	r3, [pc, #556]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006316:	4b88      	ldr	r3, [pc, #544]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4a87      	ldr	r2, [pc, #540]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006320:	61d3      	str	r3, [r2, #28]
 8006322:	4b85      	ldr	r3, [pc, #532]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006332:	4b82      	ldr	r3, [pc, #520]	; (800653c <HAL_RCC_OscConfig+0x4c8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d118      	bne.n	8006370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800633e:	4b7f      	ldr	r3, [pc, #508]	; (800653c <HAL_RCC_OscConfig+0x4c8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7e      	ldr	r2, [pc, #504]	; (800653c <HAL_RCC_OscConfig+0x4c8>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800634a:	f7fc fb67 	bl	8002a1c <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006352:	f7fc fb63 	bl	8002a1c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b64      	cmp	r3, #100	; 0x64
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e103      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006364:	4b75      	ldr	r3, [pc, #468]	; (800653c <HAL_RCC_OscConfig+0x4c8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d106      	bne.n	8006386 <HAL_RCC_OscConfig+0x312>
 8006378:	4b6f      	ldr	r3, [pc, #444]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4a6e      	ldr	r2, [pc, #440]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6213      	str	r3, [r2, #32]
 8006384:	e02d      	b.n	80063e2 <HAL_RCC_OscConfig+0x36e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x334>
 800638e:	4b6a      	ldr	r3, [pc, #424]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4a69      	ldr	r2, [pc, #420]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	6213      	str	r3, [r2, #32]
 800639a:	4b67      	ldr	r3, [pc, #412]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	4a66      	ldr	r2, [pc, #408]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063a0:	f023 0304 	bic.w	r3, r3, #4
 80063a4:	6213      	str	r3, [r2, #32]
 80063a6:	e01c      	b.n	80063e2 <HAL_RCC_OscConfig+0x36e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d10c      	bne.n	80063ca <HAL_RCC_OscConfig+0x356>
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4a60      	ldr	r2, [pc, #384]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	6213      	str	r3, [r2, #32]
 80063bc:	4b5e      	ldr	r3, [pc, #376]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4a5d      	ldr	r2, [pc, #372]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6213      	str	r3, [r2, #32]
 80063c8:	e00b      	b.n	80063e2 <HAL_RCC_OscConfig+0x36e>
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4a5a      	ldr	r2, [pc, #360]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6213      	str	r3, [r2, #32]
 80063d6:	4b58      	ldr	r3, [pc, #352]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	4a57      	ldr	r2, [pc, #348]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fc fb17 	bl	8002a1c <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f2:	f7fc fb13 	bl	8002a1c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0b1      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006408:	4b4b      	ldr	r3, [pc, #300]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ee      	beq.n	80063f2 <HAL_RCC_OscConfig+0x37e>
 8006414:	e014      	b.n	8006440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006416:	f7fc fb01 	bl	8002a1c <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fc fafd 	bl	8002a1c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e09b      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006434:	4b40      	ldr	r3, [pc, #256]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ee      	bne.n	800641e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d105      	bne.n	8006452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006446:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	4a3b      	ldr	r2, [pc, #236]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800644c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8087 	beq.w	800656a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b08      	cmp	r3, #8
 8006466:	d061      	beq.n	800652c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d146      	bne.n	80064fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006470:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_RCC_OscConfig+0x4cc>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006476:	f7fc fad1 	bl	8002a1c <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647e:	f7fc facd 	bl	8002a1c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e06d      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006490:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f0      	bne.n	800647e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a4:	d108      	bne.n	80064b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4921      	ldr	r1, [pc, #132]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b8:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a19      	ldr	r1, [r3, #32]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	430b      	orrs	r3, r1
 80064ca:	491b      	ldr	r1, [pc, #108]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <HAL_RCC_OscConfig+0x4cc>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d6:	f7fc faa1 	bl	8002a1c <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064de:	f7fc fa9d 	bl	8002a1c <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e03d      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064f0:	4b11      	ldr	r3, [pc, #68]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <HAL_RCC_OscConfig+0x46a>
 80064fc:	e035      	b.n	800656a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <HAL_RCC_OscConfig+0x4cc>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fc fa8a 	bl	8002a1c <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800650c:	f7fc fa86 	bl	8002a1c <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e026      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <HAL_RCC_OscConfig+0x4c4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x498>
 800652a:	e01e      	b.n	800656a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e019      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
 8006538:	40021000 	.word	0x40021000
 800653c:	40007000 	.word	0x40007000
 8006540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x500>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	429a      	cmp	r2, r3
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006562:	429a      	cmp	r2, r3
 8006564:	d001      	beq.n	800656a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000

08006578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0d0      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800658c:	4b6a      	ldr	r3, [pc, #424]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d910      	bls.n	80065bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b67      	ldr	r3, [pc, #412]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 0207 	bic.w	r2, r3, #7
 80065a2:	4965      	ldr	r1, [pc, #404]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	4b63      	ldr	r3, [pc, #396]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0b8      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d020      	beq.n	800660a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a58      	ldr	r2, [pc, #352]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80065da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065ec:	4b53      	ldr	r3, [pc, #332]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a52      	ldr	r2, [pc, #328]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80065f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80065f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	494d      	ldr	r1, [pc, #308]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d040      	beq.n	8006698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d115      	bne.n	8006656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e07f      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006636:	4b41      	ldr	r3, [pc, #260]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e073      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006646:	4b3d      	ldr	r3, [pc, #244]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e06b      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f023 0203 	bic.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4936      	ldr	r1, [pc, #216]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	4313      	orrs	r3, r2
 8006666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006668:	f7fc f9d8 	bl	8002a1c <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666e:	e00a      	b.n	8006686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006670:	f7fc f9d4 	bl	8002a1c <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	; 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e053      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f003 020c 	and.w	r2, r3, #12
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	429a      	cmp	r2, r3
 8006696:	d1eb      	bne.n	8006670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d210      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 0207 	bic.w	r2, r3, #7
 80066ae:	4922      	ldr	r1, [pc, #136]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b6:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_RCC_ClockConfig+0x1c0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e032      	b.n	800672e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4916      	ldr	r1, [pc, #88]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	490e      	ldr	r1, [pc, #56]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	4313      	orrs	r3, r2
 8006704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006706:	f000 f821 	bl	800674c <HAL_RCC_GetSysClockFreq>
 800670a:	4602      	mov	r2, r0
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	490a      	ldr	r1, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x1c8>)
 8006718:	5ccb      	ldrb	r3, [r1, r3]
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <HAL_RCC_ClockConfig+0x1cc>)
 8006720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <HAL_RCC_ClockConfig+0x1d0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fc f936 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40022000 	.word	0x40022000
 800673c:	40021000 	.word	0x40021000
 8006740:	0800baf8 	.word	0x0800baf8
 8006744:	20000000 	.word	0x20000000
 8006748:	20000004 	.word	0x20000004

0800674c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800674c:	b490      	push	{r4, r7}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006752:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8006754:	1d3c      	adds	r4, r7, #4
 8006756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800675c:	f240 2301 	movw	r3, #513	; 0x201
 8006760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b04      	cmp	r3, #4
 8006784:	d002      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0x40>
 8006786:	2b08      	cmp	r3, #8
 8006788:	d003      	beq.n	8006792 <HAL_RCC_GetSysClockFreq+0x46>
 800678a:	e02b      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <HAL_RCC_GetSysClockFreq+0xb4>)
 800678e:	623b      	str	r3, [r7, #32]
      break;
 8006790:	e02b      	b.n	80067ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	0c9b      	lsrs	r3, r3, #18
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	3328      	adds	r3, #40	; 0x28
 800679c:	443b      	add	r3, r7
 800679e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d012      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	0c5b      	lsrs	r3, r3, #17
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	3328      	adds	r3, #40	; 0x28
 80067ba:	443b      	add	r3, r7
 80067bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4a0e      	ldr	r2, [pc, #56]	; (8006800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80067c6:	fb03 f202 	mul.w	r2, r3, r2
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
 80067d2:	e004      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	623b      	str	r3, [r7, #32]
      break;
 80067e2:	e002      	b.n	80067ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80067e6:	623b      	str	r3, [r7, #32]
      break;
 80067e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3728      	adds	r7, #40	; 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc90      	pop	{r4, r7}
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	0800bad0 	.word	0x0800bad0
 80067fc:	40021000 	.word	0x40021000
 8006800:	007a1200 	.word	0x007a1200
 8006804:	003d0900 	.word	0x003d0900

08006808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <HAL_RCC_GetHCLKFreq+0x10>)
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	20000000 	.word	0x20000000

0800681c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006820:	f7ff fff2 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 8006824:	4602      	mov	r2, r0
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	4903      	ldr	r1, [pc, #12]	; (8006840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006832:	5ccb      	ldrb	r3, [r1, r3]
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40021000 	.word	0x40021000
 8006840:	0800bb08 	.word	0x0800bb08

08006844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006848:	f7ff ffde 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	0adb      	lsrs	r3, r3, #11
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40021000 	.word	0x40021000
 8006868:	0800bb08 	.word	0x0800bb08

0800686c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <RCC_Delay+0x34>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <RCC_Delay+0x38>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006888:	bf00      	nop
  }
  while (Delay --);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f9      	bne.n	8006888 <RCC_Delay+0x1c>
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr
 80068a0:	20000000 	.word	0x20000000
 80068a4:	10624dd3 	.word	0x10624dd3

080068a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d07d      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c8:	4b4f      	ldr	r3, [pc, #316]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d4:	4b4c      	ldr	r3, [pc, #304]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	4a4b      	ldr	r2, [pc, #300]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	61d3      	str	r3, [r2, #28]
 80068e0:	4b49      	ldr	r3, [pc, #292]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f0:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d118      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068fc:	4b43      	ldr	r3, [pc, #268]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a42      	ldr	r2, [pc, #264]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006908:	f7fc f888 	bl	8002a1c <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690e:	e008      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006910:	f7fc f884 	bl	8002a1c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b64      	cmp	r3, #100	; 0x64
 800691c:	d901      	bls.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e06d      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006922:	4b3a      	ldr	r3, [pc, #232]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800692e:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006936:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d02e      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d027      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694c:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006956:	4b2e      	ldr	r3, [pc, #184]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006958:	2201      	movs	r2, #1
 800695a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006962:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d014      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006972:	f7fc f853 	bl	8002a1c <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006978:	e00a      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697a:	f7fc f84f 	bl	8002a1c <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	f241 3288 	movw	r2, #5000	; 0x1388
 8006988:	4293      	cmp	r3, r2
 800698a:	d901      	bls.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e036      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006990:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0ee      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699c:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4917      	ldr	r1, [pc, #92]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d105      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b4:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	490b      	ldr	r1, [pc, #44]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	4904      	ldr	r1, [pc, #16]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	42420440 	.word	0x42420440

08006a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b08d      	sub	sp, #52	; 0x34
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006a1e:	f107 040c 	add.w	r4, r7, #12
 8006a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a28:	f240 2301 	movw	r3, #513	; 0x201
 8006a2c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a36:	2300      	movs	r3, #0
 8006a38:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	f200 808e 	bhi.w	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d049      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d079      	beq.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006a5c:	e086      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006a5e:	4b49      	ldr	r3, [pc, #292]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006a64:	4b47      	ldr	r3, [pc, #284]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d07f      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	0c9b      	lsrs	r3, r3, #18
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	3330      	adds	r3, #48	; 0x30
 8006a7a:	443b      	add	r3, r7
 8006a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a80:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d017      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a8c:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0c5b      	lsrs	r3, r3, #17
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	3330      	adds	r3, #48	; 0x30
 8006a98:	443b      	add	r3, r7
 8006a9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006aaa:	4a37      	ldr	r2, [pc, #220]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aba:	e004      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	4a33      	ldr	r2, [pc, #204]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006ac6:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d102      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ad8:	e04a      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ae8:	e042      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006aea:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afa:	d108      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b0c:	e01f      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b18:	d109      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006b26:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b2c:	e00f      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b38:	d11c      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006b46:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b4c:	e012      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006b4e:	e011      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006b50:	f7ff fe78 	bl	8006844 <HAL_RCC_GetPCLK2Freq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	0b9b      	lsrs	r3, r3, #14
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	3301      	adds	r3, #1
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b6a:	e004      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006b6c:	bf00      	nop
 8006b6e:	e002      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006b70:	bf00      	nop
 8006b72:	e000      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006b74:	bf00      	nop
    }
  }
  return (frequency);
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3734      	adds	r7, #52	; 0x34
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd90      	pop	{r4, r7, pc}
 8006b80:	0800bae0 	.word	0x0800bae0
 8006b84:	40021000 	.word	0x40021000
 8006b88:	007a1200 	.word	0x007a1200
 8006b8c:	003d0900 	.word	0x003d0900
 8006b90:	aaaaaaab 	.word	0xaaaaaaab

08006b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e076      	b.n	8006c94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d108      	bne.n	8006bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb6:	d009      	beq.n	8006bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	61da      	str	r2, [r3, #28]
 8006bbe:	e005      	b.n	8006bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb fd12 	bl	8002610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	ea42 0103 	orr.w	r1, r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	0c1a      	lsrs	r2, r3, #16
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f002 0204 	and.w	r2, r2, #4
 8006c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_SPI_Transmit+0x22>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e126      	b.n	8006f0c <HAL_SPI_Transmit+0x270>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc6:	f7fb fea9 	bl	8002a1c <HAL_GetTick>
 8006cca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ce0:	e10b      	b.n	8006efa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <HAL_SPI_Transmit+0x52>
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cf2:	e102      	b.n	8006efa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	88fa      	ldrh	r2, [r7, #6]
 8006d12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3a:	d10f      	bne.n	8006d5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d007      	beq.n	8006d7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d82:	d14b      	bne.n	8006e1c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_SPI_Transmit+0xf6>
 8006d8c:	8afb      	ldrh	r3, [r7, #22]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d13e      	bne.n	8006e10 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	881a      	ldrh	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	1c9a      	adds	r2, r3, #2
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006db6:	e02b      	b.n	8006e10 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d112      	bne.n	8006dec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dea:	e011      	b.n	8006e10 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dec:	f7fb fe16 	bl	8002a1c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d803      	bhi.n	8006e04 <HAL_SPI_Transmit+0x168>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d102      	bne.n	8006e0a <HAL_SPI_Transmit+0x16e>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d102      	bne.n	8006e10 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e0e:	e074      	b.n	8006efa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1ce      	bne.n	8006db8 <HAL_SPI_Transmit+0x11c>
 8006e1a:	e04c      	b.n	8006eb6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_SPI_Transmit+0x18e>
 8006e24:	8afb      	ldrh	r3, [r7, #22]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d140      	bne.n	8006eac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	7812      	ldrb	r2, [r2, #0]
 8006e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e50:	e02c      	b.n	8006eac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d113      	bne.n	8006e88 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e86:	e011      	b.n	8006eac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e88:	f7fb fdc8 	bl	8002a1c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d803      	bhi.n	8006ea0 <HAL_SPI_Transmit+0x204>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d102      	bne.n	8006ea6 <HAL_SPI_Transmit+0x20a>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eaa:	e026      	b.n	8006efa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1cd      	bne.n	8006e52 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fbc4 	bl	8007648 <SPI_EndRxTxTransaction>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e000      	b.n	8006efa <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	4613      	mov	r3, r2
 8006f22:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f30:	d112      	bne.n	8006f58 <HAL_SPI_Receive+0x44>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10e      	bne.n	8006f58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f8f1 	bl	8007136 <HAL_SPI_TransmitReceive>
 8006f54:	4603      	mov	r3, r0
 8006f56:	e0ea      	b.n	800712e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_SPI_Receive+0x52>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0e3      	b.n	800712e <HAL_SPI_Receive+0x21a>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f6e:	f7fb fd55 	bl	8002a1c <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
 8006f82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f84:	e0ca      	b.n	800711c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_Receive+0x7e>
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f96:	e0c1      	b.n	800711c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fde:	d10f      	bne.n	8007000 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ffe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d007      	beq.n	800701e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d162      	bne.n	80070ec <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007026:	e02e      	b.n	8007086 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d115      	bne.n	8007062 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f103 020c 	add.w	r2, r3, #12
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	7812      	ldrb	r2, [r2, #0]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007060:	e011      	b.n	8007086 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007062:	f7fb fcdb 	bl	8002a1c <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d803      	bhi.n	800707a <HAL_SPI_Receive+0x166>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Receive+0x16c>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007084:	e04a      	b.n	800711c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1cb      	bne.n	8007028 <HAL_SPI_Receive+0x114>
 8007090:	e031      	b.n	80070f6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d113      	bne.n	80070c8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	b292      	uxth	r2, r2
 80070ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	1c9a      	adds	r2, r3, #2
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c6:	e011      	b.n	80070ec <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c8:	f7fb fca8 	bl	8002a1c <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d803      	bhi.n	80070e0 <HAL_SPI_Receive+0x1cc>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d102      	bne.n	80070e6 <HAL_SPI_Receive+0x1d2>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070ea:	e017      	b.n	800711c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1cd      	bne.n	8007092 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fa52 	bl	80075a4 <SPI_EndRxTransaction>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
 8007118:	e000      	b.n	800711c <HAL_SPI_Receive+0x208>
  }

error :
 800711a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b08c      	sub	sp, #48	; 0x30
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007144:	2301      	movs	r3, #1
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_SPI_TransmitReceive+0x26>
 8007158:	2302      	movs	r3, #2
 800715a:	e18a      	b.n	8007472 <HAL_SPI_TransmitReceive+0x33c>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007164:	f7fb fc5a 	bl	8002a1c <HAL_GetTick>
 8007168:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800717e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007182:	2b01      	cmp	r3, #1
 8007184:	d00f      	beq.n	80071a6 <HAL_SPI_TransmitReceive+0x70>
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718c:	d107      	bne.n	800719e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <HAL_SPI_TransmitReceive+0x68>
 8007196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719a:	2b04      	cmp	r3, #4
 800719c:	d003      	beq.n	80071a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800719e:	2302      	movs	r3, #2
 80071a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071a4:	e15b      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x82>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x82>
 80071b2:	887b      	ldrh	r3, [r7, #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071be:	e14e      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d003      	beq.n	80071d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2205      	movs	r2, #5
 80071d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	887a      	ldrh	r2, [r7, #2]
 80071f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	887a      	ldrh	r2, [r7, #2]
 80071fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d007      	beq.n	8007228 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007230:	d178      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x10a>
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d166      	bne.n	800730e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007264:	e053      	b.n	800730e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b02      	cmp	r3, #2
 8007272:	d11b      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x176>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <HAL_SPI_TransmitReceive+0x176>
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d113      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	881a      	ldrh	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729e:	b29b      	uxth	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d119      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x1b8>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d014      	beq.n	80072ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	b292      	uxth	r2, r2
 80072d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	1c9a      	adds	r2, r3, #2
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072ea:	2301      	movs	r3, #1
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072ee:	f7fb fb95 	bl	8002a1c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d807      	bhi.n	800730e <HAL_SPI_TransmitReceive+0x1d8>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d003      	beq.n	800730e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800730c:	e0a7      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1a6      	bne.n	8007266 <HAL_SPI_TransmitReceive+0x130>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1a1      	bne.n	8007266 <HAL_SPI_TransmitReceive+0x130>
 8007322:	e07c      	b.n	800741e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_SPI_TransmitReceive+0x1fc>
 800732c:	8b7b      	ldrh	r3, [r7, #26]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d16b      	bne.n	800740a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007358:	e057      	b.n	800740a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d11c      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x26c>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x26c>
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d114      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d119      	bne.n	80073e4 <HAL_SPI_TransmitReceive+0x2ae>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073e0:	2301      	movs	r3, #1
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073e4:	f7fb fb1a 	bl	8002a1c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d803      	bhi.n	80073fc <HAL_SPI_TransmitReceive+0x2c6>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d102      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x2cc>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007408:	e029      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1a2      	bne.n	800735a <HAL_SPI_TransmitReceive+0x224>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d19d      	bne.n	800735a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f910 	bl	8007648 <SPI_EndRxTxTransaction>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d006      	beq.n	800743c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800743a:	e010      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	e000      	b.n	800745e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800745c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800746e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007472:	4618      	mov	r0, r3
 8007474:	3730      	adds	r7, #48	; 0x30
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007488:	b2db      	uxtb	r3, r3
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074a4:	f7fb faba 	bl	8002a1c <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074b4:	f7fb fab2 	bl	8002a1c <HAL_GetTick>
 80074b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074ba:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	015b      	lsls	r3, r3, #5
 80074c0:	0d1b      	lsrs	r3, r3, #20
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	fb02 f303 	mul.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ca:	e054      	b.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d050      	beq.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074d4:	f7fb faa2 	bl	8002a1c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d902      	bls.n	80074ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d13d      	bne.n	8007566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007502:	d111      	bne.n	8007528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	d004      	beq.n	8007518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007516:	d107      	bne.n	8007528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007530:	d10f      	bne.n	8007552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e017      	b.n	8007596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	3b01      	subs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4013      	ands	r3, r2
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	429a      	cmp	r2, r3
 8007584:	bf0c      	ite	eq
 8007586:	2301      	moveq	r3, #1
 8007588:	2300      	movne	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	429a      	cmp	r2, r3
 8007592:	d19b      	bne.n	80074cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000000 	.word	0x20000000

080075a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b8:	d111      	bne.n	80075de <SPI_EndRxTransaction+0x3a>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c2:	d004      	beq.n	80075ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d107      	bne.n	80075de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e6:	d117      	bne.n	8007618 <SPI_EndRxTransaction+0x74>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f0:	d112      	bne.n	8007618 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	2101      	movs	r1, #1
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff ff49 	bl	8007494 <SPI_WaitFlagStateUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e013      	b.n	8007640 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff ff36 	bl	8007494 <SPI_WaitFlagStateUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e000      	b.n	8007640 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff ff18 	bl	8007494 <SPI_WaitFlagStateUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f043 0220 	orr.w	r2, r3, #32
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e000      	b.n	800767c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e03f      	b.n	8007716 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fa fffa 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2224      	movs	r2, #36	; 0x24
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f905 	bl	80078d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b08a      	sub	sp, #40	; 0x28
 8007722:	af02      	add	r7, sp, #8
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b20      	cmp	r3, #32
 800773c:	d17c      	bne.n	8007838 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_UART_Transmit+0x2c>
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e075      	b.n	800783a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_UART_Transmit+0x3e>
 8007758:	2302      	movs	r3, #2
 800775a:	e06e      	b.n	800783a <HAL_UART_Transmit+0x11c>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2221      	movs	r2, #33	; 0x21
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007772:	f7fb f953 	bl	8002a1c <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778c:	d108      	bne.n	80077a0 <HAL_UART_Transmit+0x82>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	e003      	b.n	80077a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80077b0:	e02a      	b.n	8007808 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2180      	movs	r1, #128	; 0x80
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f840 	bl	8007842 <UART_WaitOnFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e036      	b.n	800783a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	3302      	adds	r3, #2
 80077e6:	61bb      	str	r3, [r7, #24]
 80077e8:	e007      	b.n	80077fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	3301      	adds	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1cf      	bne.n	80077b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2200      	movs	r2, #0
 800781a:	2140      	movs	r1, #64	; 0x40
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f810 	bl	8007842 <UART_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e006      	b.n	800783a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	e000      	b.n	800783a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007838:	2302      	movs	r3, #2
  }
}
 800783a:	4618      	mov	r0, r3
 800783c:	3720      	adds	r7, #32
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	4613      	mov	r3, r2
 8007850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007852:	e02c      	b.n	80078ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d028      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <UART_WaitOnFlagUntilTimeout+0x30>
 8007862:	f7fb f8db 	bl	8002a1c <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	429a      	cmp	r2, r3
 8007870:	d21d      	bcs.n	80078ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007880:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
 8007890:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	bf0c      	ite	eq
 80078be:	2301      	moveq	r3, #1
 80078c0:	2300      	movne	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d0c3      	beq.n	8007854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007912:	f023 030c 	bic.w	r3, r3, #12
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	430b      	orrs	r3, r1
 800791e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2c      	ldr	r2, [pc, #176]	; (80079ec <UART_SetConfig+0x114>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d103      	bne.n	8007948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007940:	f7fe ff80 	bl	8006844 <HAL_RCC_GetPCLK2Freq>
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	e002      	b.n	800794e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007948:	f7fe ff68 	bl	800681c <HAL_RCC_GetPCLK1Freq>
 800794c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009a      	lsls	r2, r3, #2
 8007958:	441a      	add	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <UART_SetConfig+0x118>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	0119      	lsls	r1, r3, #4
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009a      	lsls	r2, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	fbb2 f2f3 	udiv	r2, r2, r3
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <UART_SetConfig+0x118>)
 8007986:	fba3 0302 	umull	r0, r3, r3, r2
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	2064      	movs	r0, #100	; 0x64
 800798e:	fb00 f303 	mul.w	r3, r0, r3
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	3332      	adds	r3, #50	; 0x32
 8007998:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <UART_SetConfig+0x118>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a4:	4419      	add	r1, r3
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009a      	lsls	r2, r3, #2
 80079b0:	441a      	add	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <UART_SetConfig+0x118>)
 80079be:	fba3 0302 	umull	r0, r3, r3, r2
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	2064      	movs	r0, #100	; 0x64
 80079c6:	fb00 f303 	mul.w	r3, r0, r3
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	3332      	adds	r3, #50	; 0x32
 80079d0:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <UART_SetConfig+0x118>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	440a      	add	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40013800 	.word	0x40013800
 80079f0:	51eb851f 	.word	0x51eb851f

080079f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a06:	2b84      	cmp	r3, #132	; 0x84
 8007a08:	d005      	beq.n	8007a16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	3303      	adds	r3, #3
 8007a14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a26:	f000 fad1 	bl	8007fcc <vTaskStartScheduler>
  
  return osOK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	b089      	sub	sp, #36	; 0x24
 8007a34:	af04      	add	r7, sp, #16
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d020      	beq.n	8007a84 <osThreadCreate+0x54>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01c      	beq.n	8007a84 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685c      	ldr	r4, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681d      	ldr	r5, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691e      	ldr	r6, [r3, #16]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff ffc9 	bl	80079f4 <makeFreeRtosPriority>
 8007a62:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a6c:	9202      	str	r2, [sp, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	9100      	str	r1, [sp, #0]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	4632      	mov	r2, r6
 8007a76:	4629      	mov	r1, r5
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f8e8 	bl	8007c4e <xTaskCreateStatic>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e01c      	b.n	8007abe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685c      	ldr	r4, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a90:	b29e      	uxth	r6, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff ffab 	bl	80079f4 <makeFreeRtosPriority>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	f107 030c 	add.w	r3, r7, #12
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	9200      	str	r2, [sp, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4629      	mov	r1, r5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f929 	bl	8007d06 <xTaskCreate>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d001      	beq.n	8007abe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007abe:	68fb      	ldr	r3, [r7, #12]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ac8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <osDelay+0x16>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	e000      	b.n	8007ae0 <osDelay+0x18>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fa3f 	bl	8007f64 <vTaskDelay>
  
  return osOK;
 8007ae6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f103 0208 	add.w	r2, r3, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f04f 32ff 	mov.w	r2, #4294967295
 8007b08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f103 0208 	add.w	r2, r3, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 0208 	add.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d103      	bne.n	8007bac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	e00c      	b.n	8007bc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e002      	b.n	8007bba <vListInsert+0x2e>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d2f6      	bcs.n	8007bb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6892      	ldr	r2, [r2, #8]
 8007c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6852      	ldr	r2, [r2, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d103      	bne.n	8007c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b08e      	sub	sp, #56	; 0x38
 8007c52:	af04      	add	r7, sp, #16
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	61fb      	str	r3, [r7, #28]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c94:	2354      	movs	r3, #84	; 0x54
 8007c96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b54      	cmp	r3, #84	; 0x54
 8007c9c:	d00a      	beq.n	8007cb4 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	61bb      	str	r3, [r7, #24]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01e      	beq.n	8007cf8 <xTaskCreateStatic+0xaa>
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01b      	beq.n	8007cf8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2202      	movs	r2, #2
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9303      	str	r3, [sp, #12]
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	f107 0314 	add.w	r3, r7, #20
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f850 	bl	8007d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cf2:	f000 f8cd 	bl	8007e90 <prvAddNewTaskToReadyList>
 8007cf6:	e001      	b.n	8007cfc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
	}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08c      	sub	sp, #48	; 0x30
 8007d0a:	af04      	add	r7, sp, #16
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fe88 	bl	8008a30 <pvPortMalloc>
 8007d20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007d28:	2054      	movs	r0, #84	; 0x54
 8007d2a:	f000 fe81 	bl	8008a30 <pvPortMalloc>
 8007d2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007d3c:	e005      	b.n	8007d4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d3e:	6978      	ldr	r0, [r7, #20]
 8007d40:	f000 ff3a 	bl	8008bb8 <vPortFree>
 8007d44:	e001      	b.n	8007d4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f80e 	bl	8007d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d74:	69f8      	ldr	r0, [r7, #28]
 8007d76:	f000 f88b 	bl	8007e90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	e002      	b.n	8007d86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d86:	69bb      	ldr	r3, [r7, #24]
	}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	3b01      	subs	r3, #1
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	617b      	str	r3, [r7, #20]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
 8007ddc:	e012      	b.n	8007e04 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	4413      	add	r3, r2
 8007de4:	7819      	ldrb	r1, [r3, #0]
 8007de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	3334      	adds	r3, #52	; 0x34
 8007dee:	460a      	mov	r2, r1
 8007df0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d9e9      	bls.n	8007dde <prvInitialiseNewTask+0x4e>
 8007e0a:	e000      	b.n	8007e0e <prvInitialiseNewTask+0x7e>
		{
			break;
 8007e0c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d901      	bls.n	8007e20 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e1c:	2306      	movs	r3, #6
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2200      	movs	r2, #0
 8007e30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff fe79 	bl	8007b2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	3318      	adds	r3, #24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff fe74 	bl	8007b2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f1c3 0207 	rsb	r2, r3, #7
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	2200      	movs	r2, #0
 8007e60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	68f9      	ldr	r1, [r7, #12]
 8007e6e:	69b8      	ldr	r0, [r7, #24]
 8007e70:	f000 fc2c 	bl	80086cc <pxPortInitialiseStack>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e86:	bf00      	nop
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e98:	f000 fd08 	bl	80088ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e9c:	4b2a      	ldr	r3, [pc, #168]	; (8007f48 <prvAddNewTaskToReadyList+0xb8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	4a29      	ldr	r2, [pc, #164]	; (8007f48 <prvAddNewTaskToReadyList+0xb8>)
 8007ea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ea6:	4b29      	ldr	r3, [pc, #164]	; (8007f4c <prvAddNewTaskToReadyList+0xbc>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007eae:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <prvAddNewTaskToReadyList+0xbc>)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007eb4:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <prvAddNewTaskToReadyList+0xb8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d110      	bne.n	8007ede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ebc:	f000 fac0 	bl	8008440 <prvInitialiseTaskLists>
 8007ec0:	e00d      	b.n	8007ede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ec2:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <prvAddNewTaskToReadyList+0xc0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d109      	bne.n	8007ede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eca:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <prvAddNewTaskToReadyList+0xbc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d802      	bhi.n	8007ede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ed8:	4a1c      	ldr	r2, [pc, #112]	; (8007f4c <prvAddNewTaskToReadyList+0xbc>)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ede:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <prvAddNewTaskToReadyList+0xc4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	4a1b      	ldr	r2, [pc, #108]	; (8007f54 <prvAddNewTaskToReadyList+0xc4>)
 8007ee6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <prvAddNewTaskToReadyList+0xc8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	4a18      	ldr	r2, [pc, #96]	; (8007f58 <prvAddNewTaskToReadyList+0xc8>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <prvAddNewTaskToReadyList+0xcc>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7ff fe18 	bl	8007b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f16:	f000 fcf9 	bl	800890c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <prvAddNewTaskToReadyList+0xc0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <prvAddNewTaskToReadyList+0xbc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d207      	bcs.n	8007f40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <prvAddNewTaskToReadyList+0xd0>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	2000071c 	.word	0x2000071c
 8007f4c:	2000061c 	.word	0x2000061c
 8007f50:	20000728 	.word	0x20000728
 8007f54:	20000738 	.word	0x20000738
 8007f58:	20000724 	.word	0x20000724
 8007f5c:	20000620 	.word	0x20000620
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d017      	beq.n	8007fa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f76:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <vTaskDelay+0x60>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <vTaskDelay+0x30>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	60bb      	str	r3, [r7, #8]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f94:	f000 f87a 	bl	800808c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fb30 	bl	8008600 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fa0:	f000 f882 	bl	80080a8 <xTaskResumeAll>
 8007fa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fac:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <vTaskDelay+0x64>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000744 	.word	0x20000744
 8007fc8:	e000ed04 	.word	0xe000ed04

08007fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fda:	463a      	mov	r2, r7
 8007fdc:	1d39      	adds	r1, r7, #4
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f9 fea2 	bl	8001d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	9202      	str	r2, [sp, #8]
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	460a      	mov	r2, r1
 8007ffa:	491e      	ldr	r1, [pc, #120]	; (8008074 <vTaskStartScheduler+0xa8>)
 8007ffc:	481e      	ldr	r0, [pc, #120]	; (8008078 <vTaskStartScheduler+0xac>)
 8007ffe:	f7ff fe26 	bl	8007c4e <xTaskCreateStatic>
 8008002:	4603      	mov	r3, r0
 8008004:	4a1d      	ldr	r2, [pc, #116]	; (800807c <vTaskStartScheduler+0xb0>)
 8008006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008008:	4b1c      	ldr	r3, [pc, #112]	; (800807c <vTaskStartScheduler+0xb0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008010:	2301      	movs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e001      	b.n	800801a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d116      	bne.n	800804e <vTaskStartScheduler+0x82>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
}
 8008032:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008034:	4b12      	ldr	r3, [pc, #72]	; (8008080 <vTaskStartScheduler+0xb4>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800803c:	4b11      	ldr	r3, [pc, #68]	; (8008084 <vTaskStartScheduler+0xb8>)
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <vTaskStartScheduler+0xbc>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008048:	f000 fbbe 	bl	80087c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800804c:	e00e      	b.n	800806c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d10a      	bne.n	800806c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vTaskStartScheduler+0x9e>
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	0800baf0 	.word	0x0800baf0
 8008078:	08008411 	.word	0x08008411
 800807c:	20000740 	.word	0x20000740
 8008080:	2000073c 	.word	0x2000073c
 8008084:	20000728 	.word	0x20000728
 8008088:	20000720 	.word	0x20000720

0800808c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <vTaskSuspendAll+0x18>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	4a03      	ldr	r2, [pc, #12]	; (80080a4 <vTaskSuspendAll+0x18>)
 8008098:	6013      	str	r3, [r2, #0]
}
 800809a:	bf00      	nop
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000744 	.word	0x20000744

080080a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080b6:	4b41      	ldr	r3, [pc, #260]	; (80081bc <xTaskResumeAll+0x114>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	603b      	str	r3, [r7, #0]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080d4:	f000 fbea 	bl	80088ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080d8:	4b38      	ldr	r3, [pc, #224]	; (80081bc <xTaskResumeAll+0x114>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	4a37      	ldr	r2, [pc, #220]	; (80081bc <xTaskResumeAll+0x114>)
 80080e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e2:	4b36      	ldr	r3, [pc, #216]	; (80081bc <xTaskResumeAll+0x114>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d161      	bne.n	80081ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080ea:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <xTaskResumeAll+0x118>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d05d      	beq.n	80081ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f2:	e02e      	b.n	8008152 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80080f4:	4b33      	ldr	r3, [pc, #204]	; (80081c4 <xTaskResumeAll+0x11c>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3318      	adds	r3, #24
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff fd7b 	bl	8007bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fd76 	bl	8007bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	2201      	movs	r2, #1
 8008116:	409a      	lsls	r2, r3
 8008118:	4b2b      	ldr	r3, [pc, #172]	; (80081c8 <xTaskResumeAll+0x120>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4313      	orrs	r3, r2
 800811e:	4a2a      	ldr	r2, [pc, #168]	; (80081c8 <xTaskResumeAll+0x120>)
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4a27      	ldr	r2, [pc, #156]	; (80081cc <xTaskResumeAll+0x124>)
 8008130:	441a      	add	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3304      	adds	r3, #4
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7ff fd04 	bl	8007b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <xTaskResumeAll+0x128>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	429a      	cmp	r2, r3
 800814a:	d302      	bcc.n	8008152 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800814c:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <xTaskResumeAll+0x12c>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008152:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <xTaskResumeAll+0x11c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1cc      	bne.n	80080f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008160:	f000 fa0c 	bl	800857c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008164:	4b1c      	ldr	r3, [pc, #112]	; (80081d8 <xTaskResumeAll+0x130>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d010      	beq.n	8008192 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008170:	f000 f836 	bl	80081e0 <xTaskIncrementTick>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <xTaskResumeAll+0x12c>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3b01      	subs	r3, #1
 8008184:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f1      	bne.n	8008170 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800818c:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <xTaskResumeAll+0x130>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <xTaskResumeAll+0x12c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <xTaskResumeAll+0x134>)
 80081a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ae:	f000 fbad 	bl	800890c <vPortExitCritical>

	return xAlreadyYielded;
 80081b2:	68bb      	ldr	r3, [r7, #8]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000744 	.word	0x20000744
 80081c0:	2000071c 	.word	0x2000071c
 80081c4:	200006dc 	.word	0x200006dc
 80081c8:	20000724 	.word	0x20000724
 80081cc:	20000620 	.word	0x20000620
 80081d0:	2000061c 	.word	0x2000061c
 80081d4:	20000730 	.word	0x20000730
 80081d8:	2000072c 	.word	0x2000072c
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ea:	4b51      	ldr	r3, [pc, #324]	; (8008330 <xTaskIncrementTick+0x150>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 808d 	bne.w	800830e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081f4:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <xTaskIncrementTick+0x154>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081fc:	4a4d      	ldr	r2, [pc, #308]	; (8008334 <xTaskIncrementTick+0x154>)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d120      	bne.n	800824a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008208:	4b4b      	ldr	r3, [pc, #300]	; (8008338 <xTaskIncrementTick+0x158>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <xTaskIncrementTick+0x48>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	603b      	str	r3, [r7, #0]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xTaskIncrementTick+0x46>
 8008228:	4b43      	ldr	r3, [pc, #268]	; (8008338 <xTaskIncrementTick+0x158>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	4b43      	ldr	r3, [pc, #268]	; (800833c <xTaskIncrementTick+0x15c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a41      	ldr	r2, [pc, #260]	; (8008338 <xTaskIncrementTick+0x158>)
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	4a41      	ldr	r2, [pc, #260]	; (800833c <xTaskIncrementTick+0x15c>)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	4b40      	ldr	r3, [pc, #256]	; (8008340 <xTaskIncrementTick+0x160>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a3f      	ldr	r2, [pc, #252]	; (8008340 <xTaskIncrementTick+0x160>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	f000 f999 	bl	800857c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800824a:	4b3e      	ldr	r3, [pc, #248]	; (8008344 <xTaskIncrementTick+0x164>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	429a      	cmp	r2, r3
 8008252:	d34d      	bcc.n	80082f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008254:	4b38      	ldr	r3, [pc, #224]	; (8008338 <xTaskIncrementTick+0x158>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <xTaskIncrementTick+0x82>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <xTaskIncrementTick+0x84>
 8008262:	2300      	movs	r3, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008268:	4b36      	ldr	r3, [pc, #216]	; (8008344 <xTaskIncrementTick+0x164>)
 800826a:	f04f 32ff 	mov.w	r2, #4294967295
 800826e:	601a      	str	r2, [r3, #0]
					break;
 8008270:	e03e      	b.n	80082f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008272:	4b31      	ldr	r3, [pc, #196]	; (8008338 <xTaskIncrementTick+0x158>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d203      	bcs.n	8008292 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800828a:	4a2e      	ldr	r2, [pc, #184]	; (8008344 <xTaskIncrementTick+0x164>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6013      	str	r3, [r2, #0]
						break;
 8008290:	e02e      	b.n	80082f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	3304      	adds	r3, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fcb0 	bl	8007bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3318      	adds	r3, #24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fca7 	bl	8007bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	2201      	movs	r2, #1
 80082b4:	409a      	lsls	r2, r3
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <xTaskIncrementTick+0x168>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	4a22      	ldr	r2, [pc, #136]	; (8008348 <xTaskIncrementTick+0x168>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4a1f      	ldr	r2, [pc, #124]	; (800834c <xTaskIncrementTick+0x16c>)
 80082ce:	441a      	add	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f7ff fc35 	bl	8007b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	4b1b      	ldr	r3, [pc, #108]	; (8008350 <xTaskIncrementTick+0x170>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d3b4      	bcc.n	8008254 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082ea:	2301      	movs	r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ee:	e7b1      	b.n	8008254 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082f0:	4b17      	ldr	r3, [pc, #92]	; (8008350 <xTaskIncrementTick+0x170>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f6:	4915      	ldr	r1, [pc, #84]	; (800834c <xTaskIncrementTick+0x16c>)
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d907      	bls.n	8008318 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e004      	b.n	8008318 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800830e:	4b11      	ldr	r3, [pc, #68]	; (8008354 <xTaskIncrementTick+0x174>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a0f      	ldr	r2, [pc, #60]	; (8008354 <xTaskIncrementTick+0x174>)
 8008316:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <xTaskIncrementTick+0x178>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008324:	697b      	ldr	r3, [r7, #20]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000744 	.word	0x20000744
 8008334:	20000720 	.word	0x20000720
 8008338:	200006d4 	.word	0x200006d4
 800833c:	200006d8 	.word	0x200006d8
 8008340:	20000734 	.word	0x20000734
 8008344:	2000073c 	.word	0x2000073c
 8008348:	20000724 	.word	0x20000724
 800834c:	20000620 	.word	0x20000620
 8008350:	2000061c 	.word	0x2000061c
 8008354:	2000072c 	.word	0x2000072c
 8008358:	20000730 	.word	0x20000730

0800835c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008362:	4b26      	ldr	r3, [pc, #152]	; (80083fc <vTaskSwitchContext+0xa0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800836a:	4b25      	ldr	r3, [pc, #148]	; (8008400 <vTaskSwitchContext+0xa4>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008370:	e03f      	b.n	80083f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008372:	4b23      	ldr	r3, [pc, #140]	; (8008400 <vTaskSwitchContext+0xa4>)
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008378:	4b22      	ldr	r3, [pc, #136]	; (8008404 <vTaskSwitchContext+0xa8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	fab3 f383 	clz	r3, r3
 8008384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	f1c3 031f 	rsb	r3, r3, #31
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	491e      	ldr	r1, [pc, #120]	; (8008408 <vTaskSwitchContext+0xac>)
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	607b      	str	r3, [r7, #4]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <vTaskSwitchContext+0x5a>
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4a11      	ldr	r2, [pc, #68]	; (8008408 <vTaskSwitchContext+0xac>)
 80083c4:	4413      	add	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	3308      	adds	r3, #8
 80083da:	429a      	cmp	r2, r3
 80083dc:	d104      	bne.n	80083e8 <vTaskSwitchContext+0x8c>
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	605a      	str	r2, [r3, #4]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	4a07      	ldr	r2, [pc, #28]	; (800840c <vTaskSwitchContext+0xb0>)
 80083f0:	6013      	str	r3, [r2, #0]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr
 80083fc:	20000744 	.word	0x20000744
 8008400:	20000730 	.word	0x20000730
 8008404:	20000724 	.word	0x20000724
 8008408:	20000620 	.word	0x20000620
 800840c:	2000061c 	.word	0x2000061c

08008410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008418:	f000 f852 	bl	80084c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <prvIdleTask+0x28>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d9f9      	bls.n	8008418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <prvIdleTask+0x2c>)
 8008426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008434:	e7f0      	b.n	8008418 <prvIdleTask+0x8>
 8008436:	bf00      	nop
 8008438:	20000620 	.word	0x20000620
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008446:	2300      	movs	r3, #0
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	e00c      	b.n	8008466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4a12      	ldr	r2, [pc, #72]	; (80084a0 <prvInitialiseTaskLists+0x60>)
 8008458:	4413      	add	r3, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fb48 	bl	8007af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3301      	adds	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b06      	cmp	r3, #6
 800846a:	d9ef      	bls.n	800844c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800846c:	480d      	ldr	r0, [pc, #52]	; (80084a4 <prvInitialiseTaskLists+0x64>)
 800846e:	f7ff fb3f 	bl	8007af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008472:	480d      	ldr	r0, [pc, #52]	; (80084a8 <prvInitialiseTaskLists+0x68>)
 8008474:	f7ff fb3c 	bl	8007af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008478:	480c      	ldr	r0, [pc, #48]	; (80084ac <prvInitialiseTaskLists+0x6c>)
 800847a:	f7ff fb39 	bl	8007af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800847e:	480c      	ldr	r0, [pc, #48]	; (80084b0 <prvInitialiseTaskLists+0x70>)
 8008480:	f7ff fb36 	bl	8007af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008484:	480b      	ldr	r0, [pc, #44]	; (80084b4 <prvInitialiseTaskLists+0x74>)
 8008486:	f7ff fb33 	bl	8007af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <prvInitialiseTaskLists+0x78>)
 800848c:	4a05      	ldr	r2, [pc, #20]	; (80084a4 <prvInitialiseTaskLists+0x64>)
 800848e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <prvInitialiseTaskLists+0x7c>)
 8008492:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <prvInitialiseTaskLists+0x68>)
 8008494:	601a      	str	r2, [r3, #0]
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000620 	.word	0x20000620
 80084a4:	200006ac 	.word	0x200006ac
 80084a8:	200006c0 	.word	0x200006c0
 80084ac:	200006dc 	.word	0x200006dc
 80084b0:	200006f0 	.word	0x200006f0
 80084b4:	20000708 	.word	0x20000708
 80084b8:	200006d4 	.word	0x200006d4
 80084bc:	200006d8 	.word	0x200006d8

080084c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084c6:	e019      	b.n	80084fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084c8:	f000 f9f0 	bl	80088ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80084cc:	4b10      	ldr	r3, [pc, #64]	; (8008510 <prvCheckTasksWaitingTermination+0x50>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff fb8f 	bl	8007bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <prvCheckTasksWaitingTermination+0x54>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <prvCheckTasksWaitingTermination+0x54>)
 80084e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <prvCheckTasksWaitingTermination+0x58>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	4a0a      	ldr	r2, [pc, #40]	; (8008518 <prvCheckTasksWaitingTermination+0x58>)
 80084f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084f2:	f000 fa0b 	bl	800890c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f810 	bl	800851c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <prvCheckTasksWaitingTermination+0x58>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e1      	bne.n	80084c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	200006f0 	.word	0x200006f0
 8008514:	2000071c 	.word	0x2000071c
 8008518:	20000704 	.word	0x20000704

0800851c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800852a:	2b00      	cmp	r3, #0
 800852c:	d108      	bne.n	8008540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fb40 	bl	8008bb8 <vPortFree>
				vPortFree( pxTCB );
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fb3d 	bl	8008bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800853e:	e018      	b.n	8008572 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008546:	2b01      	cmp	r3, #1
 8008548:	d103      	bne.n	8008552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb34 	bl	8008bb8 <vPortFree>
	}
 8008550:	e00f      	b.n	8008572 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008558:	2b02      	cmp	r3, #2
 800855a:	d00a      	beq.n	8008572 <prvDeleteTCB+0x56>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60fb      	str	r3, [r7, #12]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <prvDeleteTCB+0x54>
	}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <prvResetNextTaskUnblockTime+0x40>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <prvResetNextTaskUnblockTime+0x14>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <prvResetNextTaskUnblockTime+0x16>
 8008590:	2300      	movs	r3, #0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <prvResetNextTaskUnblockTime+0x44>)
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800859e:	e008      	b.n	80085b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <prvResetNextTaskUnblockTime+0x40>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <prvResetNextTaskUnblockTime+0x44>)
 80085b0:	6013      	str	r3, [r2, #0]
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	200006d4 	.word	0x200006d4
 80085c0:	2000073c 	.word	0x2000073c

080085c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <xTaskGetSchedulerState+0x34>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085d2:	2301      	movs	r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	e008      	b.n	80085ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <xTaskGetSchedulerState+0x38>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085e0:	2302      	movs	r3, #2
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	e001      	b.n	80085ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085ea:	687b      	ldr	r3, [r7, #4]
	}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000728 	.word	0x20000728
 80085fc:	20000744 	.word	0x20000744

08008600 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3304      	adds	r3, #4
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff faf0 	bl	8007bfc <uxListRemove>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10b      	bne.n	800863a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008622:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	2201      	movs	r2, #1
 800862a:	fa02 f303 	lsl.w	r3, r2, r3
 800862e:	43da      	mvns	r2, r3
 8008630:	4b21      	ldr	r3, [pc, #132]	; (80086b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4013      	ands	r3, r2
 8008636:	4a20      	ldr	r2, [pc, #128]	; (80086b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008638:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d10a      	bne.n	8008658 <prvAddCurrentTaskToDelayedList+0x58>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008648:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3304      	adds	r3, #4
 800864e:	4619      	mov	r1, r3
 8008650:	481a      	ldr	r0, [pc, #104]	; (80086bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008652:	f7ff fa78 	bl	8007b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008656:	e026      	b.n	80086a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008660:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d209      	bcs.n	8008684 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008670:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7ff fa85 	bl	8007b8c <vListInsert>
}
 8008682:	e010      	b.n	80086a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7ff fa7b 	bl	8007b8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	429a      	cmp	r2, r3
 800869e:	d202      	bcs.n	80086a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80086a0:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6013      	str	r3, [r2, #0]
}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000720 	.word	0x20000720
 80086b4:	2000061c 	.word	0x2000061c
 80086b8:	20000724 	.word	0x20000724
 80086bc:	20000708 	.word	0x20000708
 80086c0:	200006d8 	.word	0x200006d8
 80086c4:	200006d4 	.word	0x200006d4
 80086c8:	2000073c 	.word	0x2000073c

080086cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3b04      	subs	r3, #4
 80086dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b04      	subs	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f023 0201 	bic.w	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b04      	subs	r3, #4
 80086fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086fc:	4a08      	ldr	r2, [pc, #32]	; (8008720 <pxPortInitialiseStack+0x54>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3b14      	subs	r3, #20
 8008706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3b20      	subs	r3, #32
 8008712:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008714:	68fb      	ldr	r3, [r7, #12]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr
 8008720:	08008725 	.word	0x08008725

08008724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800872a:	2300      	movs	r3, #0
 800872c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvTaskExitError+0x54>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d00a      	beq.n	800874e <prvTaskExitError+0x2a>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	60fb      	str	r3, [r7, #12]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <prvTaskExitError+0x28>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60bb      	str	r3, [r7, #8]
}
 8008760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008762:	bf00      	nop
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0fc      	beq.n	8008764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000000c 	.word	0x2000000c
 800877c:	00000000 	.word	0x00000000

08008780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <pxCurrentTCBConst2>)
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	6808      	ldr	r0, [r1, #0]
 8008786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800878a:	f380 8809 	msr	PSP, r0
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	f04e 0e0d 	orr.w	lr, lr, #13
 800879e:	4770      	bx	lr

080087a0 <pxCurrentTCBConst2>:
 80087a0:	2000061c 	.word	0x2000061c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80087a8:	4806      	ldr	r0, [pc, #24]	; (80087c4 <prvPortStartFirstTask+0x1c>)
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f380 8808 	msr	MSP, r0
 80087b2:	b662      	cpsie	i
 80087b4:	b661      	cpsie	f
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	df00      	svc	0
 80087c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087c2:	bf00      	nop
 80087c4:	e000ed08 	.word	0xe000ed08

080087c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087ce:	4b32      	ldr	r3, [pc, #200]	; (8008898 <xPortStartScheduler+0xd0>)
 80087d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	22ff      	movs	r2, #255	; 0xff
 80087de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	4b2a      	ldr	r3, [pc, #168]	; (800889c <xPortStartScheduler+0xd4>)
 80087f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087f6:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <xPortStartScheduler+0xd8>)
 80087f8:	2207      	movs	r2, #7
 80087fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087fc:	e009      	b.n	8008812 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087fe:	4b28      	ldr	r3, [pc, #160]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3b01      	subs	r3, #1
 8008804:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008806:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	b2db      	uxtb	r3, r3
 8008810:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881a:	2b80      	cmp	r3, #128	; 0x80
 800881c:	d0ef      	beq.n	80087fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f1c3 0307 	rsb	r3, r3, #7
 8008826:	2b04      	cmp	r3, #4
 8008828:	d00a      	beq.n	8008840 <xPortStartScheduler+0x78>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60bb      	str	r3, [r7, #8]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008840:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	4a16      	ldr	r2, [pc, #88]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008848:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800884a:	4b15      	ldr	r3, [pc, #84]	; (80088a0 <xPortStartScheduler+0xd8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008852:	4a13      	ldr	r2, [pc, #76]	; (80088a0 <xPortStartScheduler+0xd8>)
 8008854:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	b2da      	uxtb	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800885e:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <xPortStartScheduler+0xdc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a10      	ldr	r2, [pc, #64]	; (80088a4 <xPortStartScheduler+0xdc>)
 8008864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800886a:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <xPortStartScheduler+0xdc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0d      	ldr	r2, [pc, #52]	; (80088a4 <xPortStartScheduler+0xdc>)
 8008870:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008874:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008876:	f000 f8b9 	bl	80089ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <xPortStartScheduler+0xe0>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008880:	f7ff ff92 	bl	80087a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008884:	f7ff fd6a 	bl	800835c <vTaskSwitchContext>
	prvTaskExitError();
 8008888:	f7ff ff4c 	bl	8008724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	e000e400 	.word	0xe000e400
 800889c:	20000748 	.word	0x20000748
 80088a0:	2000074c 	.word	0x2000074c
 80088a4:	e000ed20 	.word	0xe000ed20
 80088a8:	2000000c 	.word	0x2000000c

080088ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	607b      	str	r3, [r7, #4]
}
 80088c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088c6:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <vPortEnterCritical+0x58>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	4a0d      	ldr	r2, [pc, #52]	; (8008904 <vPortEnterCritical+0x58>)
 80088ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088d0:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <vPortEnterCritical+0x58>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10f      	bne.n	80088f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088d8:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <vPortEnterCritical+0x5c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	603b      	str	r3, [r7, #0]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortEnterCritical+0x4a>
	}
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000000c 	.word	0x2000000c
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <vPortExitCritical+0x4c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <vPortExitCritical+0x24>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	607b      	str	r3, [r7, #4]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <vPortExitCritical+0x4c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3b01      	subs	r3, #1
 8008936:	4a08      	ldr	r2, [pc, #32]	; (8008958 <vPortExitCritical+0x4c>)
 8008938:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <vPortExitCritical+0x4c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <vPortExitCritical+0x42>
 8008942:	2300      	movs	r3, #0
 8008944:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800894c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr
 8008958:	2000000c 	.word	0x2000000c
 800895c:	00000000 	.word	0x00000000

08008960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008960:	f3ef 8009 	mrs	r0, PSP
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <pxCurrentTCBConst>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008970:	6010      	str	r0, [r2, #0]
 8008972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800897a:	f380 8811 	msr	BASEPRI, r0
 800897e:	f7ff fced 	bl	800835c <vTaskSwitchContext>
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8811 	msr	BASEPRI, r0
 800898a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	6808      	ldr	r0, [r1, #0]
 8008992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008996:	f380 8809 	msr	PSP, r0
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	4770      	bx	lr

080089a0 <pxCurrentTCBConst>:
 80089a0:	2000061c 	.word	0x2000061c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop

080089a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089c2:	f7ff fc0d 	bl	80081e0 <xTaskIncrementTick>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <xPortSysTickHandler+0x40>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f383 8811 	msr	BASEPRI, r3
}
 80089de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <vPortSetupTimerInterrupt+0x30>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f6:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <vPortSetupTimerInterrupt+0x38>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a09      	ldr	r2, [pc, #36]	; (8008a28 <vPortSetupTimerInterrupt+0x3c>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <vPortSetupTimerInterrupt+0x40>)
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a0e:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <vPortSetupTimerInterrupt+0x30>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	e000e010 	.word	0xe000e010
 8008a20:	e000e018 	.word	0xe000e018
 8008a24:	20000000 	.word	0x20000000
 8008a28:	10624dd3 	.word	0x10624dd3
 8008a2c:	e000e014 	.word	0xe000e014

08008a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a3c:	f7ff fb26 	bl	800808c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a40:	4b58      	ldr	r3, [pc, #352]	; (8008ba4 <pvPortMalloc+0x174>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a48:	f000 f910 	bl	8008c6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a4c:	4b56      	ldr	r3, [pc, #344]	; (8008ba8 <pvPortMalloc+0x178>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4013      	ands	r3, r2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 808e 	bne.w	8008b76 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01d      	beq.n	8008a9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a60:	2208      	movs	r2, #8
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4413      	add	r3, r2
 8008a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d014      	beq.n	8008a9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f023 0307 	bic.w	r3, r3, #7
 8008a78:	3308      	adds	r3, #8
 8008a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <pvPortMalloc+0x6c>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	617b      	str	r3, [r7, #20]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d069      	beq.n	8008b76 <pvPortMalloc+0x146>
 8008aa2:	4b42      	ldr	r3, [pc, #264]	; (8008bac <pvPortMalloc+0x17c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d864      	bhi.n	8008b76 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aac:	4b40      	ldr	r3, [pc, #256]	; (8008bb0 <pvPortMalloc+0x180>)
 8008aae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ab0:	4b3f      	ldr	r3, [pc, #252]	; (8008bb0 <pvPortMalloc+0x180>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ab6:	e004      	b.n	8008ac2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d903      	bls.n	8008ad4 <pvPortMalloc+0xa4>
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f1      	bne.n	8008ab8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ad4:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <pvPortMalloc+0x174>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d04b      	beq.n	8008b76 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	4413      	add	r3, r2
 8008ae6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	2308      	movs	r3, #8
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d91f      	bls.n	8008b40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <pvPortMalloc+0xf8>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	613b      	str	r3, [r7, #16]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b3a:	69b8      	ldr	r0, [r7, #24]
 8008b3c:	f000 f8f8 	bl	8008d30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <pvPortMalloc+0x17c>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <pvPortMalloc+0x17c>)
 8008b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <pvPortMalloc+0x17c>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <pvPortMalloc+0x184>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d203      	bcs.n	8008b62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <pvPortMalloc+0x17c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <pvPortMalloc+0x184>)
 8008b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <pvPortMalloc+0x178>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b76:	f7ff fa97 	bl	80080a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <pvPortMalloc+0x16a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <pvPortMalloc+0x168>
	return pvReturn;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3728      	adds	r7, #40	; 0x28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20001358 	.word	0x20001358
 8008ba8:	20001364 	.word	0x20001364
 8008bac:	2000135c 	.word	0x2000135c
 8008bb0:	20001350 	.word	0x20001350
 8008bb4:	20001360 	.word	0x20001360

08008bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d048      	beq.n	8008c5c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bca:	2308      	movs	r3, #8
 8008bcc:	425b      	negs	r3, r3
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <vPortFree+0xac>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <vPortFree+0x44>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <vPortFree+0x62>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	60bb      	str	r3, [r7, #8]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <vPortFree+0xac>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d019      	beq.n	8008c5c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d115      	bne.n	8008c5c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <vPortFree+0xac>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	43db      	mvns	r3, r3
 8008c3a:	401a      	ands	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c40:	f7ff fa24 	bl	800808c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <vPortFree+0xb0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4a06      	ldr	r2, [pc, #24]	; (8008c68 <vPortFree+0xb0>)
 8008c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c52:	6938      	ldr	r0, [r7, #16]
 8008c54:	f000 f86c 	bl	8008d30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c58:	f7ff fa26 	bl	80080a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c5c:	bf00      	nop
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20001364 	.word	0x20001364
 8008c68:	2000135c 	.word	0x2000135c

08008c6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c78:	4b27      	ldr	r3, [pc, #156]	; (8008d18 <prvHeapInit+0xac>)
 8008c7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0307 	bic.w	r3, r3, #7
 8008c92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <prvHeapInit+0xac>)
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <prvHeapInit+0xb0>)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008caa:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <prvHeapInit+0xb0>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cb8:	2208      	movs	r2, #8
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0307 	bic.w	r3, r3, #7
 8008cc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <prvHeapInit+0xb4>)
 8008ccc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cce:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <prvHeapInit+0xb4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cd6:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <prvHeapInit+0xb4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cec:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <prvHeapInit+0xb4>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4a0a      	ldr	r2, [pc, #40]	; (8008d24 <prvHeapInit+0xb8>)
 8008cfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <prvHeapInit+0xbc>)
 8008d02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <prvHeapInit+0xc0>)
 8008d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d0a:	601a      	str	r2, [r3, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000750 	.word	0x20000750
 8008d1c:	20001350 	.word	0x20001350
 8008d20:	20001358 	.word	0x20001358
 8008d24:	20001360 	.word	0x20001360
 8008d28:	2000135c 	.word	0x2000135c
 8008d2c:	20001364 	.word	0x20001364

08008d30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d38:	4b27      	ldr	r3, [pc, #156]	; (8008dd8 <prvInsertBlockIntoFreeList+0xa8>)
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e002      	b.n	8008d44 <prvInsertBlockIntoFreeList+0x14>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d8f7      	bhi.n	8008d3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4413      	add	r3, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d108      	bne.n	8008d72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	441a      	add	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d118      	bne.n	8008db8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <prvInsertBlockIntoFreeList+0xac>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d00d      	beq.n	8008dae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	441a      	add	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	e008      	b.n	8008dc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <prvInsertBlockIntoFreeList+0xac>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e003      	b.n	8008dc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d002      	beq.n	8008dce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr
 8008dd8:	20001350 	.word	0x20001350
 8008ddc:	20001358 	.word	0x20001358

08008de0 <__errno>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	; (8008de8 <__errno+0x8>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000010 	.word	0x20000010

08008dec <__libc_init_array>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	2600      	movs	r6, #0
 8008df0:	4d0c      	ldr	r5, [pc, #48]	; (8008e24 <__libc_init_array+0x38>)
 8008df2:	4c0d      	ldr	r4, [pc, #52]	; (8008e28 <__libc_init_array+0x3c>)
 8008df4:	1b64      	subs	r4, r4, r5
 8008df6:	10a4      	asrs	r4, r4, #2
 8008df8:	42a6      	cmp	r6, r4
 8008dfa:	d109      	bne.n	8008e10 <__libc_init_array+0x24>
 8008dfc:	f002 fdbc 	bl	800b978 <_init>
 8008e00:	2600      	movs	r6, #0
 8008e02:	4d0a      	ldr	r5, [pc, #40]	; (8008e2c <__libc_init_array+0x40>)
 8008e04:	4c0a      	ldr	r4, [pc, #40]	; (8008e30 <__libc_init_array+0x44>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	42a6      	cmp	r6, r4
 8008e0c:	d105      	bne.n	8008e1a <__libc_init_array+0x2e>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e14:	4798      	blx	r3
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7ee      	b.n	8008df8 <__libc_init_array+0xc>
 8008e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1e:	4798      	blx	r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	e7f2      	b.n	8008e0a <__libc_init_array+0x1e>
 8008e24:	0800beec 	.word	0x0800beec
 8008e28:	0800beec 	.word	0x0800beec
 8008e2c:	0800beec 	.word	0x0800beec
 8008e30:	0800bef0 	.word	0x0800bef0

08008e34 <malloc>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <malloc+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f000 b881 	b.w	8008f40 <_malloc_r>
 8008e3e:	bf00      	nop
 8008e40:	20000010 	.word	0x20000010

08008e44 <memcpy>:
 8008e44:	440a      	add	r2, r1
 8008e46:	4291      	cmp	r1, r2
 8008e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e4c:	d100      	bne.n	8008e50 <memcpy+0xc>
 8008e4e:	4770      	bx	lr
 8008e50:	b510      	push	{r4, lr}
 8008e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e56:	4291      	cmp	r1, r2
 8008e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5c:	d1f9      	bne.n	8008e52 <memcpy+0xe>
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <memset>:
 8008e60:	4603      	mov	r3, r0
 8008e62:	4402      	add	r2, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <_free_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4605      	mov	r5, r0
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d040      	beq.n	8008efa <_free_r+0x8a>
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f0c      	subs	r4, r1, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	18e4      	addlt	r4, r4, r3
 8008e84:	f001 ff38 	bl	800acf8 <__malloc_lock>
 8008e88:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <_free_r+0x8c>)
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	b933      	cbnz	r3, 8008e9c <_free_r+0x2c>
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6014      	str	r4, [r2, #0]
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e98:	f001 bf34 	b.w	800ad04 <__malloc_unlock>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d908      	bls.n	8008eb2 <_free_r+0x42>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	1821      	adds	r1, r4, r0
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	e7ed      	b.n	8008e8e <_free_r+0x1e>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x4c>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x42>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1850      	adds	r0, r2, r1
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x6c>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	1850      	adds	r0, r2, r1
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1e0      	bne.n	8008e92 <_free_r+0x22>
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4401      	add	r1, r0
 8008ed6:	6011      	str	r1, [r2, #0]
 8008ed8:	6053      	str	r3, [r2, #4]
 8008eda:	e7da      	b.n	8008e92 <_free_r+0x22>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x74>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	e7d6      	b.n	8008e92 <_free_r+0x22>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1809      	addeq	r1, r1, r0
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	6063      	str	r3, [r4, #4]
 8008ef6:	6054      	str	r4, [r2, #4]
 8008ef8:	e7cb      	b.n	8008e92 <_free_r+0x22>
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20001368 	.word	0x20001368

08008f00 <sbrk_aligned>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	4e0e      	ldr	r6, [pc, #56]	; (8008f3c <sbrk_aligned+0x3c>)
 8008f04:	460c      	mov	r4, r1
 8008f06:	6831      	ldr	r1, [r6, #0]
 8008f08:	4605      	mov	r5, r0
 8008f0a:	b911      	cbnz	r1, 8008f12 <sbrk_aligned+0x12>
 8008f0c:	f000 fd7a 	bl	8009a04 <_sbrk_r>
 8008f10:	6030      	str	r0, [r6, #0]
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 fd75 	bl	8009a04 <_sbrk_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d00a      	beq.n	8008f34 <sbrk_aligned+0x34>
 8008f1e:	1cc4      	adds	r4, r0, #3
 8008f20:	f024 0403 	bic.w	r4, r4, #3
 8008f24:	42a0      	cmp	r0, r4
 8008f26:	d007      	beq.n	8008f38 <sbrk_aligned+0x38>
 8008f28:	1a21      	subs	r1, r4, r0
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fd6a 	bl	8009a04 <_sbrk_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d101      	bne.n	8008f38 <sbrk_aligned+0x38>
 8008f34:	f04f 34ff 	mov.w	r4, #4294967295
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	2000136c 	.word	0x2000136c

08008f40 <_malloc_r>:
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	1ccd      	adds	r5, r1, #3
 8008f46:	f025 0503 	bic.w	r5, r5, #3
 8008f4a:	3508      	adds	r5, #8
 8008f4c:	2d0c      	cmp	r5, #12
 8008f4e:	bf38      	it	cc
 8008f50:	250c      	movcc	r5, #12
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	4607      	mov	r7, r0
 8008f56:	db01      	blt.n	8008f5c <_malloc_r+0x1c>
 8008f58:	42a9      	cmp	r1, r5
 8008f5a:	d905      	bls.n	8008f68 <_malloc_r+0x28>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	2600      	movs	r6, #0
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	4630      	mov	r0, r6
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	4e2e      	ldr	r6, [pc, #184]	; (8009024 <_malloc_r+0xe4>)
 8008f6a:	f001 fec5 	bl	800acf8 <__malloc_lock>
 8008f6e:	6833      	ldr	r3, [r6, #0]
 8008f70:	461c      	mov	r4, r3
 8008f72:	bb34      	cbnz	r4, 8008fc2 <_malloc_r+0x82>
 8008f74:	4629      	mov	r1, r5
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7ff ffc2 	bl	8008f00 <sbrk_aligned>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	4604      	mov	r4, r0
 8008f80:	d14d      	bne.n	800901e <_malloc_r+0xde>
 8008f82:	6834      	ldr	r4, [r6, #0]
 8008f84:	4626      	mov	r6, r4
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	d140      	bne.n	800900c <_malloc_r+0xcc>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4638      	mov	r0, r7
 8008f90:	eb04 0803 	add.w	r8, r4, r3
 8008f94:	f000 fd36 	bl	8009a04 <_sbrk_r>
 8008f98:	4580      	cmp	r8, r0
 8008f9a:	d13a      	bne.n	8009012 <_malloc_r+0xd2>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	3503      	adds	r5, #3
 8008fa0:	1a6d      	subs	r5, r5, r1
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	4638      	mov	r0, r7
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7ff ffa5 	bl	8008f00 <sbrk_aligned>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d02b      	beq.n	8009012 <_malloc_r+0xd2>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	442b      	add	r3, r5
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	e00e      	b.n	8008fe0 <_malloc_r+0xa0>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	1b52      	subs	r2, r2, r5
 8008fc6:	d41e      	bmi.n	8009006 <_malloc_r+0xc6>
 8008fc8:	2a0b      	cmp	r2, #11
 8008fca:	d916      	bls.n	8008ffa <_malloc_r+0xba>
 8008fcc:	1961      	adds	r1, r4, r5
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	6025      	str	r5, [r4, #0]
 8008fd2:	bf18      	it	ne
 8008fd4:	6059      	strne	r1, [r3, #4]
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	bf08      	it	eq
 8008fda:	6031      	streq	r1, [r6, #0]
 8008fdc:	5162      	str	r2, [r4, r5]
 8008fde:	604b      	str	r3, [r1, #4]
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f104 060b 	add.w	r6, r4, #11
 8008fe6:	f001 fe8d 	bl	800ad04 <__malloc_unlock>
 8008fea:	f026 0607 	bic.w	r6, r6, #7
 8008fee:	1d23      	adds	r3, r4, #4
 8008ff0:	1af2      	subs	r2, r6, r3
 8008ff2:	d0b6      	beq.n	8008f62 <_malloc_r+0x22>
 8008ff4:	1b9b      	subs	r3, r3, r6
 8008ff6:	50a3      	str	r3, [r4, r2]
 8008ff8:	e7b3      	b.n	8008f62 <_malloc_r+0x22>
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	bf0c      	ite	eq
 8009000:	6032      	streq	r2, [r6, #0]
 8009002:	605a      	strne	r2, [r3, #4]
 8009004:	e7ec      	b.n	8008fe0 <_malloc_r+0xa0>
 8009006:	4623      	mov	r3, r4
 8009008:	6864      	ldr	r4, [r4, #4]
 800900a:	e7b2      	b.n	8008f72 <_malloc_r+0x32>
 800900c:	4634      	mov	r4, r6
 800900e:	6876      	ldr	r6, [r6, #4]
 8009010:	e7b9      	b.n	8008f86 <_malloc_r+0x46>
 8009012:	230c      	movs	r3, #12
 8009014:	4638      	mov	r0, r7
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	f001 fe74 	bl	800ad04 <__malloc_unlock>
 800901c:	e7a1      	b.n	8008f62 <_malloc_r+0x22>
 800901e:	6025      	str	r5, [r4, #0]
 8009020:	e7de      	b.n	8008fe0 <_malloc_r+0xa0>
 8009022:	bf00      	nop
 8009024:	20001368 	.word	0x20001368

08009028 <__cvt>:
 8009028:	2b00      	cmp	r3, #0
 800902a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902e:	461f      	mov	r7, r3
 8009030:	bfbb      	ittet	lt
 8009032:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009036:	461f      	movlt	r7, r3
 8009038:	2300      	movge	r3, #0
 800903a:	232d      	movlt	r3, #45	; 0x2d
 800903c:	b088      	sub	sp, #32
 800903e:	4614      	mov	r4, r2
 8009040:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009042:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009044:	7013      	strb	r3, [r2, #0]
 8009046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009048:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800904c:	f023 0820 	bic.w	r8, r3, #32
 8009050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009054:	d005      	beq.n	8009062 <__cvt+0x3a>
 8009056:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800905a:	d100      	bne.n	800905e <__cvt+0x36>
 800905c:	3501      	adds	r5, #1
 800905e:	2302      	movs	r3, #2
 8009060:	e000      	b.n	8009064 <__cvt+0x3c>
 8009062:	2303      	movs	r3, #3
 8009064:	aa07      	add	r2, sp, #28
 8009066:	9204      	str	r2, [sp, #16]
 8009068:	aa06      	add	r2, sp, #24
 800906a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800906e:	e9cd 3500 	strd	r3, r5, [sp]
 8009072:	4622      	mov	r2, r4
 8009074:	463b      	mov	r3, r7
 8009076:	f000 fe23 	bl	8009cc0 <_dtoa_r>
 800907a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800907e:	4606      	mov	r6, r0
 8009080:	d102      	bne.n	8009088 <__cvt+0x60>
 8009082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009084:	07db      	lsls	r3, r3, #31
 8009086:	d522      	bpl.n	80090ce <__cvt+0xa6>
 8009088:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800908c:	eb06 0905 	add.w	r9, r6, r5
 8009090:	d110      	bne.n	80090b4 <__cvt+0x8c>
 8009092:	7833      	ldrb	r3, [r6, #0]
 8009094:	2b30      	cmp	r3, #48	; 0x30
 8009096:	d10a      	bne.n	80090ae <__cvt+0x86>
 8009098:	2200      	movs	r2, #0
 800909a:	2300      	movs	r3, #0
 800909c:	4620      	mov	r0, r4
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80090a4:	b918      	cbnz	r0, 80090ae <__cvt+0x86>
 80090a6:	f1c5 0501 	rsb	r5, r5, #1
 80090aa:	f8ca 5000 	str.w	r5, [sl]
 80090ae:	f8da 3000 	ldr.w	r3, [sl]
 80090b2:	4499      	add	r9, r3
 80090b4:	2200      	movs	r2, #0
 80090b6:	2300      	movs	r3, #0
 80090b8:	4620      	mov	r0, r4
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80090c0:	b108      	cbz	r0, 80090c6 <__cvt+0x9e>
 80090c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80090c6:	2230      	movs	r2, #48	; 0x30
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	454b      	cmp	r3, r9
 80090cc:	d307      	bcc.n	80090de <__cvt+0xb6>
 80090ce:	4630      	mov	r0, r6
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80090d4:	1b9b      	subs	r3, r3, r6
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	b008      	add	sp, #32
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	1c59      	adds	r1, r3, #1
 80090e0:	9107      	str	r1, [sp, #28]
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e7f0      	b.n	80090c8 <__cvt+0xa0>

080090e6 <__exponent>:
 80090e6:	4603      	mov	r3, r0
 80090e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ea:	2900      	cmp	r1, #0
 80090ec:	f803 2b02 	strb.w	r2, [r3], #2
 80090f0:	bfb6      	itet	lt
 80090f2:	222d      	movlt	r2, #45	; 0x2d
 80090f4:	222b      	movge	r2, #43	; 0x2b
 80090f6:	4249      	neglt	r1, r1
 80090f8:	2909      	cmp	r1, #9
 80090fa:	7042      	strb	r2, [r0, #1]
 80090fc:	dd2b      	ble.n	8009156 <__exponent+0x70>
 80090fe:	f10d 0407 	add.w	r4, sp, #7
 8009102:	46a4      	mov	ip, r4
 8009104:	270a      	movs	r7, #10
 8009106:	fb91 f6f7 	sdiv	r6, r1, r7
 800910a:	460a      	mov	r2, r1
 800910c:	46a6      	mov	lr, r4
 800910e:	fb07 1516 	mls	r5, r7, r6, r1
 8009112:	2a63      	cmp	r2, #99	; 0x63
 8009114:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009118:	4631      	mov	r1, r6
 800911a:	f104 34ff 	add.w	r4, r4, #4294967295
 800911e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009122:	dcf0      	bgt.n	8009106 <__exponent+0x20>
 8009124:	3130      	adds	r1, #48	; 0x30
 8009126:	f1ae 0502 	sub.w	r5, lr, #2
 800912a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800912e:	4629      	mov	r1, r5
 8009130:	1c44      	adds	r4, r0, #1
 8009132:	4561      	cmp	r1, ip
 8009134:	d30a      	bcc.n	800914c <__exponent+0x66>
 8009136:	f10d 0209 	add.w	r2, sp, #9
 800913a:	eba2 020e 	sub.w	r2, r2, lr
 800913e:	4565      	cmp	r5, ip
 8009140:	bf88      	it	hi
 8009142:	2200      	movhi	r2, #0
 8009144:	4413      	add	r3, r2
 8009146:	1a18      	subs	r0, r3, r0
 8009148:	b003      	add	sp, #12
 800914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009150:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009154:	e7ed      	b.n	8009132 <__exponent+0x4c>
 8009156:	2330      	movs	r3, #48	; 0x30
 8009158:	3130      	adds	r1, #48	; 0x30
 800915a:	7083      	strb	r3, [r0, #2]
 800915c:	70c1      	strb	r1, [r0, #3]
 800915e:	1d03      	adds	r3, r0, #4
 8009160:	e7f1      	b.n	8009146 <__exponent+0x60>
	...

08009164 <_printf_float>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	b091      	sub	sp, #68	; 0x44
 800916a:	460c      	mov	r4, r1
 800916c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009170:	4616      	mov	r6, r2
 8009172:	461f      	mov	r7, r3
 8009174:	4605      	mov	r5, r0
 8009176:	f001 fd45 	bl	800ac04 <_localeconv_r>
 800917a:	6803      	ldr	r3, [r0, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	9309      	str	r3, [sp, #36]	; 0x24
 8009180:	f7f6 ffe6 	bl	8000150 <strlen>
 8009184:	2300      	movs	r3, #0
 8009186:	930e      	str	r3, [sp, #56]	; 0x38
 8009188:	f8d8 3000 	ldr.w	r3, [r8]
 800918c:	900a      	str	r0, [sp, #40]	; 0x28
 800918e:	3307      	adds	r3, #7
 8009190:	f023 0307 	bic.w	r3, r3, #7
 8009194:	f103 0208 	add.w	r2, r3, #8
 8009198:	f894 9018 	ldrb.w	r9, [r4, #24]
 800919c:	f8d4 b000 	ldr.w	fp, [r4]
 80091a0:	f8c8 2000 	str.w	r2, [r8]
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80091b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80091b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	4640      	mov	r0, r8
 80091bc:	4b9c      	ldr	r3, [pc, #624]	; (8009430 <_printf_float+0x2cc>)
 80091be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091c0:	f7f7 fc24 	bl	8000a0c <__aeabi_dcmpun>
 80091c4:	bb70      	cbnz	r0, 8009224 <_printf_float+0xc0>
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ca:	4640      	mov	r0, r8
 80091cc:	4b98      	ldr	r3, [pc, #608]	; (8009430 <_printf_float+0x2cc>)
 80091ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091d0:	f7f7 fbfe 	bl	80009d0 <__aeabi_dcmple>
 80091d4:	bb30      	cbnz	r0, 8009224 <_printf_float+0xc0>
 80091d6:	2200      	movs	r2, #0
 80091d8:	2300      	movs	r3, #0
 80091da:	4640      	mov	r0, r8
 80091dc:	4651      	mov	r1, sl
 80091de:	f7f7 fbed 	bl	80009bc <__aeabi_dcmplt>
 80091e2:	b110      	cbz	r0, 80091ea <_printf_float+0x86>
 80091e4:	232d      	movs	r3, #45	; 0x2d
 80091e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ea:	4b92      	ldr	r3, [pc, #584]	; (8009434 <_printf_float+0x2d0>)
 80091ec:	4892      	ldr	r0, [pc, #584]	; (8009438 <_printf_float+0x2d4>)
 80091ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80091f2:	bf94      	ite	ls
 80091f4:	4698      	movls	r8, r3
 80091f6:	4680      	movhi	r8, r0
 80091f8:	2303      	movs	r3, #3
 80091fa:	f04f 0a00 	mov.w	sl, #0
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	f02b 0304 	bic.w	r3, fp, #4
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	4633      	mov	r3, r6
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	9700      	str	r7, [sp, #0]
 800920e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009210:	f000 f9d4 	bl	80095bc <_printf_common>
 8009214:	3001      	adds	r0, #1
 8009216:	f040 8090 	bne.w	800933a <_printf_float+0x1d6>
 800921a:	f04f 30ff 	mov.w	r0, #4294967295
 800921e:	b011      	add	sp, #68	; 0x44
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	4642      	mov	r2, r8
 8009226:	4653      	mov	r3, sl
 8009228:	4640      	mov	r0, r8
 800922a:	4651      	mov	r1, sl
 800922c:	f7f7 fbee 	bl	8000a0c <__aeabi_dcmpun>
 8009230:	b148      	cbz	r0, 8009246 <_printf_float+0xe2>
 8009232:	f1ba 0f00 	cmp.w	sl, #0
 8009236:	bfb8      	it	lt
 8009238:	232d      	movlt	r3, #45	; 0x2d
 800923a:	4880      	ldr	r0, [pc, #512]	; (800943c <_printf_float+0x2d8>)
 800923c:	bfb8      	it	lt
 800923e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009242:	4b7f      	ldr	r3, [pc, #508]	; (8009440 <_printf_float+0x2dc>)
 8009244:	e7d3      	b.n	80091ee <_printf_float+0x8a>
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	d142      	bne.n	80092d6 <_printf_float+0x172>
 8009250:	2306      	movs	r3, #6
 8009252:	6063      	str	r3, [r4, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	9206      	str	r2, [sp, #24]
 8009258:	aa0e      	add	r2, sp, #56	; 0x38
 800925a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800925e:	aa0d      	add	r2, sp, #52	; 0x34
 8009260:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009264:	9203      	str	r2, [sp, #12]
 8009266:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800926a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	4642      	mov	r2, r8
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	4628      	mov	r0, r5
 8009278:	4653      	mov	r3, sl
 800927a:	910b      	str	r1, [sp, #44]	; 0x2c
 800927c:	f7ff fed4 	bl	8009028 <__cvt>
 8009280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009282:	4680      	mov	r8, r0
 8009284:	2947      	cmp	r1, #71	; 0x47
 8009286:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009288:	d108      	bne.n	800929c <_printf_float+0x138>
 800928a:	1cc8      	adds	r0, r1, #3
 800928c:	db02      	blt.n	8009294 <_printf_float+0x130>
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	4299      	cmp	r1, r3
 8009292:	dd40      	ble.n	8009316 <_printf_float+0x1b2>
 8009294:	f1a9 0902 	sub.w	r9, r9, #2
 8009298:	fa5f f989 	uxtb.w	r9, r9
 800929c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80092a0:	d81f      	bhi.n	80092e2 <_printf_float+0x17e>
 80092a2:	464a      	mov	r2, r9
 80092a4:	3901      	subs	r1, #1
 80092a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092aa:	910d      	str	r1, [sp, #52]	; 0x34
 80092ac:	f7ff ff1b 	bl	80090e6 <__exponent>
 80092b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b2:	4682      	mov	sl, r0
 80092b4:	1813      	adds	r3, r2, r0
 80092b6:	2a01      	cmp	r2, #1
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	dc02      	bgt.n	80092c2 <_printf_float+0x15e>
 80092bc:	6822      	ldr	r2, [r4, #0]
 80092be:	07d2      	lsls	r2, r2, #31
 80092c0:	d501      	bpl.n	80092c6 <_printf_float+0x162>
 80092c2:	3301      	adds	r3, #1
 80092c4:	6123      	str	r3, [r4, #16]
 80092c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d09b      	beq.n	8009206 <_printf_float+0xa2>
 80092ce:	232d      	movs	r3, #45	; 0x2d
 80092d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d4:	e797      	b.n	8009206 <_printf_float+0xa2>
 80092d6:	2947      	cmp	r1, #71	; 0x47
 80092d8:	d1bc      	bne.n	8009254 <_printf_float+0xf0>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1ba      	bne.n	8009254 <_printf_float+0xf0>
 80092de:	2301      	movs	r3, #1
 80092e0:	e7b7      	b.n	8009252 <_printf_float+0xee>
 80092e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80092e6:	d118      	bne.n	800931a <_printf_float+0x1b6>
 80092e8:	2900      	cmp	r1, #0
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	dd0b      	ble.n	8009306 <_printf_float+0x1a2>
 80092ee:	6121      	str	r1, [r4, #16]
 80092f0:	b913      	cbnz	r3, 80092f8 <_printf_float+0x194>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	07d0      	lsls	r0, r2, #31
 80092f6:	d502      	bpl.n	80092fe <_printf_float+0x19a>
 80092f8:	3301      	adds	r3, #1
 80092fa:	440b      	add	r3, r1
 80092fc:	6123      	str	r3, [r4, #16]
 80092fe:	f04f 0a00 	mov.w	sl, #0
 8009302:	65a1      	str	r1, [r4, #88]	; 0x58
 8009304:	e7df      	b.n	80092c6 <_printf_float+0x162>
 8009306:	b913      	cbnz	r3, 800930e <_printf_float+0x1aa>
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	07d2      	lsls	r2, r2, #31
 800930c:	d501      	bpl.n	8009312 <_printf_float+0x1ae>
 800930e:	3302      	adds	r3, #2
 8009310:	e7f4      	b.n	80092fc <_printf_float+0x198>
 8009312:	2301      	movs	r3, #1
 8009314:	e7f2      	b.n	80092fc <_printf_float+0x198>
 8009316:	f04f 0967 	mov.w	r9, #103	; 0x67
 800931a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800931c:	4299      	cmp	r1, r3
 800931e:	db05      	blt.n	800932c <_printf_float+0x1c8>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	6121      	str	r1, [r4, #16]
 8009324:	07d8      	lsls	r0, r3, #31
 8009326:	d5ea      	bpl.n	80092fe <_printf_float+0x19a>
 8009328:	1c4b      	adds	r3, r1, #1
 800932a:	e7e7      	b.n	80092fc <_printf_float+0x198>
 800932c:	2900      	cmp	r1, #0
 800932e:	bfcc      	ite	gt
 8009330:	2201      	movgt	r2, #1
 8009332:	f1c1 0202 	rsble	r2, r1, #2
 8009336:	4413      	add	r3, r2
 8009338:	e7e0      	b.n	80092fc <_printf_float+0x198>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	055a      	lsls	r2, r3, #21
 800933e:	d407      	bmi.n	8009350 <_printf_float+0x1ec>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	4642      	mov	r2, r8
 8009344:	4631      	mov	r1, r6
 8009346:	4628      	mov	r0, r5
 8009348:	47b8      	blx	r7
 800934a:	3001      	adds	r0, #1
 800934c:	d12b      	bne.n	80093a6 <_printf_float+0x242>
 800934e:	e764      	b.n	800921a <_printf_float+0xb6>
 8009350:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009354:	f240 80dd 	bls.w	8009512 <_printf_float+0x3ae>
 8009358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800935c:	2200      	movs	r2, #0
 800935e:	2300      	movs	r3, #0
 8009360:	f7f7 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8009364:	2800      	cmp	r0, #0
 8009366:	d033      	beq.n	80093d0 <_printf_float+0x26c>
 8009368:	2301      	movs	r3, #1
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	4a35      	ldr	r2, [pc, #212]	; (8009444 <_printf_float+0x2e0>)
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af51 	beq.w	800921a <_printf_float+0xb6>
 8009378:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800937c:	429a      	cmp	r2, r3
 800937e:	db02      	blt.n	8009386 <_printf_float+0x222>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	07d8      	lsls	r0, r3, #31
 8009384:	d50f      	bpl.n	80093a6 <_printf_float+0x242>
 8009386:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f af42 	beq.w	800921a <_printf_float+0xb6>
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	f104 091a 	add.w	r9, r4, #26
 800939e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a0:	3b01      	subs	r3, #1
 80093a2:	4543      	cmp	r3, r8
 80093a4:	dc09      	bgt.n	80093ba <_printf_float+0x256>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	079b      	lsls	r3, r3, #30
 80093aa:	f100 8102 	bmi.w	80095b2 <_printf_float+0x44e>
 80093ae:	68e0      	ldr	r0, [r4, #12]
 80093b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b2:	4298      	cmp	r0, r3
 80093b4:	bfb8      	it	lt
 80093b6:	4618      	movlt	r0, r3
 80093b8:	e731      	b.n	800921e <_printf_float+0xba>
 80093ba:	2301      	movs	r3, #1
 80093bc:	464a      	mov	r2, r9
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f af28 	beq.w	800921a <_printf_float+0xb6>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	e7e6      	b.n	800939e <_printf_float+0x23a>
 80093d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dc38      	bgt.n	8009448 <_printf_float+0x2e4>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	4a19      	ldr	r2, [pc, #100]	; (8009444 <_printf_float+0x2e0>)
 80093de:	47b8      	blx	r7
 80093e0:	3001      	adds	r0, #1
 80093e2:	f43f af1a 	beq.w	800921a <_printf_float+0xb6>
 80093e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80093ea:	4313      	orrs	r3, r2
 80093ec:	d102      	bne.n	80093f4 <_printf_float+0x290>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	07d9      	lsls	r1, r3, #31
 80093f2:	d5d8      	bpl.n	80093a6 <_printf_float+0x242>
 80093f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	f43f af0b 	beq.w	800921a <_printf_float+0xb6>
 8009404:	f04f 0900 	mov.w	r9, #0
 8009408:	f104 0a1a 	add.w	sl, r4, #26
 800940c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940e:	425b      	negs	r3, r3
 8009410:	454b      	cmp	r3, r9
 8009412:	dc01      	bgt.n	8009418 <_printf_float+0x2b4>
 8009414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009416:	e794      	b.n	8009342 <_printf_float+0x1de>
 8009418:	2301      	movs	r3, #1
 800941a:	4652      	mov	r2, sl
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	47b8      	blx	r7
 8009422:	3001      	adds	r0, #1
 8009424:	f43f aef9 	beq.w	800921a <_printf_float+0xb6>
 8009428:	f109 0901 	add.w	r9, r9, #1
 800942c:	e7ee      	b.n	800940c <_printf_float+0x2a8>
 800942e:	bf00      	nop
 8009430:	7fefffff 	.word	0x7fefffff
 8009434:	0800bb14 	.word	0x0800bb14
 8009438:	0800bb18 	.word	0x0800bb18
 800943c:	0800bb20 	.word	0x0800bb20
 8009440:	0800bb1c 	.word	0x0800bb1c
 8009444:	0800bb24 	.word	0x0800bb24
 8009448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800944a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800944c:	429a      	cmp	r2, r3
 800944e:	bfa8      	it	ge
 8009450:	461a      	movge	r2, r3
 8009452:	2a00      	cmp	r2, #0
 8009454:	4691      	mov	r9, r2
 8009456:	dc37      	bgt.n	80094c8 <_printf_float+0x364>
 8009458:	f04f 0b00 	mov.w	fp, #0
 800945c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009460:	f104 021a 	add.w	r2, r4, #26
 8009464:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009468:	ebaa 0309 	sub.w	r3, sl, r9
 800946c:	455b      	cmp	r3, fp
 800946e:	dc33      	bgt.n	80094d8 <_printf_float+0x374>
 8009470:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009474:	429a      	cmp	r2, r3
 8009476:	db3b      	blt.n	80094f0 <_printf_float+0x38c>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	07da      	lsls	r2, r3, #31
 800947c:	d438      	bmi.n	80094f0 <_printf_float+0x38c>
 800947e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009480:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009482:	eba3 020a 	sub.w	r2, r3, sl
 8009486:	eba3 0901 	sub.w	r9, r3, r1
 800948a:	4591      	cmp	r9, r2
 800948c:	bfa8      	it	ge
 800948e:	4691      	movge	r9, r2
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	dc34      	bgt.n	8009500 <_printf_float+0x39c>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800949e:	f104 0a1a 	add.w	sl, r4, #26
 80094a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	eba3 0309 	sub.w	r3, r3, r9
 80094ac:	4543      	cmp	r3, r8
 80094ae:	f77f af7a 	ble.w	80093a6 <_printf_float+0x242>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4652      	mov	r2, sl
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	f43f aeac 	beq.w	800921a <_printf_float+0xb6>
 80094c2:	f108 0801 	add.w	r8, r8, #1
 80094c6:	e7ec      	b.n	80094a2 <_printf_float+0x33e>
 80094c8:	4613      	mov	r3, r2
 80094ca:	4631      	mov	r1, r6
 80094cc:	4642      	mov	r2, r8
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	d1c0      	bne.n	8009458 <_printf_float+0x2f4>
 80094d6:	e6a0      	b.n	800921a <_printf_float+0xb6>
 80094d8:	2301      	movs	r3, #1
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	920b      	str	r2, [sp, #44]	; 0x2c
 80094e0:	47b8      	blx	r7
 80094e2:	3001      	adds	r0, #1
 80094e4:	f43f ae99 	beq.w	800921a <_printf_float+0xb6>
 80094e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	e7b9      	b.n	8009464 <_printf_float+0x300>
 80094f0:	4631      	mov	r1, r6
 80094f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	d1bf      	bne.n	800947e <_printf_float+0x31a>
 80094fe:	e68c      	b.n	800921a <_printf_float+0xb6>
 8009500:	464b      	mov	r3, r9
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	eb08 020a 	add.w	r2, r8, sl
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	d1c2      	bne.n	8009496 <_printf_float+0x332>
 8009510:	e683      	b.n	800921a <_printf_float+0xb6>
 8009512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009514:	2a01      	cmp	r2, #1
 8009516:	dc01      	bgt.n	800951c <_printf_float+0x3b8>
 8009518:	07db      	lsls	r3, r3, #31
 800951a:	d537      	bpl.n	800958c <_printf_float+0x428>
 800951c:	2301      	movs	r3, #1
 800951e:	4642      	mov	r2, r8
 8009520:	4631      	mov	r1, r6
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	f43f ae77 	beq.w	800921a <_printf_float+0xb6>
 800952c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009530:	4631      	mov	r1, r6
 8009532:	4628      	mov	r0, r5
 8009534:	47b8      	blx	r7
 8009536:	3001      	adds	r0, #1
 8009538:	f43f ae6f 	beq.w	800921a <_printf_float+0xb6>
 800953c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009540:	2200      	movs	r2, #0
 8009542:	2300      	movs	r3, #0
 8009544:	f7f7 fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8009548:	b9d8      	cbnz	r0, 8009582 <_printf_float+0x41e>
 800954a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800954c:	f108 0201 	add.w	r2, r8, #1
 8009550:	3b01      	subs	r3, #1
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	d10e      	bne.n	800957a <_printf_float+0x416>
 800955c:	e65d      	b.n	800921a <_printf_float+0xb6>
 800955e:	2301      	movs	r3, #1
 8009560:	464a      	mov	r2, r9
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	47b8      	blx	r7
 8009568:	3001      	adds	r0, #1
 800956a:	f43f ae56 	beq.w	800921a <_printf_float+0xb6>
 800956e:	f108 0801 	add.w	r8, r8, #1
 8009572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009574:	3b01      	subs	r3, #1
 8009576:	4543      	cmp	r3, r8
 8009578:	dcf1      	bgt.n	800955e <_printf_float+0x3fa>
 800957a:	4653      	mov	r3, sl
 800957c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009580:	e6e0      	b.n	8009344 <_printf_float+0x1e0>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	f104 091a 	add.w	r9, r4, #26
 800958a:	e7f2      	b.n	8009572 <_printf_float+0x40e>
 800958c:	2301      	movs	r3, #1
 800958e:	4642      	mov	r2, r8
 8009590:	e7df      	b.n	8009552 <_printf_float+0x3ee>
 8009592:	2301      	movs	r3, #1
 8009594:	464a      	mov	r2, r9
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae3c 	beq.w	800921a <_printf_float+0xb6>
 80095a2:	f108 0801 	add.w	r8, r8, #1
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095aa:	1a5b      	subs	r3, r3, r1
 80095ac:	4543      	cmp	r3, r8
 80095ae:	dcf0      	bgt.n	8009592 <_printf_float+0x42e>
 80095b0:	e6fd      	b.n	80093ae <_printf_float+0x24a>
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	f104 0919 	add.w	r9, r4, #25
 80095ba:	e7f4      	b.n	80095a6 <_printf_float+0x442>

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	4607      	mov	r7, r0
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bfb8      	it	lt
 80095ce:	4613      	movlt	r3, r2
 80095d0:	6033      	str	r3, [r6, #0]
 80095d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d6:	460c      	mov	r4, r1
 80095d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc28      	bgt.n	8009656 <_printf_common+0x9a>
 8009604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009608:	1e13      	subs	r3, r2, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42d      	bmi.n	8009670 <_printf_common+0xb4>
 8009614:	4649      	mov	r1, r9
 8009616:	4638      	mov	r0, r7
 8009618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800961c:	47c0      	blx	r8
 800961e:	3001      	adds	r0, #1
 8009620:	d020      	beq.n	8009664 <_printf_common+0xa8>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	68e5      	ldr	r5, [r4, #12]
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	2b04      	cmp	r3, #4
 800962c:	bf18      	it	ne
 800962e:	2500      	movne	r5, #0
 8009630:	6832      	ldr	r2, [r6, #0]
 8009632:	f04f 0600 	mov.w	r6, #0
 8009636:	68a3      	ldr	r3, [r4, #8]
 8009638:	bf08      	it	eq
 800963a:	1aad      	subeq	r5, r5, r2
 800963c:	6922      	ldr	r2, [r4, #16]
 800963e:	bf08      	it	eq
 8009640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009644:	4293      	cmp	r3, r2
 8009646:	bfc4      	itt	gt
 8009648:	1a9b      	subgt	r3, r3, r2
 800964a:	18ed      	addgt	r5, r5, r3
 800964c:	341a      	adds	r4, #26
 800964e:	42b5      	cmp	r5, r6
 8009650:	d11a      	bne.n	8009688 <_printf_common+0xcc>
 8009652:	2000      	movs	r0, #0
 8009654:	e008      	b.n	8009668 <_printf_common+0xac>
 8009656:	2301      	movs	r3, #1
 8009658:	4652      	mov	r2, sl
 800965a:	4649      	mov	r1, r9
 800965c:	4638      	mov	r0, r7
 800965e:	47c0      	blx	r8
 8009660:	3001      	adds	r0, #1
 8009662:	d103      	bne.n	800966c <_printf_common+0xb0>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966c:	3501      	adds	r5, #1
 800966e:	e7c4      	b.n	80095fa <_printf_common+0x3e>
 8009670:	2030      	movs	r0, #48	; 0x30
 8009672:	18e1      	adds	r1, r4, r3
 8009674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967e:	4422      	add	r2, r4
 8009680:	3302      	adds	r3, #2
 8009682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009686:	e7c5      	b.n	8009614 <_printf_common+0x58>
 8009688:	2301      	movs	r3, #1
 800968a:	4622      	mov	r2, r4
 800968c:	4649      	mov	r1, r9
 800968e:	4638      	mov	r0, r7
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d0e6      	beq.n	8009664 <_printf_common+0xa8>
 8009696:	3601      	adds	r6, #1
 8009698:	e7d9      	b.n	800964e <_printf_common+0x92>
	...

0800969c <_printf_i>:
 800969c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a0:	7e0f      	ldrb	r7, [r1, #24]
 80096a2:	4691      	mov	r9, r2
 80096a4:	2f78      	cmp	r7, #120	; 0x78
 80096a6:	4680      	mov	r8, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	469a      	mov	sl, r3
 80096ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096b2:	d807      	bhi.n	80096c4 <_printf_i+0x28>
 80096b4:	2f62      	cmp	r7, #98	; 0x62
 80096b6:	d80a      	bhi.n	80096ce <_printf_i+0x32>
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	f000 80d9 	beq.w	8009870 <_printf_i+0x1d4>
 80096be:	2f58      	cmp	r7, #88	; 0x58
 80096c0:	f000 80a4 	beq.w	800980c <_printf_i+0x170>
 80096c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096cc:	e03a      	b.n	8009744 <_printf_i+0xa8>
 80096ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096d2:	2b15      	cmp	r3, #21
 80096d4:	d8f6      	bhi.n	80096c4 <_printf_i+0x28>
 80096d6:	a101      	add	r1, pc, #4	; (adr r1, 80096dc <_printf_i+0x40>)
 80096d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009749 	.word	0x08009749
 80096e4:	080096c5 	.word	0x080096c5
 80096e8:	080096c5 	.word	0x080096c5
 80096ec:	080096c5 	.word	0x080096c5
 80096f0:	080096c5 	.word	0x080096c5
 80096f4:	08009749 	.word	0x08009749
 80096f8:	080096c5 	.word	0x080096c5
 80096fc:	080096c5 	.word	0x080096c5
 8009700:	080096c5 	.word	0x080096c5
 8009704:	080096c5 	.word	0x080096c5
 8009708:	08009857 	.word	0x08009857
 800970c:	08009779 	.word	0x08009779
 8009710:	08009839 	.word	0x08009839
 8009714:	080096c5 	.word	0x080096c5
 8009718:	080096c5 	.word	0x080096c5
 800971c:	08009879 	.word	0x08009879
 8009720:	080096c5 	.word	0x080096c5
 8009724:	08009779 	.word	0x08009779
 8009728:	080096c5 	.word	0x080096c5
 800972c:	080096c5 	.word	0x080096c5
 8009730:	08009841 	.word	0x08009841
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	1d1a      	adds	r2, r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	602a      	str	r2, [r5, #0]
 800973c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009744:	2301      	movs	r3, #1
 8009746:	e0a4      	b.n	8009892 <_printf_i+0x1f6>
 8009748:	6820      	ldr	r0, [r4, #0]
 800974a:	6829      	ldr	r1, [r5, #0]
 800974c:	0606      	lsls	r6, r0, #24
 800974e:	f101 0304 	add.w	r3, r1, #4
 8009752:	d50a      	bpl.n	800976a <_printf_i+0xce>
 8009754:	680e      	ldr	r6, [r1, #0]
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	2e00      	cmp	r6, #0
 800975a:	da03      	bge.n	8009764 <_printf_i+0xc8>
 800975c:	232d      	movs	r3, #45	; 0x2d
 800975e:	4276      	negs	r6, r6
 8009760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009764:	230a      	movs	r3, #10
 8009766:	485e      	ldr	r0, [pc, #376]	; (80098e0 <_printf_i+0x244>)
 8009768:	e019      	b.n	800979e <_printf_i+0x102>
 800976a:	680e      	ldr	r6, [r1, #0]
 800976c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	bf18      	it	ne
 8009774:	b236      	sxthne	r6, r6
 8009776:	e7ef      	b.n	8009758 <_printf_i+0xbc>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	6820      	ldr	r0, [r4, #0]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	6029      	str	r1, [r5, #0]
 8009780:	0601      	lsls	r1, r0, #24
 8009782:	d501      	bpl.n	8009788 <_printf_i+0xec>
 8009784:	681e      	ldr	r6, [r3, #0]
 8009786:	e002      	b.n	800978e <_printf_i+0xf2>
 8009788:	0646      	lsls	r6, r0, #25
 800978a:	d5fb      	bpl.n	8009784 <_printf_i+0xe8>
 800978c:	881e      	ldrh	r6, [r3, #0]
 800978e:	2f6f      	cmp	r7, #111	; 0x6f
 8009790:	bf0c      	ite	eq
 8009792:	2308      	moveq	r3, #8
 8009794:	230a      	movne	r3, #10
 8009796:	4852      	ldr	r0, [pc, #328]	; (80098e0 <_printf_i+0x244>)
 8009798:	2100      	movs	r1, #0
 800979a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800979e:	6865      	ldr	r5, [r4, #4]
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	bfa8      	it	ge
 80097a4:	6821      	ldrge	r1, [r4, #0]
 80097a6:	60a5      	str	r5, [r4, #8]
 80097a8:	bfa4      	itt	ge
 80097aa:	f021 0104 	bicge.w	r1, r1, #4
 80097ae:	6021      	strge	r1, [r4, #0]
 80097b0:	b90e      	cbnz	r6, 80097b6 <_printf_i+0x11a>
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	d04d      	beq.n	8009852 <_printf_i+0x1b6>
 80097b6:	4615      	mov	r5, r2
 80097b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80097bc:	fb03 6711 	mls	r7, r3, r1, r6
 80097c0:	5dc7      	ldrb	r7, [r0, r7]
 80097c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097c6:	4637      	mov	r7, r6
 80097c8:	42bb      	cmp	r3, r7
 80097ca:	460e      	mov	r6, r1
 80097cc:	d9f4      	bls.n	80097b8 <_printf_i+0x11c>
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d10b      	bne.n	80097ea <_printf_i+0x14e>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	07de      	lsls	r6, r3, #31
 80097d6:	d508      	bpl.n	80097ea <_printf_i+0x14e>
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	6861      	ldr	r1, [r4, #4]
 80097dc:	4299      	cmp	r1, r3
 80097de:	bfde      	ittt	le
 80097e0:	2330      	movle	r3, #48	; 0x30
 80097e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097ea:	1b52      	subs	r2, r2, r5
 80097ec:	6122      	str	r2, [r4, #16]
 80097ee:	464b      	mov	r3, r9
 80097f0:	4621      	mov	r1, r4
 80097f2:	4640      	mov	r0, r8
 80097f4:	f8cd a000 	str.w	sl, [sp]
 80097f8:	aa03      	add	r2, sp, #12
 80097fa:	f7ff fedf 	bl	80095bc <_printf_common>
 80097fe:	3001      	adds	r0, #1
 8009800:	d14c      	bne.n	800989c <_printf_i+0x200>
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	b004      	add	sp, #16
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	4834      	ldr	r0, [pc, #208]	; (80098e0 <_printf_i+0x244>)
 800980e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009812:	6829      	ldr	r1, [r5, #0]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	f851 6b04 	ldr.w	r6, [r1], #4
 800981a:	6029      	str	r1, [r5, #0]
 800981c:	061d      	lsls	r5, r3, #24
 800981e:	d514      	bpl.n	800984a <_printf_i+0x1ae>
 8009820:	07df      	lsls	r7, r3, #31
 8009822:	bf44      	itt	mi
 8009824:	f043 0320 	orrmi.w	r3, r3, #32
 8009828:	6023      	strmi	r3, [r4, #0]
 800982a:	b91e      	cbnz	r6, 8009834 <_printf_i+0x198>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	f023 0320 	bic.w	r3, r3, #32
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	2310      	movs	r3, #16
 8009836:	e7af      	b.n	8009798 <_printf_i+0xfc>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	f043 0320 	orr.w	r3, r3, #32
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	2378      	movs	r3, #120	; 0x78
 8009842:	4828      	ldr	r0, [pc, #160]	; (80098e4 <_printf_i+0x248>)
 8009844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009848:	e7e3      	b.n	8009812 <_printf_i+0x176>
 800984a:	0659      	lsls	r1, r3, #25
 800984c:	bf48      	it	mi
 800984e:	b2b6      	uxthmi	r6, r6
 8009850:	e7e6      	b.n	8009820 <_printf_i+0x184>
 8009852:	4615      	mov	r5, r2
 8009854:	e7bb      	b.n	80097ce <_printf_i+0x132>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	6826      	ldr	r6, [r4, #0]
 800985a:	1d18      	adds	r0, r3, #4
 800985c:	6961      	ldr	r1, [r4, #20]
 800985e:	6028      	str	r0, [r5, #0]
 8009860:	0635      	lsls	r5, r6, #24
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	d501      	bpl.n	800986a <_printf_i+0x1ce>
 8009866:	6019      	str	r1, [r3, #0]
 8009868:	e002      	b.n	8009870 <_printf_i+0x1d4>
 800986a:	0670      	lsls	r0, r6, #25
 800986c:	d5fb      	bpl.n	8009866 <_printf_i+0x1ca>
 800986e:	8019      	strh	r1, [r3, #0]
 8009870:	2300      	movs	r3, #0
 8009872:	4615      	mov	r5, r2
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	e7ba      	b.n	80097ee <_printf_i+0x152>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	2100      	movs	r1, #0
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	681d      	ldr	r5, [r3, #0]
 8009882:	6862      	ldr	r2, [r4, #4]
 8009884:	4628      	mov	r0, r5
 8009886:	f001 fa29 	bl	800acdc <memchr>
 800988a:	b108      	cbz	r0, 8009890 <_printf_i+0x1f4>
 800988c:	1b40      	subs	r0, r0, r5
 800988e:	6060      	str	r0, [r4, #4]
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	2300      	movs	r3, #0
 8009896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800989a:	e7a8      	b.n	80097ee <_printf_i+0x152>
 800989c:	462a      	mov	r2, r5
 800989e:	4649      	mov	r1, r9
 80098a0:	4640      	mov	r0, r8
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	47d0      	blx	sl
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0ab      	beq.n	8009802 <_printf_i+0x166>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	079b      	lsls	r3, r3, #30
 80098ae:	d413      	bmi.n	80098d8 <_printf_i+0x23c>
 80098b0:	68e0      	ldr	r0, [r4, #12]
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	4298      	cmp	r0, r3
 80098b6:	bfb8      	it	lt
 80098b8:	4618      	movlt	r0, r3
 80098ba:	e7a4      	b.n	8009806 <_printf_i+0x16a>
 80098bc:	2301      	movs	r3, #1
 80098be:	4632      	mov	r2, r6
 80098c0:	4649      	mov	r1, r9
 80098c2:	4640      	mov	r0, r8
 80098c4:	47d0      	blx	sl
 80098c6:	3001      	adds	r0, #1
 80098c8:	d09b      	beq.n	8009802 <_printf_i+0x166>
 80098ca:	3501      	adds	r5, #1
 80098cc:	68e3      	ldr	r3, [r4, #12]
 80098ce:	9903      	ldr	r1, [sp, #12]
 80098d0:	1a5b      	subs	r3, r3, r1
 80098d2:	42ab      	cmp	r3, r5
 80098d4:	dcf2      	bgt.n	80098bc <_printf_i+0x220>
 80098d6:	e7eb      	b.n	80098b0 <_printf_i+0x214>
 80098d8:	2500      	movs	r5, #0
 80098da:	f104 0619 	add.w	r6, r4, #25
 80098de:	e7f5      	b.n	80098cc <_printf_i+0x230>
 80098e0:	0800bb26 	.word	0x0800bb26
 80098e4:	0800bb37 	.word	0x0800bb37

080098e8 <iprintf>:
 80098e8:	b40f      	push	{r0, r1, r2, r3}
 80098ea:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <iprintf+0x2c>)
 80098ec:	b513      	push	{r0, r1, r4, lr}
 80098ee:	681c      	ldr	r4, [r3, #0]
 80098f0:	b124      	cbz	r4, 80098fc <iprintf+0x14>
 80098f2:	69a3      	ldr	r3, [r4, #24]
 80098f4:	b913      	cbnz	r3, 80098fc <iprintf+0x14>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 f8e6 	bl	800aac8 <__sinit>
 80098fc:	ab05      	add	r3, sp, #20
 80098fe:	4620      	mov	r0, r4
 8009900:	9a04      	ldr	r2, [sp, #16]
 8009902:	68a1      	ldr	r1, [r4, #8]
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	f001 fdc1 	bl	800b48c <_vfiprintf_r>
 800990a:	b002      	add	sp, #8
 800990c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009910:	b004      	add	sp, #16
 8009912:	4770      	bx	lr
 8009914:	20000010 	.word	0x20000010

08009918 <_puts_r>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	460e      	mov	r6, r1
 800991c:	4605      	mov	r5, r0
 800991e:	b118      	cbz	r0, 8009928 <_puts_r+0x10>
 8009920:	6983      	ldr	r3, [r0, #24]
 8009922:	b90b      	cbnz	r3, 8009928 <_puts_r+0x10>
 8009924:	f001 f8d0 	bl	800aac8 <__sinit>
 8009928:	69ab      	ldr	r3, [r5, #24]
 800992a:	68ac      	ldr	r4, [r5, #8]
 800992c:	b913      	cbnz	r3, 8009934 <_puts_r+0x1c>
 800992e:	4628      	mov	r0, r5
 8009930:	f001 f8ca 	bl	800aac8 <__sinit>
 8009934:	4b2c      	ldr	r3, [pc, #176]	; (80099e8 <_puts_r+0xd0>)
 8009936:	429c      	cmp	r4, r3
 8009938:	d120      	bne.n	800997c <_puts_r+0x64>
 800993a:	686c      	ldr	r4, [r5, #4]
 800993c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993e:	07db      	lsls	r3, r3, #31
 8009940:	d405      	bmi.n	800994e <_puts_r+0x36>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	0598      	lsls	r0, r3, #22
 8009946:	d402      	bmi.n	800994e <_puts_r+0x36>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f001 f960 	bl	800ac0e <__retarget_lock_acquire_recursive>
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	0719      	lsls	r1, r3, #28
 8009952:	d51d      	bpl.n	8009990 <_puts_r+0x78>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	b1db      	cbz	r3, 8009990 <_puts_r+0x78>
 8009958:	3e01      	subs	r6, #1
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009960:	3b01      	subs	r3, #1
 8009962:	60a3      	str	r3, [r4, #8]
 8009964:	bb39      	cbnz	r1, 80099b6 <_puts_r+0x9e>
 8009966:	2b00      	cmp	r3, #0
 8009968:	da38      	bge.n	80099dc <_puts_r+0xc4>
 800996a:	4622      	mov	r2, r4
 800996c:	210a      	movs	r1, #10
 800996e:	4628      	mov	r0, r5
 8009970:	f000 f858 	bl	8009a24 <__swbuf_r>
 8009974:	3001      	adds	r0, #1
 8009976:	d011      	beq.n	800999c <_puts_r+0x84>
 8009978:	250a      	movs	r5, #10
 800997a:	e011      	b.n	80099a0 <_puts_r+0x88>
 800997c:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <_puts_r+0xd4>)
 800997e:	429c      	cmp	r4, r3
 8009980:	d101      	bne.n	8009986 <_puts_r+0x6e>
 8009982:	68ac      	ldr	r4, [r5, #8]
 8009984:	e7da      	b.n	800993c <_puts_r+0x24>
 8009986:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <_puts_r+0xd8>)
 8009988:	429c      	cmp	r4, r3
 800998a:	bf08      	it	eq
 800998c:	68ec      	ldreq	r4, [r5, #12]
 800998e:	e7d5      	b.n	800993c <_puts_r+0x24>
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f898 	bl	8009ac8 <__swsetup_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	d0dd      	beq.n	8009958 <_puts_r+0x40>
 800999c:	f04f 35ff 	mov.w	r5, #4294967295
 80099a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099a2:	07da      	lsls	r2, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_puts_r+0x9a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	059b      	lsls	r3, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_puts_r+0x9a>
 80099ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ae:	f001 f92f 	bl	800ac10 <__retarget_lock_release_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da04      	bge.n	80099c4 <_puts_r+0xac>
 80099ba:	69a2      	ldr	r2, [r4, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	dc06      	bgt.n	80099ce <_puts_r+0xb6>
 80099c0:	290a      	cmp	r1, #10
 80099c2:	d004      	beq.n	80099ce <_puts_r+0xb6>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	6022      	str	r2, [r4, #0]
 80099ca:	7019      	strb	r1, [r3, #0]
 80099cc:	e7c5      	b.n	800995a <_puts_r+0x42>
 80099ce:	4622      	mov	r2, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f827 	bl	8009a24 <__swbuf_r>
 80099d6:	3001      	adds	r0, #1
 80099d8:	d1bf      	bne.n	800995a <_puts_r+0x42>
 80099da:	e7df      	b.n	800999c <_puts_r+0x84>
 80099dc:	250a      	movs	r5, #10
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	6022      	str	r2, [r4, #0]
 80099e4:	701d      	strb	r5, [r3, #0]
 80099e6:	e7db      	b.n	80099a0 <_puts_r+0x88>
 80099e8:	0800bbf8 	.word	0x0800bbf8
 80099ec:	0800bc18 	.word	0x0800bc18
 80099f0:	0800bbd8 	.word	0x0800bbd8

080099f4 <puts>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <puts+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f7ff bf8d 	b.w	8009918 <_puts_r>
 80099fe:	bf00      	nop
 8009a00:	20000010 	.word	0x20000010

08009a04 <_sbrk_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d05      	ldr	r5, [pc, #20]	; (8009a20 <_sbrk_r+0x1c>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f8 ff4a 	bl	80028a8 <_sbrk>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_sbrk_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_sbrk_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20001374 	.word	0x20001374

08009a24 <__swbuf_r>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	b118      	cbz	r0, 8009a36 <__swbuf_r+0x12>
 8009a2e:	6983      	ldr	r3, [r0, #24]
 8009a30:	b90b      	cbnz	r3, 8009a36 <__swbuf_r+0x12>
 8009a32:	f001 f849 	bl	800aac8 <__sinit>
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <__swbuf_r+0x98>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d12b      	bne.n	8009a94 <__swbuf_r+0x70>
 8009a3c:	686c      	ldr	r4, [r5, #4]
 8009a3e:	69a3      	ldr	r3, [r4, #24]
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	071a      	lsls	r2, r3, #28
 8009a46:	d52f      	bpl.n	8009aa8 <__swbuf_r+0x84>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	b36b      	cbz	r3, 8009aa8 <__swbuf_r+0x84>
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	6820      	ldr	r0, [r4, #0]
 8009a50:	b2f6      	uxtb	r6, r6
 8009a52:	1ac0      	subs	r0, r0, r3
 8009a54:	6963      	ldr	r3, [r4, #20]
 8009a56:	4637      	mov	r7, r6
 8009a58:	4283      	cmp	r3, r0
 8009a5a:	dc04      	bgt.n	8009a66 <__swbuf_r+0x42>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 ff9e 	bl	800a9a0 <_fflush_r>
 8009a64:	bb30      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	3001      	adds	r0, #1
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	6022      	str	r2, [r4, #0]
 8009a74:	701e      	strb	r6, [r3, #0]
 8009a76:	6963      	ldr	r3, [r4, #20]
 8009a78:	4283      	cmp	r3, r0
 8009a7a:	d004      	beq.n	8009a86 <__swbuf_r+0x62>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	07db      	lsls	r3, r3, #31
 8009a80:	d506      	bpl.n	8009a90 <__swbuf_r+0x6c>
 8009a82:	2e0a      	cmp	r6, #10
 8009a84:	d104      	bne.n	8009a90 <__swbuf_r+0x6c>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 ff89 	bl	800a9a0 <_fflush_r>
 8009a8e:	b988      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a90:	4638      	mov	r0, r7
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <__swbuf_r+0x9c>)
 8009a96:	429c      	cmp	r4, r3
 8009a98:	d101      	bne.n	8009a9e <__swbuf_r+0x7a>
 8009a9a:	68ac      	ldr	r4, [r5, #8]
 8009a9c:	e7cf      	b.n	8009a3e <__swbuf_r+0x1a>
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <__swbuf_r+0xa0>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	bf08      	it	eq
 8009aa4:	68ec      	ldreq	r4, [r5, #12]
 8009aa6:	e7ca      	b.n	8009a3e <__swbuf_r+0x1a>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f80c 	bl	8009ac8 <__swsetup_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0cb      	beq.n	8009a4c <__swbuf_r+0x28>
 8009ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab8:	e7ea      	b.n	8009a90 <__swbuf_r+0x6c>
 8009aba:	bf00      	nop
 8009abc:	0800bbf8 	.word	0x0800bbf8
 8009ac0:	0800bc18 	.word	0x0800bc18
 8009ac4:	0800bbd8 	.word	0x0800bbd8

08009ac8 <__swsetup_r>:
 8009ac8:	4b32      	ldr	r3, [pc, #200]	; (8009b94 <__swsetup_r+0xcc>)
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	b125      	cbz	r5, 8009ade <__swsetup_r+0x16>
 8009ad4:	69ab      	ldr	r3, [r5, #24]
 8009ad6:	b913      	cbnz	r3, 8009ade <__swsetup_r+0x16>
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 fff5 	bl	800aac8 <__sinit>
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <__swsetup_r+0xd0>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d10f      	bne.n	8009b04 <__swsetup_r+0x3c>
 8009ae4:	686c      	ldr	r4, [r5, #4]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	d42c      	bmi.n	8009b4a <__swsetup_r+0x82>
 8009af0:	06dd      	lsls	r5, r3, #27
 8009af2:	d411      	bmi.n	8009b18 <__swsetup_r+0x50>
 8009af4:	2309      	movs	r3, #9
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	e03e      	b.n	8009b82 <__swsetup_r+0xba>
 8009b04:	4b25      	ldr	r3, [pc, #148]	; (8009b9c <__swsetup_r+0xd4>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d101      	bne.n	8009b0e <__swsetup_r+0x46>
 8009b0a:	68ac      	ldr	r4, [r5, #8]
 8009b0c:	e7eb      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <__swsetup_r+0xd8>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	bf08      	it	eq
 8009b14:	68ec      	ldreq	r4, [r5, #12]
 8009b16:	e7e6      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b18:	0758      	lsls	r0, r3, #29
 8009b1a:	d512      	bpl.n	8009b42 <__swsetup_r+0x7a>
 8009b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b1e:	b141      	cbz	r1, 8009b32 <__swsetup_r+0x6a>
 8009b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d002      	beq.n	8009b2e <__swsetup_r+0x66>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7ff f9a1 	bl	8008e70 <_free_r>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	6363      	str	r3, [r4, #52]	; 0x34
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f043 0308 	orr.w	r3, r3, #8
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	b94b      	cbnz	r3, 8009b62 <__swsetup_r+0x9a>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b58:	d003      	beq.n	8009b62 <__swsetup_r+0x9a>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f001 f87d 	bl	800ac5c <__smakebuf_r>
 8009b62:	89a0      	ldrh	r0, [r4, #12]
 8009b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b68:	f010 0301 	ands.w	r3, r0, #1
 8009b6c:	d00a      	beq.n	8009b84 <__swsetup_r+0xbc>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	6963      	ldr	r3, [r4, #20]
 8009b74:	425b      	negs	r3, r3
 8009b76:	61a3      	str	r3, [r4, #24]
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b943      	cbnz	r3, 8009b8e <__swsetup_r+0xc6>
 8009b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b80:	d1ba      	bne.n	8009af8 <__swsetup_r+0x30>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	0781      	lsls	r1, r0, #30
 8009b86:	bf58      	it	pl
 8009b88:	6963      	ldrpl	r3, [r4, #20]
 8009b8a:	60a3      	str	r3, [r4, #8]
 8009b8c:	e7f4      	b.n	8009b78 <__swsetup_r+0xb0>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7f7      	b.n	8009b82 <__swsetup_r+0xba>
 8009b92:	bf00      	nop
 8009b94:	20000010 	.word	0x20000010
 8009b98:	0800bbf8 	.word	0x0800bbf8
 8009b9c:	0800bc18 	.word	0x0800bc18
 8009ba0:	0800bbd8 	.word	0x0800bbd8

08009ba4 <quorem>:
 8009ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	6903      	ldr	r3, [r0, #16]
 8009baa:	690c      	ldr	r4, [r1, #16]
 8009bac:	4607      	mov	r7, r0
 8009bae:	42a3      	cmp	r3, r4
 8009bb0:	f2c0 8082 	blt.w	8009cb8 <quorem+0x114>
 8009bb4:	3c01      	subs	r4, #1
 8009bb6:	f100 0514 	add.w	r5, r0, #20
 8009bba:	f101 0814 	add.w	r8, r1, #20
 8009bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bdc:	d331      	bcc.n	8009c42 <quorem+0x9e>
 8009bde:	f04f 0e00 	mov.w	lr, #0
 8009be2:	4640      	mov	r0, r8
 8009be4:	46ac      	mov	ip, r5
 8009be6:	46f2      	mov	sl, lr
 8009be8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bec:	b293      	uxth	r3, r2
 8009bee:	fb06 e303 	mla	r3, r6, r3, lr
 8009bf2:	0c12      	lsrs	r2, r2, #16
 8009bf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	fb06 e202 	mla	r2, r6, r2, lr
 8009bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8009c02:	f8dc a000 	ldr.w	sl, [ip]
 8009c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c0a:	fa1f fa8a 	uxth.w	sl, sl
 8009c0e:	4453      	add	r3, sl
 8009c10:	f8dc a000 	ldr.w	sl, [ip]
 8009c14:	b292      	uxth	r2, r2
 8009c16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c24:	4581      	cmp	r9, r0
 8009c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8009c2e:	d2db      	bcs.n	8009be8 <quorem+0x44>
 8009c30:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c34:	b92b      	cbnz	r3, 8009c42 <quorem+0x9e>
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	429d      	cmp	r5, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	d32f      	bcc.n	8009ca0 <quorem+0xfc>
 8009c40:	613c      	str	r4, [r7, #16]
 8009c42:	4638      	mov	r0, r7
 8009c44:	f001 fae2 	bl	800b20c <__mcmp>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	db25      	blt.n	8009c98 <quorem+0xf4>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f04f 0c00 	mov.w	ip, #0
 8009c52:	3601      	adds	r6, #1
 8009c54:	f858 1b04 	ldr.w	r1, [r8], #4
 8009c58:	f8d0 e000 	ldr.w	lr, [r0]
 8009c5c:	b28b      	uxth	r3, r1
 8009c5e:	ebac 0303 	sub.w	r3, ip, r3
 8009c62:	fa1f f28e 	uxth.w	r2, lr
 8009c66:	4413      	add	r3, r2
 8009c68:	0c0a      	lsrs	r2, r1, #16
 8009c6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c78:	45c1      	cmp	r9, r8
 8009c7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c7e:	f840 3b04 	str.w	r3, [r0], #4
 8009c82:	d2e7      	bcs.n	8009c54 <quorem+0xb0>
 8009c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c8c:	b922      	cbnz	r2, 8009c98 <quorem+0xf4>
 8009c8e:	3b04      	subs	r3, #4
 8009c90:	429d      	cmp	r5, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	d30a      	bcc.n	8009cac <quorem+0x108>
 8009c96:	613c      	str	r4, [r7, #16]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	b003      	add	sp, #12
 8009c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca0:	6812      	ldr	r2, [r2, #0]
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	d1cb      	bne.n	8009c40 <quorem+0x9c>
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	e7c6      	b.n	8009c3a <quorem+0x96>
 8009cac:	6812      	ldr	r2, [r2, #0]
 8009cae:	3b04      	subs	r3, #4
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	d1f0      	bne.n	8009c96 <quorem+0xf2>
 8009cb4:	3c01      	subs	r4, #1
 8009cb6:	e7eb      	b.n	8009c90 <quorem+0xec>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7ee      	b.n	8009c9a <quorem+0xf6>
 8009cbc:	0000      	movs	r0, r0
	...

08009cc0 <_dtoa_r>:
 8009cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	461f      	mov	r7, r3
 8009cc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009cca:	b099      	sub	sp, #100	; 0x64
 8009ccc:	4605      	mov	r5, r0
 8009cce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009cd6:	b974      	cbnz	r4, 8009cf6 <_dtoa_r+0x36>
 8009cd8:	2010      	movs	r0, #16
 8009cda:	f7ff f8ab 	bl	8008e34 <malloc>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6268      	str	r0, [r5, #36]	; 0x24
 8009ce2:	b920      	cbnz	r0, 8009cee <_dtoa_r+0x2e>
 8009ce4:	21ea      	movs	r1, #234	; 0xea
 8009ce6:	4ba8      	ldr	r3, [pc, #672]	; (8009f88 <_dtoa_r+0x2c8>)
 8009ce8:	48a8      	ldr	r0, [pc, #672]	; (8009f8c <_dtoa_r+0x2cc>)
 8009cea:	f001 fd55 	bl	800b798 <__assert_func>
 8009cee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf2:	6004      	str	r4, [r0, #0]
 8009cf4:	60c4      	str	r4, [r0, #12]
 8009cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	b151      	cbz	r1, 8009d12 <_dtoa_r+0x52>
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4093      	lsls	r3, r2
 8009d02:	604a      	str	r2, [r1, #4]
 8009d04:	608b      	str	r3, [r1, #8]
 8009d06:	4628      	mov	r0, r5
 8009d08:	f001 f842 	bl	800ad90 <_Bfree>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	1e3b      	subs	r3, r7, #0
 8009d14:	bfaf      	iteee	ge
 8009d16:	2300      	movge	r3, #0
 8009d18:	2201      	movlt	r2, #1
 8009d1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d1e:	9305      	strlt	r3, [sp, #20]
 8009d20:	bfa8      	it	ge
 8009d22:	f8c8 3000 	strge.w	r3, [r8]
 8009d26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009d2a:	4b99      	ldr	r3, [pc, #612]	; (8009f90 <_dtoa_r+0x2d0>)
 8009d2c:	bfb8      	it	lt
 8009d2e:	f8c8 2000 	strlt.w	r2, [r8]
 8009d32:	ea33 0309 	bics.w	r3, r3, r9
 8009d36:	d119      	bne.n	8009d6c <_dtoa_r+0xac>
 8009d38:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d44:	4333      	orrs	r3, r6
 8009d46:	f000 857f 	beq.w	800a848 <_dtoa_r+0xb88>
 8009d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d4c:	b953      	cbnz	r3, 8009d64 <_dtoa_r+0xa4>
 8009d4e:	4b91      	ldr	r3, [pc, #580]	; (8009f94 <_dtoa_r+0x2d4>)
 8009d50:	e022      	b.n	8009d98 <_dtoa_r+0xd8>
 8009d52:	4b91      	ldr	r3, [pc, #580]	; (8009f98 <_dtoa_r+0x2d8>)
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	3308      	adds	r3, #8
 8009d58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	9803      	ldr	r0, [sp, #12]
 8009d5e:	b019      	add	sp, #100	; 0x64
 8009d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d64:	4b8b      	ldr	r3, [pc, #556]	; (8009f94 <_dtoa_r+0x2d4>)
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	3303      	adds	r3, #3
 8009d6a:	e7f5      	b.n	8009d58 <_dtoa_r+0x98>
 8009d6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f7f6 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8009d80:	4680      	mov	r8, r0
 8009d82:	b158      	cbz	r0, 8009d9c <_dtoa_r+0xdc>
 8009d84:	2301      	movs	r3, #1
 8009d86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8558 	beq.w	800a842 <_dtoa_r+0xb82>
 8009d92:	4882      	ldr	r0, [pc, #520]	; (8009f9c <_dtoa_r+0x2dc>)
 8009d94:	6018      	str	r0, [r3, #0]
 8009d96:	1e43      	subs	r3, r0, #1
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	e7df      	b.n	8009d5c <_dtoa_r+0x9c>
 8009d9c:	ab16      	add	r3, sp, #88	; 0x58
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	ab17      	add	r3, sp, #92	; 0x5c
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	4628      	mov	r0, r5
 8009da6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009daa:	f001 fad7 	bl	800b35c <__d2b>
 8009dae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009db2:	4683      	mov	fp, r0
 8009db4:	2c00      	cmp	r4, #0
 8009db6:	d07f      	beq.n	8009eb8 <_dtoa_r+0x1f8>
 8009db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009dca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009dce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4b72      	ldr	r3, [pc, #456]	; (8009fa0 <_dtoa_r+0x2e0>)
 8009dd6:	f7f6 f9c7 	bl	8000168 <__aeabi_dsub>
 8009dda:	a365      	add	r3, pc, #404	; (adr r3, 8009f70 <_dtoa_r+0x2b0>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fb7a 	bl	80004d8 <__aeabi_dmul>
 8009de4:	a364      	add	r3, pc, #400	; (adr r3, 8009f78 <_dtoa_r+0x2b8>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f7f6 f9bf 	bl	800016c <__adddf3>
 8009dee:	4606      	mov	r6, r0
 8009df0:	4620      	mov	r0, r4
 8009df2:	460f      	mov	r7, r1
 8009df4:	f7f6 fb06 	bl	8000404 <__aeabi_i2d>
 8009df8:	a361      	add	r3, pc, #388	; (adr r3, 8009f80 <_dtoa_r+0x2c0>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fb6b 	bl	80004d8 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	f7f6 f9af 	bl	800016c <__adddf3>
 8009e0e:	4606      	mov	r6, r0
 8009e10:	460f      	mov	r7, r1
 8009e12:	f7f6 fe11 	bl	8000a38 <__aeabi_d2iz>
 8009e16:	2200      	movs	r2, #0
 8009e18:	4682      	mov	sl, r0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fdcc 	bl	80009bc <__aeabi_dcmplt>
 8009e24:	b148      	cbz	r0, 8009e3a <_dtoa_r+0x17a>
 8009e26:	4650      	mov	r0, sl
 8009e28:	f7f6 faec 	bl	8000404 <__aeabi_i2d>
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	f7f6 fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8009e34:	b908      	cbnz	r0, 8009e3a <_dtoa_r+0x17a>
 8009e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e3a:	f1ba 0f16 	cmp.w	sl, #22
 8009e3e:	d858      	bhi.n	8009ef2 <_dtoa_r+0x232>
 8009e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e44:	4b57      	ldr	r3, [pc, #348]	; (8009fa4 <_dtoa_r+0x2e4>)
 8009e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fdb5 	bl	80009bc <__aeabi_dcmplt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d04f      	beq.n	8009ef6 <_dtoa_r+0x236>
 8009e56:	2300      	movs	r3, #0
 8009e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e60:	1b1c      	subs	r4, r3, r4
 8009e62:	1e63      	subs	r3, r4, #1
 8009e64:	9309      	str	r3, [sp, #36]	; 0x24
 8009e66:	bf49      	itett	mi
 8009e68:	f1c4 0301 	rsbmi	r3, r4, #1
 8009e6c:	2300      	movpl	r3, #0
 8009e6e:	9306      	strmi	r3, [sp, #24]
 8009e70:	2300      	movmi	r3, #0
 8009e72:	bf54      	ite	pl
 8009e74:	9306      	strpl	r3, [sp, #24]
 8009e76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	db3d      	blt.n	8009efa <_dtoa_r+0x23a>
 8009e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009e84:	4453      	add	r3, sl
 8009e86:	9309      	str	r3, [sp, #36]	; 0x24
 8009e88:	2300      	movs	r3, #0
 8009e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	f200 808c 	bhi.w	8009fac <_dtoa_r+0x2ec>
 8009e94:	2b05      	cmp	r3, #5
 8009e96:	bfc4      	itt	gt
 8009e98:	3b04      	subgt	r3, #4
 8009e9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e9e:	bfc8      	it	gt
 8009ea0:	2400      	movgt	r4, #0
 8009ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ea6:	bfd8      	it	le
 8009ea8:	2401      	movle	r4, #1
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	f200 808a 	bhi.w	8009fc4 <_dtoa_r+0x304>
 8009eb0:	e8df f003 	tbb	[pc, r3]
 8009eb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8009eb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009ebc:	441c      	add	r4, r3
 8009ebe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	bfc3      	ittte	gt
 8009ec6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009eca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009ece:	fa09 f303 	lslgt.w	r3, r9, r3
 8009ed2:	f1c3 0320 	rsble	r3, r3, #32
 8009ed6:	bfc6      	itte	gt
 8009ed8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009edc:	4318      	orrgt	r0, r3
 8009ede:	fa06 f003 	lslle.w	r0, r6, r3
 8009ee2:	f7f6 fa7f 	bl	80003e4 <__aeabi_ui2d>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009eec:	3c01      	subs	r4, #1
 8009eee:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ef0:	e76f      	b.n	8009dd2 <_dtoa_r+0x112>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e7b2      	b.n	8009e5c <_dtoa_r+0x19c>
 8009ef6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ef8:	e7b1      	b.n	8009e5e <_dtoa_r+0x19e>
 8009efa:	9b06      	ldr	r3, [sp, #24]
 8009efc:	eba3 030a 	sub.w	r3, r3, sl
 8009f00:	9306      	str	r3, [sp, #24]
 8009f02:	f1ca 0300 	rsb	r3, sl, #0
 8009f06:	930a      	str	r3, [sp, #40]	; 0x28
 8009f08:	2300      	movs	r3, #0
 8009f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f0c:	e7be      	b.n	8009e8c <_dtoa_r+0x1cc>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	dc58      	bgt.n	8009fca <_dtoa_r+0x30a>
 8009f18:	f04f 0901 	mov.w	r9, #1
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009f26:	2200      	movs	r2, #0
 8009f28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009f2a:	6042      	str	r2, [r0, #4]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	f102 0614 	add.w	r6, r2, #20
 8009f32:	429e      	cmp	r6, r3
 8009f34:	6841      	ldr	r1, [r0, #4]
 8009f36:	d94e      	bls.n	8009fd6 <_dtoa_r+0x316>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f000 fee9 	bl	800ad10 <_Balloc>
 8009f3e:	9003      	str	r0, [sp, #12]
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d14c      	bne.n	8009fde <_dtoa_r+0x31e>
 8009f44:	4602      	mov	r2, r0
 8009f46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f4a:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <_dtoa_r+0x2e8>)
 8009f4c:	e6cc      	b.n	8009ce8 <_dtoa_r+0x28>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e7de      	b.n	8009f10 <_dtoa_r+0x250>
 8009f52:	2300      	movs	r3, #0
 8009f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f58:	eb0a 0903 	add.w	r9, sl, r3
 8009f5c:	f109 0301 	add.w	r3, r9, #1
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	9308      	str	r3, [sp, #32]
 8009f64:	bfb8      	it	lt
 8009f66:	2301      	movlt	r3, #1
 8009f68:	e7dd      	b.n	8009f26 <_dtoa_r+0x266>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e7f2      	b.n	8009f54 <_dtoa_r+0x294>
 8009f6e:	bf00      	nop
 8009f70:	636f4361 	.word	0x636f4361
 8009f74:	3fd287a7 	.word	0x3fd287a7
 8009f78:	8b60c8b3 	.word	0x8b60c8b3
 8009f7c:	3fc68a28 	.word	0x3fc68a28
 8009f80:	509f79fb 	.word	0x509f79fb
 8009f84:	3fd34413 	.word	0x3fd34413
 8009f88:	0800bb55 	.word	0x0800bb55
 8009f8c:	0800bb6c 	.word	0x0800bb6c
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	0800bb51 	.word	0x0800bb51
 8009f98:	0800bb48 	.word	0x0800bb48
 8009f9c:	0800bb25 	.word	0x0800bb25
 8009fa0:	3ff80000 	.word	0x3ff80000
 8009fa4:	0800bcc0 	.word	0x0800bcc0
 8009fa8:	0800bbc7 	.word	0x0800bbc7
 8009fac:	2401      	movs	r4, #1
 8009fae:	2300      	movs	r3, #0
 8009fb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fb2:	9322      	str	r3, [sp, #136]	; 0x88
 8009fb4:	f04f 39ff 	mov.w	r9, #4294967295
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2312      	movs	r3, #18
 8009fbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009fc2:	e7b0      	b.n	8009f26 <_dtoa_r+0x266>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fc8:	e7f4      	b.n	8009fb4 <_dtoa_r+0x2f4>
 8009fca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009fce:	464b      	mov	r3, r9
 8009fd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fd4:	e7a7      	b.n	8009f26 <_dtoa_r+0x266>
 8009fd6:	3101      	adds	r1, #1
 8009fd8:	6041      	str	r1, [r0, #4]
 8009fda:	0052      	lsls	r2, r2, #1
 8009fdc:	e7a7      	b.n	8009f2e <_dtoa_r+0x26e>
 8009fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fe0:	9a03      	ldr	r2, [sp, #12]
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	2b0e      	cmp	r3, #14
 8009fe8:	f200 80a8 	bhi.w	800a13c <_dtoa_r+0x47c>
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	f000 80a5 	beq.w	800a13c <_dtoa_r+0x47c>
 8009ff2:	f1ba 0f00 	cmp.w	sl, #0
 8009ff6:	dd34      	ble.n	800a062 <_dtoa_r+0x3a2>
 8009ff8:	4a9a      	ldr	r2, [pc, #616]	; (800a264 <_dtoa_r+0x5a4>)
 8009ffa:	f00a 030f 	and.w	r3, sl, #15
 8009ffe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a002:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a006:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a00a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a00e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a012:	d016      	beq.n	800a042 <_dtoa_r+0x382>
 800a014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a018:	4b93      	ldr	r3, [pc, #588]	; (800a268 <_dtoa_r+0x5a8>)
 800a01a:	2703      	movs	r7, #3
 800a01c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a020:	f7f6 fb84 	bl	800072c <__aeabi_ddiv>
 800a024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a028:	f004 040f 	and.w	r4, r4, #15
 800a02c:	4e8e      	ldr	r6, [pc, #568]	; (800a268 <_dtoa_r+0x5a8>)
 800a02e:	b954      	cbnz	r4, 800a046 <_dtoa_r+0x386>
 800a030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a038:	f7f6 fb78 	bl	800072c <__aeabi_ddiv>
 800a03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a040:	e029      	b.n	800a096 <_dtoa_r+0x3d6>
 800a042:	2702      	movs	r7, #2
 800a044:	e7f2      	b.n	800a02c <_dtoa_r+0x36c>
 800a046:	07e1      	lsls	r1, r4, #31
 800a048:	d508      	bpl.n	800a05c <_dtoa_r+0x39c>
 800a04a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a04e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a052:	f7f6 fa41 	bl	80004d8 <__aeabi_dmul>
 800a056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a05a:	3701      	adds	r7, #1
 800a05c:	1064      	asrs	r4, r4, #1
 800a05e:	3608      	adds	r6, #8
 800a060:	e7e5      	b.n	800a02e <_dtoa_r+0x36e>
 800a062:	f000 80a5 	beq.w	800a1b0 <_dtoa_r+0x4f0>
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a06a:	f1ca 0400 	rsb	r4, sl, #0
 800a06e:	4b7d      	ldr	r3, [pc, #500]	; (800a264 <_dtoa_r+0x5a4>)
 800a070:	f004 020f 	and.w	r2, r4, #15
 800a074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f7f6 fa2c 	bl	80004d8 <__aeabi_dmul>
 800a080:	2702      	movs	r7, #2
 800a082:	2300      	movs	r3, #0
 800a084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a088:	4e77      	ldr	r6, [pc, #476]	; (800a268 <_dtoa_r+0x5a8>)
 800a08a:	1124      	asrs	r4, r4, #4
 800a08c:	2c00      	cmp	r4, #0
 800a08e:	f040 8084 	bne.w	800a19a <_dtoa_r+0x4da>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1d2      	bne.n	800a03c <_dtoa_r+0x37c>
 800a096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 808b 	beq.w	800a1b4 <_dtoa_r+0x4f4>
 800a09e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a0a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	4b6f      	ldr	r3, [pc, #444]	; (800a26c <_dtoa_r+0x5ac>)
 800a0ae:	f7f6 fc85 	bl	80009bc <__aeabi_dcmplt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d07e      	beq.n	800a1b4 <_dtoa_r+0x4f4>
 800a0b6:	9b08      	ldr	r3, [sp, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d07b      	beq.n	800a1b4 <_dtoa_r+0x4f4>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	dd38      	ble.n	800a134 <_dtoa_r+0x474>
 800a0c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4b69      	ldr	r3, [pc, #420]	; (800a270 <_dtoa_r+0x5b0>)
 800a0ca:	f7f6 fa05 	bl	80004d8 <__aeabi_dmul>
 800a0ce:	464c      	mov	r4, r9
 800a0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a0d8:	3701      	adds	r7, #1
 800a0da:	4638      	mov	r0, r7
 800a0dc:	f7f6 f992 	bl	8000404 <__aeabi_i2d>
 800a0e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4b62      	ldr	r3, [pc, #392]	; (800a274 <_dtoa_r+0x5b4>)
 800a0ec:	f7f6 f83e 	bl	800016c <__adddf3>
 800a0f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a0f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0f8:	9611      	str	r6, [sp, #68]	; 0x44
 800a0fa:	2c00      	cmp	r4, #0
 800a0fc:	d15d      	bne.n	800a1ba <_dtoa_r+0x4fa>
 800a0fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a102:	2200      	movs	r2, #0
 800a104:	4b5c      	ldr	r3, [pc, #368]	; (800a278 <_dtoa_r+0x5b8>)
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a112:	4633      	mov	r3, r6
 800a114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a116:	f7f6 fc6f 	bl	80009f8 <__aeabi_dcmpgt>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f040 829c 	bne.w	800a658 <_dtoa_r+0x998>
 800a120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a126:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a12a:	f7f6 fc47 	bl	80009bc <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	f040 8290 	bne.w	800a654 <_dtoa_r+0x994>
 800a134:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f2c0 8152 	blt.w	800a3e8 <_dtoa_r+0x728>
 800a144:	f1ba 0f0e 	cmp.w	sl, #14
 800a148:	f300 814e 	bgt.w	800a3e8 <_dtoa_r+0x728>
 800a14c:	4b45      	ldr	r3, [pc, #276]	; (800a264 <_dtoa_r+0x5a4>)
 800a14e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a152:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a156:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a15a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f280 80db 	bge.w	800a318 <_dtoa_r+0x658>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f300 80d7 	bgt.w	800a318 <_dtoa_r+0x658>
 800a16a:	f040 8272 	bne.w	800a652 <_dtoa_r+0x992>
 800a16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a172:	2200      	movs	r2, #0
 800a174:	4b40      	ldr	r3, [pc, #256]	; (800a278 <_dtoa_r+0x5b8>)
 800a176:	f7f6 f9af 	bl	80004d8 <__aeabi_dmul>
 800a17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17e:	f7f6 fc31 	bl	80009e4 <__aeabi_dcmpge>
 800a182:	9c08      	ldr	r4, [sp, #32]
 800a184:	4626      	mov	r6, r4
 800a186:	2800      	cmp	r0, #0
 800a188:	f040 8248 	bne.w	800a61c <_dtoa_r+0x95c>
 800a18c:	2331      	movs	r3, #49	; 0x31
 800a18e:	9f03      	ldr	r7, [sp, #12]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	f807 3b01 	strb.w	r3, [r7], #1
 800a198:	e244      	b.n	800a624 <_dtoa_r+0x964>
 800a19a:	07e2      	lsls	r2, r4, #31
 800a19c:	d505      	bpl.n	800a1aa <_dtoa_r+0x4ea>
 800a19e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1a2:	f7f6 f999 	bl	80004d8 <__aeabi_dmul>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	3701      	adds	r7, #1
 800a1aa:	1064      	asrs	r4, r4, #1
 800a1ac:	3608      	adds	r6, #8
 800a1ae:	e76d      	b.n	800a08c <_dtoa_r+0x3cc>
 800a1b0:	2702      	movs	r7, #2
 800a1b2:	e770      	b.n	800a096 <_dtoa_r+0x3d6>
 800a1b4:	46d0      	mov	r8, sl
 800a1b6:	9c08      	ldr	r4, [sp, #32]
 800a1b8:	e78f      	b.n	800a0da <_dtoa_r+0x41a>
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	4b29      	ldr	r3, [pc, #164]	; (800a264 <_dtoa_r+0x5a4>)
 800a1be:	4421      	add	r1, r4
 800a1c0:	9112      	str	r1, [sp, #72]	; 0x48
 800a1c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a1cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	d055      	beq.n	800a280 <_dtoa_r+0x5c0>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4929      	ldr	r1, [pc, #164]	; (800a27c <_dtoa_r+0x5bc>)
 800a1d8:	f7f6 faa8 	bl	800072c <__aeabi_ddiv>
 800a1dc:	463b      	mov	r3, r7
 800a1de:	4632      	mov	r2, r6
 800a1e0:	f7f5 ffc2 	bl	8000168 <__aeabi_dsub>
 800a1e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1e8:	9f03      	ldr	r7, [sp, #12]
 800a1ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1ee:	f7f6 fc23 	bl	8000a38 <__aeabi_d2iz>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f7f6 f906 	bl	8000404 <__aeabi_i2d>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a200:	f7f5 ffb2 	bl	8000168 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	3430      	adds	r4, #48	; 0x30
 800a20a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a212:	f807 4b01 	strb.w	r4, [r7], #1
 800a216:	f7f6 fbd1 	bl	80009bc <__aeabi_dcmplt>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d174      	bne.n	800a308 <_dtoa_r+0x648>
 800a21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a222:	2000      	movs	r0, #0
 800a224:	4911      	ldr	r1, [pc, #68]	; (800a26c <_dtoa_r+0x5ac>)
 800a226:	f7f5 ff9f 	bl	8000168 <__aeabi_dsub>
 800a22a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a22e:	f7f6 fbc5 	bl	80009bc <__aeabi_dcmplt>
 800a232:	2800      	cmp	r0, #0
 800a234:	f040 80b7 	bne.w	800a3a6 <_dtoa_r+0x6e6>
 800a238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a23a:	429f      	cmp	r7, r3
 800a23c:	f43f af7a 	beq.w	800a134 <_dtoa_r+0x474>
 800a240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a244:	2200      	movs	r2, #0
 800a246:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <_dtoa_r+0x5b0>)
 800a248:	f7f6 f946 	bl	80004d8 <__aeabi_dmul>
 800a24c:	2200      	movs	r2, #0
 800a24e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a256:	4b06      	ldr	r3, [pc, #24]	; (800a270 <_dtoa_r+0x5b0>)
 800a258:	f7f6 f93e 	bl	80004d8 <__aeabi_dmul>
 800a25c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a260:	e7c3      	b.n	800a1ea <_dtoa_r+0x52a>
 800a262:	bf00      	nop
 800a264:	0800bcc0 	.word	0x0800bcc0
 800a268:	0800bc98 	.word	0x0800bc98
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	40240000 	.word	0x40240000
 800a274:	401c0000 	.word	0x401c0000
 800a278:	40140000 	.word	0x40140000
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 f928 	bl	80004d8 <__aeabi_dmul>
 800a288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a28e:	9c03      	ldr	r4, [sp, #12]
 800a290:	9314      	str	r3, [sp, #80]	; 0x50
 800a292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a296:	f7f6 fbcf 	bl	8000a38 <__aeabi_d2iz>
 800a29a:	9015      	str	r0, [sp, #84]	; 0x54
 800a29c:	f7f6 f8b2 	bl	8000404 <__aeabi_i2d>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a8:	f7f5 ff5e 	bl	8000168 <__aeabi_dsub>
 800a2ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	3330      	adds	r3, #48	; 0x30
 800a2b2:	f804 3b01 	strb.w	r3, [r4], #1
 800a2b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	429c      	cmp	r4, r3
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	d124      	bne.n	800a30c <_dtoa_r+0x64c>
 800a2c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2c6:	4bb0      	ldr	r3, [pc, #704]	; (800a588 <_dtoa_r+0x8c8>)
 800a2c8:	f7f5 ff50 	bl	800016c <__adddf3>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 fb90 	bl	80009f8 <__aeabi_dcmpgt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d163      	bne.n	800a3a4 <_dtoa_r+0x6e4>
 800a2dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	49a9      	ldr	r1, [pc, #676]	; (800a588 <_dtoa_r+0x8c8>)
 800a2e4:	f7f5 ff40 	bl	8000168 <__aeabi_dsub>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 fb64 	bl	80009bc <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af1d 	beq.w	800a134 <_dtoa_r+0x474>
 800a2fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a2fc:	1e7b      	subs	r3, r7, #1
 800a2fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a300:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a304:	2b30      	cmp	r3, #48	; 0x30
 800a306:	d0f8      	beq.n	800a2fa <_dtoa_r+0x63a>
 800a308:	46c2      	mov	sl, r8
 800a30a:	e03b      	b.n	800a384 <_dtoa_r+0x6c4>
 800a30c:	4b9f      	ldr	r3, [pc, #636]	; (800a58c <_dtoa_r+0x8cc>)
 800a30e:	f7f6 f8e3 	bl	80004d8 <__aeabi_dmul>
 800a312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a316:	e7bc      	b.n	800a292 <_dtoa_r+0x5d2>
 800a318:	9f03      	ldr	r7, [sp, #12]
 800a31a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a31e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f6 fa01 	bl	800072c <__aeabi_ddiv>
 800a32a:	f7f6 fb85 	bl	8000a38 <__aeabi_d2iz>
 800a32e:	4604      	mov	r4, r0
 800a330:	f7f6 f868 	bl	8000404 <__aeabi_i2d>
 800a334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a338:	f7f6 f8ce 	bl	80004d8 <__aeabi_dmul>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f5 ff10 	bl	8000168 <__aeabi_dsub>
 800a348:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a34c:	f807 6b01 	strb.w	r6, [r7], #1
 800a350:	9e03      	ldr	r6, [sp, #12]
 800a352:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a356:	1bbe      	subs	r6, r7, r6
 800a358:	45b4      	cmp	ip, r6
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	d136      	bne.n	800a3ce <_dtoa_r+0x70e>
 800a360:	f7f5 ff04 	bl	800016c <__adddf3>
 800a364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a368:	4680      	mov	r8, r0
 800a36a:	4689      	mov	r9, r1
 800a36c:	f7f6 fb44 	bl	80009f8 <__aeabi_dcmpgt>
 800a370:	bb58      	cbnz	r0, 800a3ca <_dtoa_r+0x70a>
 800a372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a376:	4640      	mov	r0, r8
 800a378:	4649      	mov	r1, r9
 800a37a:	f7f6 fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800a37e:	b108      	cbz	r0, 800a384 <_dtoa_r+0x6c4>
 800a380:	07e1      	lsls	r1, r4, #31
 800a382:	d422      	bmi.n	800a3ca <_dtoa_r+0x70a>
 800a384:	4628      	mov	r0, r5
 800a386:	4659      	mov	r1, fp
 800a388:	f000 fd02 	bl	800ad90 <_Bfree>
 800a38c:	2300      	movs	r3, #0
 800a38e:	703b      	strb	r3, [r7, #0]
 800a390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a392:	f10a 0001 	add.w	r0, sl, #1
 800a396:	6018      	str	r0, [r3, #0]
 800a398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f43f acde 	beq.w	8009d5c <_dtoa_r+0x9c>
 800a3a0:	601f      	str	r7, [r3, #0]
 800a3a2:	e4db      	b.n	8009d5c <_dtoa_r+0x9c>
 800a3a4:	4627      	mov	r7, r4
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	461f      	mov	r7, r3
 800a3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ae:	2a39      	cmp	r2, #57	; 0x39
 800a3b0:	d107      	bne.n	800a3c2 <_dtoa_r+0x702>
 800a3b2:	9a03      	ldr	r2, [sp, #12]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d1f7      	bne.n	800a3a8 <_dtoa_r+0x6e8>
 800a3b8:	2230      	movs	r2, #48	; 0x30
 800a3ba:	9903      	ldr	r1, [sp, #12]
 800a3bc:	f108 0801 	add.w	r8, r8, #1
 800a3c0:	700a      	strb	r2, [r1, #0]
 800a3c2:	781a      	ldrb	r2, [r3, #0]
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e79e      	b.n	800a308 <_dtoa_r+0x648>
 800a3ca:	46d0      	mov	r8, sl
 800a3cc:	e7eb      	b.n	800a3a6 <_dtoa_r+0x6e6>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4b6e      	ldr	r3, [pc, #440]	; (800a58c <_dtoa_r+0x8cc>)
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4689      	mov	r9, r1
 800a3de:	f7f6 fae3 	bl	80009a8 <__aeabi_dcmpeq>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d09b      	beq.n	800a31e <_dtoa_r+0x65e>
 800a3e6:	e7cd      	b.n	800a384 <_dtoa_r+0x6c4>
 800a3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	f000 80d0 	beq.w	800a590 <_dtoa_r+0x8d0>
 800a3f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3f2:	2a01      	cmp	r2, #1
 800a3f4:	f300 80ae 	bgt.w	800a554 <_dtoa_r+0x894>
 800a3f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	f000 80a6 	beq.w	800a54c <_dtoa_r+0x88c>
 800a400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a404:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a406:	9f06      	ldr	r7, [sp, #24]
 800a408:	9a06      	ldr	r2, [sp, #24]
 800a40a:	2101      	movs	r1, #1
 800a40c:	441a      	add	r2, r3
 800a40e:	9206      	str	r2, [sp, #24]
 800a410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a412:	4628      	mov	r0, r5
 800a414:	441a      	add	r2, r3
 800a416:	9209      	str	r2, [sp, #36]	; 0x24
 800a418:	f000 fd70 	bl	800aefc <__i2b>
 800a41c:	4606      	mov	r6, r0
 800a41e:	2f00      	cmp	r7, #0
 800a420:	dd0c      	ble.n	800a43c <_dtoa_r+0x77c>
 800a422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a424:	2b00      	cmp	r3, #0
 800a426:	dd09      	ble.n	800a43c <_dtoa_r+0x77c>
 800a428:	42bb      	cmp	r3, r7
 800a42a:	bfa8      	it	ge
 800a42c:	463b      	movge	r3, r7
 800a42e:	9a06      	ldr	r2, [sp, #24]
 800a430:	1aff      	subs	r7, r7, r3
 800a432:	1ad2      	subs	r2, r2, r3
 800a434:	9206      	str	r2, [sp, #24]
 800a436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	9309      	str	r3, [sp, #36]	; 0x24
 800a43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43e:	b1f3      	cbz	r3, 800a47e <_dtoa_r+0x7be>
 800a440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80a8 	beq.w	800a598 <_dtoa_r+0x8d8>
 800a448:	2c00      	cmp	r4, #0
 800a44a:	dd10      	ble.n	800a46e <_dtoa_r+0x7ae>
 800a44c:	4631      	mov	r1, r6
 800a44e:	4622      	mov	r2, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 fe11 	bl	800b078 <__pow5mult>
 800a456:	465a      	mov	r2, fp
 800a458:	4601      	mov	r1, r0
 800a45a:	4606      	mov	r6, r0
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 fd63 	bl	800af28 <__multiply>
 800a462:	4680      	mov	r8, r0
 800a464:	4659      	mov	r1, fp
 800a466:	4628      	mov	r0, r5
 800a468:	f000 fc92 	bl	800ad90 <_Bfree>
 800a46c:	46c3      	mov	fp, r8
 800a46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a470:	1b1a      	subs	r2, r3, r4
 800a472:	d004      	beq.n	800a47e <_dtoa_r+0x7be>
 800a474:	4659      	mov	r1, fp
 800a476:	4628      	mov	r0, r5
 800a478:	f000 fdfe 	bl	800b078 <__pow5mult>
 800a47c:	4683      	mov	fp, r0
 800a47e:	2101      	movs	r1, #1
 800a480:	4628      	mov	r0, r5
 800a482:	f000 fd3b 	bl	800aefc <__i2b>
 800a486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a488:	4604      	mov	r4, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f340 8086 	ble.w	800a59c <_dtoa_r+0x8dc>
 800a490:	461a      	mov	r2, r3
 800a492:	4601      	mov	r1, r0
 800a494:	4628      	mov	r0, r5
 800a496:	f000 fdef 	bl	800b078 <__pow5mult>
 800a49a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a49c:	4604      	mov	r4, r0
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	dd7f      	ble.n	800a5a2 <_dtoa_r+0x8e2>
 800a4a2:	f04f 0800 	mov.w	r8, #0
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4ac:	6918      	ldr	r0, [r3, #16]
 800a4ae:	f000 fcd7 	bl	800ae60 <__hi0bits>
 800a4b2:	f1c0 0020 	rsb	r0, r0, #32
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	4418      	add	r0, r3
 800a4ba:	f010 001f 	ands.w	r0, r0, #31
 800a4be:	f000 8092 	beq.w	800a5e6 <_dtoa_r+0x926>
 800a4c2:	f1c0 0320 	rsb	r3, r0, #32
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	f340 808a 	ble.w	800a5e0 <_dtoa_r+0x920>
 800a4cc:	f1c0 001c 	rsb	r0, r0, #28
 800a4d0:	9b06      	ldr	r3, [sp, #24]
 800a4d2:	4407      	add	r7, r0
 800a4d4:	4403      	add	r3, r0
 800a4d6:	9306      	str	r3, [sp, #24]
 800a4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4da:	4403      	add	r3, r0
 800a4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4de:	9b06      	ldr	r3, [sp, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd05      	ble.n	800a4f0 <_dtoa_r+0x830>
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 fe1f 	bl	800b12c <__lshift>
 800a4ee:	4683      	mov	fp, r0
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	dd05      	ble.n	800a502 <_dtoa_r+0x842>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 fe16 	bl	800b12c <__lshift>
 800a500:	4604      	mov	r4, r0
 800a502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d070      	beq.n	800a5ea <_dtoa_r+0x92a>
 800a508:	4621      	mov	r1, r4
 800a50a:	4658      	mov	r0, fp
 800a50c:	f000 fe7e 	bl	800b20c <__mcmp>
 800a510:	2800      	cmp	r0, #0
 800a512:	da6a      	bge.n	800a5ea <_dtoa_r+0x92a>
 800a514:	2300      	movs	r3, #0
 800a516:	4659      	mov	r1, fp
 800a518:	220a      	movs	r2, #10
 800a51a:	4628      	mov	r0, r5
 800a51c:	f000 fc5a 	bl	800add4 <__multadd>
 800a520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a522:	4683      	mov	fp, r0
 800a524:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 8194 	beq.w	800a856 <_dtoa_r+0xb96>
 800a52e:	4631      	mov	r1, r6
 800a530:	2300      	movs	r3, #0
 800a532:	220a      	movs	r2, #10
 800a534:	4628      	mov	r0, r5
 800a536:	f000 fc4d 	bl	800add4 <__multadd>
 800a53a:	f1b9 0f00 	cmp.w	r9, #0
 800a53e:	4606      	mov	r6, r0
 800a540:	f300 8093 	bgt.w	800a66a <_dtoa_r+0x9aa>
 800a544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a546:	2b02      	cmp	r3, #2
 800a548:	dc57      	bgt.n	800a5fa <_dtoa_r+0x93a>
 800a54a:	e08e      	b.n	800a66a <_dtoa_r+0x9aa>
 800a54c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a54e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a552:	e757      	b.n	800a404 <_dtoa_r+0x744>
 800a554:	9b08      	ldr	r3, [sp, #32]
 800a556:	1e5c      	subs	r4, r3, #1
 800a558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	bfb7      	itett	lt
 800a55e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a560:	1b1c      	subge	r4, r3, r4
 800a562:	1ae2      	sublt	r2, r4, r3
 800a564:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a566:	bfbe      	ittt	lt
 800a568:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a56a:	189b      	addlt	r3, r3, r2
 800a56c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a56e:	9b08      	ldr	r3, [sp, #32]
 800a570:	bfb8      	it	lt
 800a572:	2400      	movlt	r4, #0
 800a574:	2b00      	cmp	r3, #0
 800a576:	bfbb      	ittet	lt
 800a578:	9b06      	ldrlt	r3, [sp, #24]
 800a57a:	9a08      	ldrlt	r2, [sp, #32]
 800a57c:	9f06      	ldrge	r7, [sp, #24]
 800a57e:	1a9f      	sublt	r7, r3, r2
 800a580:	bfac      	ite	ge
 800a582:	9b08      	ldrge	r3, [sp, #32]
 800a584:	2300      	movlt	r3, #0
 800a586:	e73f      	b.n	800a408 <_dtoa_r+0x748>
 800a588:	3fe00000 	.word	0x3fe00000
 800a58c:	40240000 	.word	0x40240000
 800a590:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a592:	9f06      	ldr	r7, [sp, #24]
 800a594:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a596:	e742      	b.n	800a41e <_dtoa_r+0x75e>
 800a598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59a:	e76b      	b.n	800a474 <_dtoa_r+0x7b4>
 800a59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	dc19      	bgt.n	800a5d6 <_dtoa_r+0x916>
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	b9bb      	cbnz	r3, 800a5d6 <_dtoa_r+0x916>
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5ac:	b99b      	cbnz	r3, 800a5d6 <_dtoa_r+0x916>
 800a5ae:	9b05      	ldr	r3, [sp, #20]
 800a5b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5b4:	0d1b      	lsrs	r3, r3, #20
 800a5b6:	051b      	lsls	r3, r3, #20
 800a5b8:	b183      	cbz	r3, 800a5dc <_dtoa_r+0x91c>
 800a5ba:	f04f 0801 	mov.w	r8, #1
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	9306      	str	r3, [sp, #24]
 800a5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f af6a 	bne.w	800a4a6 <_dtoa_r+0x7e6>
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e76f      	b.n	800a4b6 <_dtoa_r+0x7f6>
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	e7f6      	b.n	800a5ca <_dtoa_r+0x90a>
 800a5dc:	4698      	mov	r8, r3
 800a5de:	e7f4      	b.n	800a5ca <_dtoa_r+0x90a>
 800a5e0:	f43f af7d 	beq.w	800a4de <_dtoa_r+0x81e>
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	301c      	adds	r0, #28
 800a5e8:	e772      	b.n	800a4d0 <_dtoa_r+0x810>
 800a5ea:	9b08      	ldr	r3, [sp, #32]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dc36      	bgt.n	800a65e <_dtoa_r+0x99e>
 800a5f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	dd33      	ble.n	800a65e <_dtoa_r+0x99e>
 800a5f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	d10d      	bne.n	800a61c <_dtoa_r+0x95c>
 800a600:	4621      	mov	r1, r4
 800a602:	464b      	mov	r3, r9
 800a604:	2205      	movs	r2, #5
 800a606:	4628      	mov	r0, r5
 800a608:	f000 fbe4 	bl	800add4 <__multadd>
 800a60c:	4601      	mov	r1, r0
 800a60e:	4604      	mov	r4, r0
 800a610:	4658      	mov	r0, fp
 800a612:	f000 fdfb 	bl	800b20c <__mcmp>
 800a616:	2800      	cmp	r0, #0
 800a618:	f73f adb8 	bgt.w	800a18c <_dtoa_r+0x4cc>
 800a61c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a61e:	9f03      	ldr	r7, [sp, #12]
 800a620:	ea6f 0a03 	mvn.w	sl, r3
 800a624:	f04f 0800 	mov.w	r8, #0
 800a628:	4621      	mov	r1, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	f000 fbb0 	bl	800ad90 <_Bfree>
 800a630:	2e00      	cmp	r6, #0
 800a632:	f43f aea7 	beq.w	800a384 <_dtoa_r+0x6c4>
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	d005      	beq.n	800a648 <_dtoa_r+0x988>
 800a63c:	45b0      	cmp	r8, r6
 800a63e:	d003      	beq.n	800a648 <_dtoa_r+0x988>
 800a640:	4641      	mov	r1, r8
 800a642:	4628      	mov	r0, r5
 800a644:	f000 fba4 	bl	800ad90 <_Bfree>
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	f000 fba0 	bl	800ad90 <_Bfree>
 800a650:	e698      	b.n	800a384 <_dtoa_r+0x6c4>
 800a652:	2400      	movs	r4, #0
 800a654:	4626      	mov	r6, r4
 800a656:	e7e1      	b.n	800a61c <_dtoa_r+0x95c>
 800a658:	46c2      	mov	sl, r8
 800a65a:	4626      	mov	r6, r4
 800a65c:	e596      	b.n	800a18c <_dtoa_r+0x4cc>
 800a65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80fd 	beq.w	800a864 <_dtoa_r+0xba4>
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	dd05      	ble.n	800a67a <_dtoa_r+0x9ba>
 800a66e:	4631      	mov	r1, r6
 800a670:	463a      	mov	r2, r7
 800a672:	4628      	mov	r0, r5
 800a674:	f000 fd5a 	bl	800b12c <__lshift>
 800a678:	4606      	mov	r6, r0
 800a67a:	f1b8 0f00 	cmp.w	r8, #0
 800a67e:	d05c      	beq.n	800a73a <_dtoa_r+0xa7a>
 800a680:	4628      	mov	r0, r5
 800a682:	6871      	ldr	r1, [r6, #4]
 800a684:	f000 fb44 	bl	800ad10 <_Balloc>
 800a688:	4607      	mov	r7, r0
 800a68a:	b928      	cbnz	r0, 800a698 <_dtoa_r+0x9d8>
 800a68c:	4602      	mov	r2, r0
 800a68e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a692:	4b7f      	ldr	r3, [pc, #508]	; (800a890 <_dtoa_r+0xbd0>)
 800a694:	f7ff bb28 	b.w	8009ce8 <_dtoa_r+0x28>
 800a698:	6932      	ldr	r2, [r6, #16]
 800a69a:	f106 010c 	add.w	r1, r6, #12
 800a69e:	3202      	adds	r2, #2
 800a6a0:	0092      	lsls	r2, r2, #2
 800a6a2:	300c      	adds	r0, #12
 800a6a4:	f7fe fbce 	bl	8008e44 <memcpy>
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 fd3d 	bl	800b12c <__lshift>
 800a6b2:	46b0      	mov	r8, r6
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	9308      	str	r3, [sp, #32]
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	444b      	add	r3, r9
 800a6c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ca:	9b08      	ldr	r3, [sp, #32]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4658      	mov	r0, fp
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	f7ff fa66 	bl	8009ba4 <quorem>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4641      	mov	r1, r8
 800a6dc:	3330      	adds	r3, #48	; 0x30
 800a6de:	9006      	str	r0, [sp, #24]
 800a6e0:	4658      	mov	r0, fp
 800a6e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6e4:	f000 fd92 	bl	800b20c <__mcmp>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4681      	mov	r9, r0
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 fda8 	bl	800b244 <__mdiff>
 800a6f4:	68c2      	ldr	r2, [r0, #12]
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fa:	bb02      	cbnz	r2, 800a73e <_dtoa_r+0xa7e>
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	4658      	mov	r0, fp
 800a700:	f000 fd84 	bl	800b20c <__mcmp>
 800a704:	4602      	mov	r2, r0
 800a706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a708:	4639      	mov	r1, r7
 800a70a:	4628      	mov	r0, r5
 800a70c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a710:	f000 fb3e 	bl	800ad90 <_Bfree>
 800a714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a718:	9f08      	ldr	r7, [sp, #32]
 800a71a:	ea43 0102 	orr.w	r1, r3, r2
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	430b      	orrs	r3, r1
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	d10d      	bne.n	800a742 <_dtoa_r+0xa82>
 800a726:	2b39      	cmp	r3, #57	; 0x39
 800a728:	d029      	beq.n	800a77e <_dtoa_r+0xabe>
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	dd01      	ble.n	800a734 <_dtoa_r+0xa74>
 800a730:	9b06      	ldr	r3, [sp, #24]
 800a732:	3331      	adds	r3, #49	; 0x31
 800a734:	9a04      	ldr	r2, [sp, #16]
 800a736:	7013      	strb	r3, [r2, #0]
 800a738:	e776      	b.n	800a628 <_dtoa_r+0x968>
 800a73a:	4630      	mov	r0, r6
 800a73c:	e7b9      	b.n	800a6b2 <_dtoa_r+0x9f2>
 800a73e:	2201      	movs	r2, #1
 800a740:	e7e2      	b.n	800a708 <_dtoa_r+0xa48>
 800a742:	f1b9 0f00 	cmp.w	r9, #0
 800a746:	db06      	blt.n	800a756 <_dtoa_r+0xa96>
 800a748:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a74a:	ea41 0909 	orr.w	r9, r1, r9
 800a74e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a750:	ea59 0101 	orrs.w	r1, r9, r1
 800a754:	d120      	bne.n	800a798 <_dtoa_r+0xad8>
 800a756:	2a00      	cmp	r2, #0
 800a758:	ddec      	ble.n	800a734 <_dtoa_r+0xa74>
 800a75a:	4659      	mov	r1, fp
 800a75c:	2201      	movs	r2, #1
 800a75e:	4628      	mov	r0, r5
 800a760:	9308      	str	r3, [sp, #32]
 800a762:	f000 fce3 	bl	800b12c <__lshift>
 800a766:	4621      	mov	r1, r4
 800a768:	4683      	mov	fp, r0
 800a76a:	f000 fd4f 	bl	800b20c <__mcmp>
 800a76e:	2800      	cmp	r0, #0
 800a770:	9b08      	ldr	r3, [sp, #32]
 800a772:	dc02      	bgt.n	800a77a <_dtoa_r+0xaba>
 800a774:	d1de      	bne.n	800a734 <_dtoa_r+0xa74>
 800a776:	07da      	lsls	r2, r3, #31
 800a778:	d5dc      	bpl.n	800a734 <_dtoa_r+0xa74>
 800a77a:	2b39      	cmp	r3, #57	; 0x39
 800a77c:	d1d8      	bne.n	800a730 <_dtoa_r+0xa70>
 800a77e:	2339      	movs	r3, #57	; 0x39
 800a780:	9a04      	ldr	r2, [sp, #16]
 800a782:	7013      	strb	r3, [r2, #0]
 800a784:	463b      	mov	r3, r7
 800a786:	461f      	mov	r7, r3
 800a788:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	2a39      	cmp	r2, #57	; 0x39
 800a790:	d050      	beq.n	800a834 <_dtoa_r+0xb74>
 800a792:	3201      	adds	r2, #1
 800a794:	701a      	strb	r2, [r3, #0]
 800a796:	e747      	b.n	800a628 <_dtoa_r+0x968>
 800a798:	2a00      	cmp	r2, #0
 800a79a:	dd03      	ble.n	800a7a4 <_dtoa_r+0xae4>
 800a79c:	2b39      	cmp	r3, #57	; 0x39
 800a79e:	d0ee      	beq.n	800a77e <_dtoa_r+0xabe>
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	e7c7      	b.n	800a734 <_dtoa_r+0xa74>
 800a7a4:	9a08      	ldr	r2, [sp, #32]
 800a7a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7ac:	428a      	cmp	r2, r1
 800a7ae:	d02a      	beq.n	800a806 <_dtoa_r+0xb46>
 800a7b0:	4659      	mov	r1, fp
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	220a      	movs	r2, #10
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 fb0c 	bl	800add4 <__multadd>
 800a7bc:	45b0      	cmp	r8, r6
 800a7be:	4683      	mov	fp, r0
 800a7c0:	f04f 0300 	mov.w	r3, #0
 800a7c4:	f04f 020a 	mov.w	r2, #10
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	d107      	bne.n	800a7de <_dtoa_r+0xb1e>
 800a7ce:	f000 fb01 	bl	800add4 <__multadd>
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	9b08      	ldr	r3, [sp, #32]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	9308      	str	r3, [sp, #32]
 800a7dc:	e775      	b.n	800a6ca <_dtoa_r+0xa0a>
 800a7de:	f000 faf9 	bl	800add4 <__multadd>
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	220a      	movs	r2, #10
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 faf2 	bl	800add4 <__multadd>
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	e7f0      	b.n	800a7d6 <_dtoa_r+0xb16>
 800a7f4:	f1b9 0f00 	cmp.w	r9, #0
 800a7f8:	bfcc      	ite	gt
 800a7fa:	464f      	movgt	r7, r9
 800a7fc:	2701      	movle	r7, #1
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	9a03      	ldr	r2, [sp, #12]
 800a804:	4417      	add	r7, r2
 800a806:	4659      	mov	r1, fp
 800a808:	2201      	movs	r2, #1
 800a80a:	4628      	mov	r0, r5
 800a80c:	9308      	str	r3, [sp, #32]
 800a80e:	f000 fc8d 	bl	800b12c <__lshift>
 800a812:	4621      	mov	r1, r4
 800a814:	4683      	mov	fp, r0
 800a816:	f000 fcf9 	bl	800b20c <__mcmp>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	dcb2      	bgt.n	800a784 <_dtoa_r+0xac4>
 800a81e:	d102      	bne.n	800a826 <_dtoa_r+0xb66>
 800a820:	9b08      	ldr	r3, [sp, #32]
 800a822:	07db      	lsls	r3, r3, #31
 800a824:	d4ae      	bmi.n	800a784 <_dtoa_r+0xac4>
 800a826:	463b      	mov	r3, r7
 800a828:	461f      	mov	r7, r3
 800a82a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a82e:	2a30      	cmp	r2, #48	; 0x30
 800a830:	d0fa      	beq.n	800a828 <_dtoa_r+0xb68>
 800a832:	e6f9      	b.n	800a628 <_dtoa_r+0x968>
 800a834:	9a03      	ldr	r2, [sp, #12]
 800a836:	429a      	cmp	r2, r3
 800a838:	d1a5      	bne.n	800a786 <_dtoa_r+0xac6>
 800a83a:	2331      	movs	r3, #49	; 0x31
 800a83c:	f10a 0a01 	add.w	sl, sl, #1
 800a840:	e779      	b.n	800a736 <_dtoa_r+0xa76>
 800a842:	4b14      	ldr	r3, [pc, #80]	; (800a894 <_dtoa_r+0xbd4>)
 800a844:	f7ff baa8 	b.w	8009d98 <_dtoa_r+0xd8>
 800a848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f47f aa81 	bne.w	8009d52 <_dtoa_r+0x92>
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <_dtoa_r+0xbd8>)
 800a852:	f7ff baa1 	b.w	8009d98 <_dtoa_r+0xd8>
 800a856:	f1b9 0f00 	cmp.w	r9, #0
 800a85a:	dc03      	bgt.n	800a864 <_dtoa_r+0xba4>
 800a85c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a85e:	2b02      	cmp	r3, #2
 800a860:	f73f aecb 	bgt.w	800a5fa <_dtoa_r+0x93a>
 800a864:	9f03      	ldr	r7, [sp, #12]
 800a866:	4621      	mov	r1, r4
 800a868:	4658      	mov	r0, fp
 800a86a:	f7ff f99b 	bl	8009ba4 <quorem>
 800a86e:	9a03      	ldr	r2, [sp, #12]
 800a870:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a874:	f807 3b01 	strb.w	r3, [r7], #1
 800a878:	1aba      	subs	r2, r7, r2
 800a87a:	4591      	cmp	r9, r2
 800a87c:	ddba      	ble.n	800a7f4 <_dtoa_r+0xb34>
 800a87e:	4659      	mov	r1, fp
 800a880:	2300      	movs	r3, #0
 800a882:	220a      	movs	r2, #10
 800a884:	4628      	mov	r0, r5
 800a886:	f000 faa5 	bl	800add4 <__multadd>
 800a88a:	4683      	mov	fp, r0
 800a88c:	e7eb      	b.n	800a866 <_dtoa_r+0xba6>
 800a88e:	bf00      	nop
 800a890:	0800bbc7 	.word	0x0800bbc7
 800a894:	0800bb24 	.word	0x0800bb24
 800a898:	0800bb48 	.word	0x0800bb48

0800a89c <__sflush_r>:
 800a89c:	898a      	ldrh	r2, [r1, #12]
 800a89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	0710      	lsls	r0, r2, #28
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	d457      	bmi.n	800a958 <__sflush_r+0xbc>
 800a8a8:	684b      	ldr	r3, [r1, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	dc04      	bgt.n	800a8b8 <__sflush_r+0x1c>
 800a8ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc01      	bgt.n	800a8b8 <__sflush_r+0x1c>
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	d0fa      	beq.n	800a8b4 <__sflush_r+0x18>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8c4:	682f      	ldr	r7, [r5, #0]
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	d032      	beq.n	800a930 <__sflush_r+0x94>
 800a8ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	075a      	lsls	r2, r3, #29
 800a8d0:	d505      	bpl.n	800a8de <__sflush_r+0x42>
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	1ac0      	subs	r0, r0, r3
 800a8d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d8:	b10b      	cbz	r3, 800a8de <__sflush_r+0x42>
 800a8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8dc:	1ac0      	subs	r0, r0, r3
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	6a21      	ldr	r1, [r4, #32]
 800a8e8:	47b0      	blx	r6
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	d106      	bne.n	800a8fe <__sflush_r+0x62>
 800a8f0:	6829      	ldr	r1, [r5, #0]
 800a8f2:	291d      	cmp	r1, #29
 800a8f4:	d82c      	bhi.n	800a950 <__sflush_r+0xb4>
 800a8f6:	4a29      	ldr	r2, [pc, #164]	; (800a99c <__sflush_r+0x100>)
 800a8f8:	40ca      	lsrs	r2, r1
 800a8fa:	07d6      	lsls	r6, r2, #31
 800a8fc:	d528      	bpl.n	800a950 <__sflush_r+0xb4>
 800a8fe:	2200      	movs	r2, #0
 800a900:	6062      	str	r2, [r4, #4]
 800a902:	6922      	ldr	r2, [r4, #16]
 800a904:	04d9      	lsls	r1, r3, #19
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	d504      	bpl.n	800a914 <__sflush_r+0x78>
 800a90a:	1c42      	adds	r2, r0, #1
 800a90c:	d101      	bne.n	800a912 <__sflush_r+0x76>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b903      	cbnz	r3, 800a914 <__sflush_r+0x78>
 800a912:	6560      	str	r0, [r4, #84]	; 0x54
 800a914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a916:	602f      	str	r7, [r5, #0]
 800a918:	2900      	cmp	r1, #0
 800a91a:	d0cb      	beq.n	800a8b4 <__sflush_r+0x18>
 800a91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a920:	4299      	cmp	r1, r3
 800a922:	d002      	beq.n	800a92a <__sflush_r+0x8e>
 800a924:	4628      	mov	r0, r5
 800a926:	f7fe faa3 	bl	8008e70 <_free_r>
 800a92a:	2000      	movs	r0, #0
 800a92c:	6360      	str	r0, [r4, #52]	; 0x34
 800a92e:	e7c2      	b.n	800a8b6 <__sflush_r+0x1a>
 800a930:	6a21      	ldr	r1, [r4, #32]
 800a932:	2301      	movs	r3, #1
 800a934:	4628      	mov	r0, r5
 800a936:	47b0      	blx	r6
 800a938:	1c41      	adds	r1, r0, #1
 800a93a:	d1c7      	bne.n	800a8cc <__sflush_r+0x30>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0c4      	beq.n	800a8cc <__sflush_r+0x30>
 800a942:	2b1d      	cmp	r3, #29
 800a944:	d001      	beq.n	800a94a <__sflush_r+0xae>
 800a946:	2b16      	cmp	r3, #22
 800a948:	d101      	bne.n	800a94e <__sflush_r+0xb2>
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	e7b2      	b.n	800a8b4 <__sflush_r+0x18>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e7ae      	b.n	800a8b6 <__sflush_r+0x1a>
 800a958:	690f      	ldr	r7, [r1, #16]
 800a95a:	2f00      	cmp	r7, #0
 800a95c:	d0aa      	beq.n	800a8b4 <__sflush_r+0x18>
 800a95e:	0793      	lsls	r3, r2, #30
 800a960:	bf18      	it	ne
 800a962:	2300      	movne	r3, #0
 800a964:	680e      	ldr	r6, [r1, #0]
 800a966:	bf08      	it	eq
 800a968:	694b      	ldreq	r3, [r1, #20]
 800a96a:	1bf6      	subs	r6, r6, r7
 800a96c:	600f      	str	r7, [r1, #0]
 800a96e:	608b      	str	r3, [r1, #8]
 800a970:	2e00      	cmp	r6, #0
 800a972:	dd9f      	ble.n	800a8b4 <__sflush_r+0x18>
 800a974:	4633      	mov	r3, r6
 800a976:	463a      	mov	r2, r7
 800a978:	4628      	mov	r0, r5
 800a97a:	6a21      	ldr	r1, [r4, #32]
 800a97c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a980:	47e0      	blx	ip
 800a982:	2800      	cmp	r0, #0
 800a984:	dc06      	bgt.n	800a994 <__sflush_r+0xf8>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	e790      	b.n	800a8b6 <__sflush_r+0x1a>
 800a994:	4407      	add	r7, r0
 800a996:	1a36      	subs	r6, r6, r0
 800a998:	e7ea      	b.n	800a970 <__sflush_r+0xd4>
 800a99a:	bf00      	nop
 800a99c:	20400001 	.word	0x20400001

0800a9a0 <_fflush_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_fflush_r+0x10>
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	b118      	cbz	r0, 800a9ba <_fflush_r+0x1a>
 800a9b2:	6983      	ldr	r3, [r0, #24]
 800a9b4:	b90b      	cbnz	r3, 800a9ba <_fflush_r+0x1a>
 800a9b6:	f000 f887 	bl	800aac8 <__sinit>
 800a9ba:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <_fflush_r+0x6c>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	d11b      	bne.n	800a9f8 <_fflush_r+0x58>
 800a9c0:	686c      	ldr	r4, [r5, #4]
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ef      	beq.n	800a9aa <_fflush_r+0xa>
 800a9ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9cc:	07d0      	lsls	r0, r2, #31
 800a9ce:	d404      	bmi.n	800a9da <_fflush_r+0x3a>
 800a9d0:	0599      	lsls	r1, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_fflush_r+0x3a>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d6:	f000 f91a 	bl	800ac0e <__retarget_lock_acquire_recursive>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f7ff ff5d 	bl	800a89c <__sflush_r>
 800a9e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	07da      	lsls	r2, r3, #31
 800a9e8:	d4e0      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	059b      	lsls	r3, r3, #22
 800a9ee:	d4dd      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9f2:	f000 f90d 	bl	800ac10 <__retarget_lock_release_recursive>
 800a9f6:	e7d9      	b.n	800a9ac <_fflush_r+0xc>
 800a9f8:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <_fflush_r+0x70>)
 800a9fa:	429c      	cmp	r4, r3
 800a9fc:	d101      	bne.n	800aa02 <_fflush_r+0x62>
 800a9fe:	68ac      	ldr	r4, [r5, #8]
 800aa00:	e7df      	b.n	800a9c2 <_fflush_r+0x22>
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <_fflush_r+0x74>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	bf08      	it	eq
 800aa08:	68ec      	ldreq	r4, [r5, #12]
 800aa0a:	e7da      	b.n	800a9c2 <_fflush_r+0x22>
 800aa0c:	0800bbf8 	.word	0x0800bbf8
 800aa10:	0800bc18 	.word	0x0800bc18
 800aa14:	0800bbd8 	.word	0x0800bbd8

0800aa18 <std>:
 800aa18:	2300      	movs	r3, #0
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa26:	6083      	str	r3, [r0, #8]
 800aa28:	8181      	strh	r1, [r0, #12]
 800aa2a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa2c:	81c2      	strh	r2, [r0, #14]
 800aa2e:	6183      	str	r3, [r0, #24]
 800aa30:	4619      	mov	r1, r3
 800aa32:	2208      	movs	r2, #8
 800aa34:	305c      	adds	r0, #92	; 0x5c
 800aa36:	f7fe fa13 	bl	8008e60 <memset>
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <std+0x38>)
 800aa3c:	6224      	str	r4, [r4, #32]
 800aa3e:	6263      	str	r3, [r4, #36]	; 0x24
 800aa40:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <std+0x3c>)
 800aa42:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <std+0x40>)
 800aa46:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <std+0x44>)
 800aa4a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	bf00      	nop
 800aa50:	0800b6ed 	.word	0x0800b6ed
 800aa54:	0800b70f 	.word	0x0800b70f
 800aa58:	0800b747 	.word	0x0800b747
 800aa5c:	0800b76b 	.word	0x0800b76b

0800aa60 <_cleanup_r>:
 800aa60:	4901      	ldr	r1, [pc, #4]	; (800aa68 <_cleanup_r+0x8>)
 800aa62:	f000 b8af 	b.w	800abc4 <_fwalk_reent>
 800aa66:	bf00      	nop
 800aa68:	0800a9a1 	.word	0x0800a9a1

0800aa6c <__sfmoreglue>:
 800aa6c:	2268      	movs	r2, #104	; 0x68
 800aa6e:	b570      	push	{r4, r5, r6, lr}
 800aa70:	1e4d      	subs	r5, r1, #1
 800aa72:	4355      	muls	r5, r2
 800aa74:	460e      	mov	r6, r1
 800aa76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa7a:	f7fe fa61 	bl	8008f40 <_malloc_r>
 800aa7e:	4604      	mov	r4, r0
 800aa80:	b140      	cbz	r0, 800aa94 <__sfmoreglue+0x28>
 800aa82:	2100      	movs	r1, #0
 800aa84:	e9c0 1600 	strd	r1, r6, [r0]
 800aa88:	300c      	adds	r0, #12
 800aa8a:	60a0      	str	r0, [r4, #8]
 800aa8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa90:	f7fe f9e6 	bl	8008e60 <memset>
 800aa94:	4620      	mov	r0, r4
 800aa96:	bd70      	pop	{r4, r5, r6, pc}

0800aa98 <__sfp_lock_acquire>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sfp_lock_acquire+0x8>)
 800aa9a:	f000 b8b8 	b.w	800ac0e <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	20001371 	.word	0x20001371

0800aaa4 <__sfp_lock_release>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sfp_lock_release+0x8>)
 800aaa6:	f000 b8b3 	b.w	800ac10 <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20001371 	.word	0x20001371

0800aab0 <__sinit_lock_acquire>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__sinit_lock_acquire+0x8>)
 800aab2:	f000 b8ac 	b.w	800ac0e <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	20001372 	.word	0x20001372

0800aabc <__sinit_lock_release>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__sinit_lock_release+0x8>)
 800aabe:	f000 b8a7 	b.w	800ac10 <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	20001372 	.word	0x20001372

0800aac8 <__sinit>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	4604      	mov	r4, r0
 800aacc:	f7ff fff0 	bl	800aab0 <__sinit_lock_acquire>
 800aad0:	69a3      	ldr	r3, [r4, #24]
 800aad2:	b11b      	cbz	r3, 800aadc <__sinit+0x14>
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	f7ff bff0 	b.w	800aabc <__sinit_lock_release>
 800aadc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aae0:	6523      	str	r3, [r4, #80]	; 0x50
 800aae2:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <__sinit+0x68>)
 800aae4:	4a13      	ldr	r2, [pc, #76]	; (800ab34 <__sinit+0x6c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	bf08      	it	eq
 800aaee:	2301      	moveq	r3, #1
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	bf08      	it	eq
 800aaf4:	61a3      	streq	r3, [r4, #24]
 800aaf6:	f000 f81f 	bl	800ab38 <__sfp>
 800aafa:	6060      	str	r0, [r4, #4]
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 f81b 	bl	800ab38 <__sfp>
 800ab02:	60a0      	str	r0, [r4, #8]
 800ab04:	4620      	mov	r0, r4
 800ab06:	f000 f817 	bl	800ab38 <__sfp>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2104      	movs	r1, #4
 800ab0e:	60e0      	str	r0, [r4, #12]
 800ab10:	6860      	ldr	r0, [r4, #4]
 800ab12:	f7ff ff81 	bl	800aa18 <std>
 800ab16:	2201      	movs	r2, #1
 800ab18:	2109      	movs	r1, #9
 800ab1a:	68a0      	ldr	r0, [r4, #8]
 800ab1c:	f7ff ff7c 	bl	800aa18 <std>
 800ab20:	2202      	movs	r2, #2
 800ab22:	2112      	movs	r1, #18
 800ab24:	68e0      	ldr	r0, [r4, #12]
 800ab26:	f7ff ff77 	bl	800aa18 <std>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	61a3      	str	r3, [r4, #24]
 800ab2e:	e7d1      	b.n	800aad4 <__sinit+0xc>
 800ab30:	0800bb10 	.word	0x0800bb10
 800ab34:	0800aa61 	.word	0x0800aa61

0800ab38 <__sfp>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	f7ff ffac 	bl	800aa98 <__sfp_lock_acquire>
 800ab40:	4b1e      	ldr	r3, [pc, #120]	; (800abbc <__sfp+0x84>)
 800ab42:	681e      	ldr	r6, [r3, #0]
 800ab44:	69b3      	ldr	r3, [r6, #24]
 800ab46:	b913      	cbnz	r3, 800ab4e <__sfp+0x16>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff ffbd 	bl	800aac8 <__sinit>
 800ab4e:	3648      	adds	r6, #72	; 0x48
 800ab50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	d503      	bpl.n	800ab60 <__sfp+0x28>
 800ab58:	6833      	ldr	r3, [r6, #0]
 800ab5a:	b30b      	cbz	r3, 800aba0 <__sfp+0x68>
 800ab5c:	6836      	ldr	r6, [r6, #0]
 800ab5e:	e7f7      	b.n	800ab50 <__sfp+0x18>
 800ab60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab64:	b9d5      	cbnz	r5, 800ab9c <__sfp+0x64>
 800ab66:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <__sfp+0x88>)
 800ab68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab6c:	60e3      	str	r3, [r4, #12]
 800ab6e:	6665      	str	r5, [r4, #100]	; 0x64
 800ab70:	f000 f84c 	bl	800ac0c <__retarget_lock_init_recursive>
 800ab74:	f7ff ff96 	bl	800aaa4 <__sfp_lock_release>
 800ab78:	2208      	movs	r2, #8
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab84:	6025      	str	r5, [r4, #0]
 800ab86:	61a5      	str	r5, [r4, #24]
 800ab88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab8c:	f7fe f968 	bl	8008e60 <memset>
 800ab90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab98:	4620      	mov	r0, r4
 800ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9c:	3468      	adds	r4, #104	; 0x68
 800ab9e:	e7d9      	b.n	800ab54 <__sfp+0x1c>
 800aba0:	2104      	movs	r1, #4
 800aba2:	4638      	mov	r0, r7
 800aba4:	f7ff ff62 	bl	800aa6c <__sfmoreglue>
 800aba8:	4604      	mov	r4, r0
 800abaa:	6030      	str	r0, [r6, #0]
 800abac:	2800      	cmp	r0, #0
 800abae:	d1d5      	bne.n	800ab5c <__sfp+0x24>
 800abb0:	f7ff ff78 	bl	800aaa4 <__sfp_lock_release>
 800abb4:	230c      	movs	r3, #12
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	e7ee      	b.n	800ab98 <__sfp+0x60>
 800abba:	bf00      	nop
 800abbc:	0800bb10 	.word	0x0800bb10
 800abc0:	ffff0001 	.word	0xffff0001

0800abc4 <_fwalk_reent>:
 800abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc8:	4606      	mov	r6, r0
 800abca:	4688      	mov	r8, r1
 800abcc:	2700      	movs	r7, #0
 800abce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abd6:	f1b9 0901 	subs.w	r9, r9, #1
 800abda:	d505      	bpl.n	800abe8 <_fwalk_reent+0x24>
 800abdc:	6824      	ldr	r4, [r4, #0]
 800abde:	2c00      	cmp	r4, #0
 800abe0:	d1f7      	bne.n	800abd2 <_fwalk_reent+0xe>
 800abe2:	4638      	mov	r0, r7
 800abe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe8:	89ab      	ldrh	r3, [r5, #12]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d907      	bls.n	800abfe <_fwalk_reent+0x3a>
 800abee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abf2:	3301      	adds	r3, #1
 800abf4:	d003      	beq.n	800abfe <_fwalk_reent+0x3a>
 800abf6:	4629      	mov	r1, r5
 800abf8:	4630      	mov	r0, r6
 800abfa:	47c0      	blx	r8
 800abfc:	4307      	orrs	r7, r0
 800abfe:	3568      	adds	r5, #104	; 0x68
 800ac00:	e7e9      	b.n	800abd6 <_fwalk_reent+0x12>
	...

0800ac04 <_localeconv_r>:
 800ac04:	4800      	ldr	r0, [pc, #0]	; (800ac08 <_localeconv_r+0x4>)
 800ac06:	4770      	bx	lr
 800ac08:	20000164 	.word	0x20000164

0800ac0c <__retarget_lock_init_recursive>:
 800ac0c:	4770      	bx	lr

0800ac0e <__retarget_lock_acquire_recursive>:
 800ac0e:	4770      	bx	lr

0800ac10 <__retarget_lock_release_recursive>:
 800ac10:	4770      	bx	lr

0800ac12 <__swhatbuf_r>:
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	460e      	mov	r6, r1
 800ac16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1a:	4614      	mov	r4, r2
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	461d      	mov	r5, r3
 800ac20:	b096      	sub	sp, #88	; 0x58
 800ac22:	da08      	bge.n	800ac36 <__swhatbuf_r+0x24>
 800ac24:	2200      	movs	r2, #0
 800ac26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac2a:	602a      	str	r2, [r5, #0]
 800ac2c:	061a      	lsls	r2, r3, #24
 800ac2e:	d410      	bmi.n	800ac52 <__swhatbuf_r+0x40>
 800ac30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac34:	e00e      	b.n	800ac54 <__swhatbuf_r+0x42>
 800ac36:	466a      	mov	r2, sp
 800ac38:	f000 fdee 	bl	800b818 <_fstat_r>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	dbf1      	blt.n	800ac24 <__swhatbuf_r+0x12>
 800ac40:	9a01      	ldr	r2, [sp, #4]
 800ac42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac4a:	425a      	negs	r2, r3
 800ac4c:	415a      	adcs	r2, r3
 800ac4e:	602a      	str	r2, [r5, #0]
 800ac50:	e7ee      	b.n	800ac30 <__swhatbuf_r+0x1e>
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	2000      	movs	r0, #0
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	b016      	add	sp, #88	; 0x58
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}

0800ac5c <__smakebuf_r>:
 800ac5c:	898b      	ldrh	r3, [r1, #12]
 800ac5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac60:	079d      	lsls	r5, r3, #30
 800ac62:	4606      	mov	r6, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	d507      	bpl.n	800ac78 <__smakebuf_r+0x1c>
 800ac68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	2301      	movs	r3, #1
 800ac72:	6163      	str	r3, [r4, #20]
 800ac74:	b002      	add	sp, #8
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	466a      	mov	r2, sp
 800ac7a:	ab01      	add	r3, sp, #4
 800ac7c:	f7ff ffc9 	bl	800ac12 <__swhatbuf_r>
 800ac80:	9900      	ldr	r1, [sp, #0]
 800ac82:	4605      	mov	r5, r0
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7fe f95b 	bl	8008f40 <_malloc_r>
 800ac8a:	b948      	cbnz	r0, 800aca0 <__smakebuf_r+0x44>
 800ac8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac90:	059a      	lsls	r2, r3, #22
 800ac92:	d4ef      	bmi.n	800ac74 <__smakebuf_r+0x18>
 800ac94:	f023 0303 	bic.w	r3, r3, #3
 800ac98:	f043 0302 	orr.w	r3, r3, #2
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	e7e3      	b.n	800ac68 <__smakebuf_r+0xc>
 800aca0:	4b0d      	ldr	r3, [pc, #52]	; (800acd8 <__smakebuf_r+0x7c>)
 800aca2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	6020      	str	r0, [r4, #0]
 800aca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	9b00      	ldr	r3, [sp, #0]
 800acb0:	6120      	str	r0, [r4, #16]
 800acb2:	6163      	str	r3, [r4, #20]
 800acb4:	9b01      	ldr	r3, [sp, #4]
 800acb6:	b15b      	cbz	r3, 800acd0 <__smakebuf_r+0x74>
 800acb8:	4630      	mov	r0, r6
 800acba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acbe:	f000 fdbd 	bl	800b83c <_isatty_r>
 800acc2:	b128      	cbz	r0, 800acd0 <__smakebuf_r+0x74>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	f043 0301 	orr.w	r3, r3, #1
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	89a0      	ldrh	r0, [r4, #12]
 800acd2:	4305      	orrs	r5, r0
 800acd4:	81a5      	strh	r5, [r4, #12]
 800acd6:	e7cd      	b.n	800ac74 <__smakebuf_r+0x18>
 800acd8:	0800aa61 	.word	0x0800aa61

0800acdc <memchr>:
 800acdc:	4603      	mov	r3, r0
 800acde:	b510      	push	{r4, lr}
 800ace0:	b2c9      	uxtb	r1, r1
 800ace2:	4402      	add	r2, r0
 800ace4:	4293      	cmp	r3, r2
 800ace6:	4618      	mov	r0, r3
 800ace8:	d101      	bne.n	800acee <memchr+0x12>
 800acea:	2000      	movs	r0, #0
 800acec:	e003      	b.n	800acf6 <memchr+0x1a>
 800acee:	7804      	ldrb	r4, [r0, #0]
 800acf0:	3301      	adds	r3, #1
 800acf2:	428c      	cmp	r4, r1
 800acf4:	d1f6      	bne.n	800ace4 <memchr+0x8>
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <__malloc_lock>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__malloc_lock+0x8>)
 800acfa:	f7ff bf88 	b.w	800ac0e <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	20001370 	.word	0x20001370

0800ad04 <__malloc_unlock>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__malloc_unlock+0x8>)
 800ad06:	f7ff bf83 	b.w	800ac10 <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20001370 	.word	0x20001370

0800ad10 <_Balloc>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad14:	4604      	mov	r4, r0
 800ad16:	460d      	mov	r5, r1
 800ad18:	b976      	cbnz	r6, 800ad38 <_Balloc+0x28>
 800ad1a:	2010      	movs	r0, #16
 800ad1c:	f7fe f88a 	bl	8008e34 <malloc>
 800ad20:	4602      	mov	r2, r0
 800ad22:	6260      	str	r0, [r4, #36]	; 0x24
 800ad24:	b920      	cbnz	r0, 800ad30 <_Balloc+0x20>
 800ad26:	2166      	movs	r1, #102	; 0x66
 800ad28:	4b17      	ldr	r3, [pc, #92]	; (800ad88 <_Balloc+0x78>)
 800ad2a:	4818      	ldr	r0, [pc, #96]	; (800ad8c <_Balloc+0x7c>)
 800ad2c:	f000 fd34 	bl	800b798 <__assert_func>
 800ad30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad34:	6006      	str	r6, [r0, #0]
 800ad36:	60c6      	str	r6, [r0, #12]
 800ad38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad3a:	68f3      	ldr	r3, [r6, #12]
 800ad3c:	b183      	cbz	r3, 800ad60 <_Balloc+0x50>
 800ad3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad46:	b9b8      	cbnz	r0, 800ad78 <_Balloc+0x68>
 800ad48:	2101      	movs	r1, #1
 800ad4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad4e:	1d72      	adds	r2, r6, #5
 800ad50:	4620      	mov	r0, r4
 800ad52:	0092      	lsls	r2, r2, #2
 800ad54:	f000 fb5e 	bl	800b414 <_calloc_r>
 800ad58:	b160      	cbz	r0, 800ad74 <_Balloc+0x64>
 800ad5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad5e:	e00e      	b.n	800ad7e <_Balloc+0x6e>
 800ad60:	2221      	movs	r2, #33	; 0x21
 800ad62:	2104      	movs	r1, #4
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fb55 	bl	800b414 <_calloc_r>
 800ad6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad6c:	60f0      	str	r0, [r6, #12]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e4      	bne.n	800ad3e <_Balloc+0x2e>
 800ad74:	2000      	movs	r0, #0
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	6802      	ldr	r2, [r0, #0]
 800ad7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad84:	e7f7      	b.n	800ad76 <_Balloc+0x66>
 800ad86:	bf00      	nop
 800ad88:	0800bb55 	.word	0x0800bb55
 800ad8c:	0800bc38 	.word	0x0800bc38

0800ad90 <_Bfree>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	b976      	cbnz	r6, 800adb8 <_Bfree+0x28>
 800ad9a:	2010      	movs	r0, #16
 800ad9c:	f7fe f84a 	bl	8008e34 <malloc>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6268      	str	r0, [r5, #36]	; 0x24
 800ada4:	b920      	cbnz	r0, 800adb0 <_Bfree+0x20>
 800ada6:	218a      	movs	r1, #138	; 0x8a
 800ada8:	4b08      	ldr	r3, [pc, #32]	; (800adcc <_Bfree+0x3c>)
 800adaa:	4809      	ldr	r0, [pc, #36]	; (800add0 <_Bfree+0x40>)
 800adac:	f000 fcf4 	bl	800b798 <__assert_func>
 800adb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb4:	6006      	str	r6, [r0, #0]
 800adb6:	60c6      	str	r6, [r0, #12]
 800adb8:	b13c      	cbz	r4, 800adca <_Bfree+0x3a>
 800adba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adc4:	6021      	str	r1, [r4, #0]
 800adc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	0800bb55 	.word	0x0800bb55
 800add0:	0800bc38 	.word	0x0800bc38

0800add4 <__multadd>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	4607      	mov	r7, r0
 800adda:	460c      	mov	r4, r1
 800addc:	461e      	mov	r6, r3
 800adde:	2000      	movs	r0, #0
 800ade0:	690d      	ldr	r5, [r1, #16]
 800ade2:	f101 0c14 	add.w	ip, r1, #20
 800ade6:	f8dc 3000 	ldr.w	r3, [ip]
 800adea:	3001      	adds	r0, #1
 800adec:	b299      	uxth	r1, r3
 800adee:	fb02 6101 	mla	r1, r2, r1, r6
 800adf2:	0c1e      	lsrs	r6, r3, #16
 800adf4:	0c0b      	lsrs	r3, r1, #16
 800adf6:	fb02 3306 	mla	r3, r2, r6, r3
 800adfa:	b289      	uxth	r1, r1
 800adfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae00:	4285      	cmp	r5, r0
 800ae02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae06:	f84c 1b04 	str.w	r1, [ip], #4
 800ae0a:	dcec      	bgt.n	800ade6 <__multadd+0x12>
 800ae0c:	b30e      	cbz	r6, 800ae52 <__multadd+0x7e>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	dc19      	bgt.n	800ae48 <__multadd+0x74>
 800ae14:	6861      	ldr	r1, [r4, #4]
 800ae16:	4638      	mov	r0, r7
 800ae18:	3101      	adds	r1, #1
 800ae1a:	f7ff ff79 	bl	800ad10 <_Balloc>
 800ae1e:	4680      	mov	r8, r0
 800ae20:	b928      	cbnz	r0, 800ae2e <__multadd+0x5a>
 800ae22:	4602      	mov	r2, r0
 800ae24:	21b5      	movs	r1, #181	; 0xb5
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <__multadd+0x84>)
 800ae28:	480c      	ldr	r0, [pc, #48]	; (800ae5c <__multadd+0x88>)
 800ae2a:	f000 fcb5 	bl	800b798 <__assert_func>
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	f104 010c 	add.w	r1, r4, #12
 800ae34:	3202      	adds	r2, #2
 800ae36:	0092      	lsls	r2, r2, #2
 800ae38:	300c      	adds	r0, #12
 800ae3a:	f7fe f803 	bl	8008e44 <memcpy>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4638      	mov	r0, r7
 800ae42:	f7ff ffa5 	bl	800ad90 <_Bfree>
 800ae46:	4644      	mov	r4, r8
 800ae48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	615e      	str	r6, [r3, #20]
 800ae50:	6125      	str	r5, [r4, #16]
 800ae52:	4620      	mov	r0, r4
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	0800bbc7 	.word	0x0800bbc7
 800ae5c:	0800bc38 	.word	0x0800bc38

0800ae60 <__hi0bits>:
 800ae60:	0c02      	lsrs	r2, r0, #16
 800ae62:	0412      	lsls	r2, r2, #16
 800ae64:	4603      	mov	r3, r0
 800ae66:	b9ca      	cbnz	r2, 800ae9c <__hi0bits+0x3c>
 800ae68:	0403      	lsls	r3, r0, #16
 800ae6a:	2010      	movs	r0, #16
 800ae6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae70:	bf04      	itt	eq
 800ae72:	021b      	lsleq	r3, r3, #8
 800ae74:	3008      	addeq	r0, #8
 800ae76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae7a:	bf04      	itt	eq
 800ae7c:	011b      	lsleq	r3, r3, #4
 800ae7e:	3004      	addeq	r0, #4
 800ae80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae84:	bf04      	itt	eq
 800ae86:	009b      	lsleq	r3, r3, #2
 800ae88:	3002      	addeq	r0, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	db05      	blt.n	800ae9a <__hi0bits+0x3a>
 800ae8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ae92:	f100 0001 	add.w	r0, r0, #1
 800ae96:	bf08      	it	eq
 800ae98:	2020      	moveq	r0, #32
 800ae9a:	4770      	bx	lr
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e7e5      	b.n	800ae6c <__hi0bits+0xc>

0800aea0 <__lo0bits>:
 800aea0:	6803      	ldr	r3, [r0, #0]
 800aea2:	4602      	mov	r2, r0
 800aea4:	f013 0007 	ands.w	r0, r3, #7
 800aea8:	d00b      	beq.n	800aec2 <__lo0bits+0x22>
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d421      	bmi.n	800aef2 <__lo0bits+0x52>
 800aeae:	0798      	lsls	r0, r3, #30
 800aeb0:	bf49      	itett	mi
 800aeb2:	085b      	lsrmi	r3, r3, #1
 800aeb4:	089b      	lsrpl	r3, r3, #2
 800aeb6:	2001      	movmi	r0, #1
 800aeb8:	6013      	strmi	r3, [r2, #0]
 800aeba:	bf5c      	itt	pl
 800aebc:	2002      	movpl	r0, #2
 800aebe:	6013      	strpl	r3, [r2, #0]
 800aec0:	4770      	bx	lr
 800aec2:	b299      	uxth	r1, r3
 800aec4:	b909      	cbnz	r1, 800aeca <__lo0bits+0x2a>
 800aec6:	2010      	movs	r0, #16
 800aec8:	0c1b      	lsrs	r3, r3, #16
 800aeca:	b2d9      	uxtb	r1, r3
 800aecc:	b909      	cbnz	r1, 800aed2 <__lo0bits+0x32>
 800aece:	3008      	adds	r0, #8
 800aed0:	0a1b      	lsrs	r3, r3, #8
 800aed2:	0719      	lsls	r1, r3, #28
 800aed4:	bf04      	itt	eq
 800aed6:	091b      	lsreq	r3, r3, #4
 800aed8:	3004      	addeq	r0, #4
 800aeda:	0799      	lsls	r1, r3, #30
 800aedc:	bf04      	itt	eq
 800aede:	089b      	lsreq	r3, r3, #2
 800aee0:	3002      	addeq	r0, #2
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d403      	bmi.n	800aeee <__lo0bits+0x4e>
 800aee6:	085b      	lsrs	r3, r3, #1
 800aee8:	f100 0001 	add.w	r0, r0, #1
 800aeec:	d003      	beq.n	800aef6 <__lo0bits+0x56>
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	4770      	bx	lr
 800aef2:	2000      	movs	r0, #0
 800aef4:	4770      	bx	lr
 800aef6:	2020      	movs	r0, #32
 800aef8:	4770      	bx	lr
	...

0800aefc <__i2b>:
 800aefc:	b510      	push	{r4, lr}
 800aefe:	460c      	mov	r4, r1
 800af00:	2101      	movs	r1, #1
 800af02:	f7ff ff05 	bl	800ad10 <_Balloc>
 800af06:	4602      	mov	r2, r0
 800af08:	b928      	cbnz	r0, 800af16 <__i2b+0x1a>
 800af0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af0e:	4b04      	ldr	r3, [pc, #16]	; (800af20 <__i2b+0x24>)
 800af10:	4804      	ldr	r0, [pc, #16]	; (800af24 <__i2b+0x28>)
 800af12:	f000 fc41 	bl	800b798 <__assert_func>
 800af16:	2301      	movs	r3, #1
 800af18:	6144      	str	r4, [r0, #20]
 800af1a:	6103      	str	r3, [r0, #16]
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	0800bbc7 	.word	0x0800bbc7
 800af24:	0800bc38 	.word	0x0800bc38

0800af28 <__multiply>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	4691      	mov	r9, r2
 800af2e:	690a      	ldr	r2, [r1, #16]
 800af30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af34:	460c      	mov	r4, r1
 800af36:	429a      	cmp	r2, r3
 800af38:	bfbe      	ittt	lt
 800af3a:	460b      	movlt	r3, r1
 800af3c:	464c      	movlt	r4, r9
 800af3e:	4699      	movlt	r9, r3
 800af40:	6927      	ldr	r7, [r4, #16]
 800af42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	6861      	ldr	r1, [r4, #4]
 800af4a:	eb07 060a 	add.w	r6, r7, sl
 800af4e:	42b3      	cmp	r3, r6
 800af50:	b085      	sub	sp, #20
 800af52:	bfb8      	it	lt
 800af54:	3101      	addlt	r1, #1
 800af56:	f7ff fedb 	bl	800ad10 <_Balloc>
 800af5a:	b930      	cbnz	r0, 800af6a <__multiply+0x42>
 800af5c:	4602      	mov	r2, r0
 800af5e:	f240 115d 	movw	r1, #349	; 0x15d
 800af62:	4b43      	ldr	r3, [pc, #268]	; (800b070 <__multiply+0x148>)
 800af64:	4843      	ldr	r0, [pc, #268]	; (800b074 <__multiply+0x14c>)
 800af66:	f000 fc17 	bl	800b798 <__assert_func>
 800af6a:	f100 0514 	add.w	r5, r0, #20
 800af6e:	462b      	mov	r3, r5
 800af70:	2200      	movs	r2, #0
 800af72:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af76:	4543      	cmp	r3, r8
 800af78:	d321      	bcc.n	800afbe <__multiply+0x96>
 800af7a:	f104 0314 	add.w	r3, r4, #20
 800af7e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af82:	f109 0314 	add.w	r3, r9, #20
 800af86:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af8a:	9202      	str	r2, [sp, #8]
 800af8c:	1b3a      	subs	r2, r7, r4
 800af8e:	3a15      	subs	r2, #21
 800af90:	f022 0203 	bic.w	r2, r2, #3
 800af94:	3204      	adds	r2, #4
 800af96:	f104 0115 	add.w	r1, r4, #21
 800af9a:	428f      	cmp	r7, r1
 800af9c:	bf38      	it	cc
 800af9e:	2204      	movcc	r2, #4
 800afa0:	9201      	str	r2, [sp, #4]
 800afa2:	9a02      	ldr	r2, [sp, #8]
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d80c      	bhi.n	800afc4 <__multiply+0x9c>
 800afaa:	2e00      	cmp	r6, #0
 800afac:	dd03      	ble.n	800afb6 <__multiply+0x8e>
 800afae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d059      	beq.n	800b06a <__multiply+0x142>
 800afb6:	6106      	str	r6, [r0, #16]
 800afb8:	b005      	add	sp, #20
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	f843 2b04 	str.w	r2, [r3], #4
 800afc2:	e7d8      	b.n	800af76 <__multiply+0x4e>
 800afc4:	f8b3 a000 	ldrh.w	sl, [r3]
 800afc8:	f1ba 0f00 	cmp.w	sl, #0
 800afcc:	d023      	beq.n	800b016 <__multiply+0xee>
 800afce:	46a9      	mov	r9, r5
 800afd0:	f04f 0c00 	mov.w	ip, #0
 800afd4:	f104 0e14 	add.w	lr, r4, #20
 800afd8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800afdc:	f8d9 1000 	ldr.w	r1, [r9]
 800afe0:	fa1f fb82 	uxth.w	fp, r2
 800afe4:	b289      	uxth	r1, r1
 800afe6:	fb0a 110b 	mla	r1, sl, fp, r1
 800afea:	4461      	add	r1, ip
 800afec:	f8d9 c000 	ldr.w	ip, [r9]
 800aff0:	0c12      	lsrs	r2, r2, #16
 800aff2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aff6:	fb0a c202 	mla	r2, sl, r2, ip
 800affa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800affe:	b289      	uxth	r1, r1
 800b000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b004:	4577      	cmp	r7, lr
 800b006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b00a:	f849 1b04 	str.w	r1, [r9], #4
 800b00e:	d8e3      	bhi.n	800afd8 <__multiply+0xb0>
 800b010:	9a01      	ldr	r2, [sp, #4]
 800b012:	f845 c002 	str.w	ip, [r5, r2]
 800b016:	9a03      	ldr	r2, [sp, #12]
 800b018:	3304      	adds	r3, #4
 800b01a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b01e:	f1b9 0f00 	cmp.w	r9, #0
 800b022:	d020      	beq.n	800b066 <__multiply+0x13e>
 800b024:	46ae      	mov	lr, r5
 800b026:	f04f 0a00 	mov.w	sl, #0
 800b02a:	6829      	ldr	r1, [r5, #0]
 800b02c:	f104 0c14 	add.w	ip, r4, #20
 800b030:	f8bc b000 	ldrh.w	fp, [ip]
 800b034:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b038:	b289      	uxth	r1, r1
 800b03a:	fb09 220b 	mla	r2, r9, fp, r2
 800b03e:	4492      	add	sl, r2
 800b040:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b044:	f84e 1b04 	str.w	r1, [lr], #4
 800b048:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b04c:	f8be 1000 	ldrh.w	r1, [lr]
 800b050:	0c12      	lsrs	r2, r2, #16
 800b052:	fb09 1102 	mla	r1, r9, r2, r1
 800b056:	4567      	cmp	r7, ip
 800b058:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b05c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b060:	d8e6      	bhi.n	800b030 <__multiply+0x108>
 800b062:	9a01      	ldr	r2, [sp, #4]
 800b064:	50a9      	str	r1, [r5, r2]
 800b066:	3504      	adds	r5, #4
 800b068:	e79b      	b.n	800afa2 <__multiply+0x7a>
 800b06a:	3e01      	subs	r6, #1
 800b06c:	e79d      	b.n	800afaa <__multiply+0x82>
 800b06e:	bf00      	nop
 800b070:	0800bbc7 	.word	0x0800bbc7
 800b074:	0800bc38 	.word	0x0800bc38

0800b078 <__pow5mult>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4615      	mov	r5, r2
 800b07e:	f012 0203 	ands.w	r2, r2, #3
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	d007      	beq.n	800b098 <__pow5mult+0x20>
 800b088:	4c25      	ldr	r4, [pc, #148]	; (800b120 <__pow5mult+0xa8>)
 800b08a:	3a01      	subs	r2, #1
 800b08c:	2300      	movs	r3, #0
 800b08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b092:	f7ff fe9f 	bl	800add4 <__multadd>
 800b096:	4607      	mov	r7, r0
 800b098:	10ad      	asrs	r5, r5, #2
 800b09a:	d03d      	beq.n	800b118 <__pow5mult+0xa0>
 800b09c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b09e:	b97c      	cbnz	r4, 800b0c0 <__pow5mult+0x48>
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	f7fd fec7 	bl	8008e34 <malloc>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0aa:	b928      	cbnz	r0, 800b0b8 <__pow5mult+0x40>
 800b0ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0b0:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <__pow5mult+0xac>)
 800b0b2:	481d      	ldr	r0, [pc, #116]	; (800b128 <__pow5mult+0xb0>)
 800b0b4:	f000 fb70 	bl	800b798 <__assert_func>
 800b0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0bc:	6004      	str	r4, [r0, #0]
 800b0be:	60c4      	str	r4, [r0, #12]
 800b0c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0c8:	b94c      	cbnz	r4, 800b0de <__pow5mult+0x66>
 800b0ca:	f240 2171 	movw	r1, #625	; 0x271
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7ff ff14 	bl	800aefc <__i2b>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	f04f 0900 	mov.w	r9, #0
 800b0e2:	07eb      	lsls	r3, r5, #31
 800b0e4:	d50a      	bpl.n	800b0fc <__pow5mult+0x84>
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff1c 	bl	800af28 <__multiply>
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff fe4b 	bl	800ad90 <_Bfree>
 800b0fa:	4647      	mov	r7, r8
 800b0fc:	106d      	asrs	r5, r5, #1
 800b0fe:	d00b      	beq.n	800b118 <__pow5mult+0xa0>
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	b938      	cbnz	r0, 800b114 <__pow5mult+0x9c>
 800b104:	4622      	mov	r2, r4
 800b106:	4621      	mov	r1, r4
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ff0d 	bl	800af28 <__multiply>
 800b10e:	6020      	str	r0, [r4, #0]
 800b110:	f8c0 9000 	str.w	r9, [r0]
 800b114:	4604      	mov	r4, r0
 800b116:	e7e4      	b.n	800b0e2 <__pow5mult+0x6a>
 800b118:	4638      	mov	r0, r7
 800b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11e:	bf00      	nop
 800b120:	0800bd88 	.word	0x0800bd88
 800b124:	0800bb55 	.word	0x0800bb55
 800b128:	0800bc38 	.word	0x0800bc38

0800b12c <__lshift>:
 800b12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b130:	460c      	mov	r4, r1
 800b132:	4607      	mov	r7, r0
 800b134:	4691      	mov	r9, r2
 800b136:	6923      	ldr	r3, [r4, #16]
 800b138:	6849      	ldr	r1, [r1, #4]
 800b13a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b144:	f108 0601 	add.w	r6, r8, #1
 800b148:	42b3      	cmp	r3, r6
 800b14a:	db0b      	blt.n	800b164 <__lshift+0x38>
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7ff fddf 	bl	800ad10 <_Balloc>
 800b152:	4605      	mov	r5, r0
 800b154:	b948      	cbnz	r0, 800b16a <__lshift+0x3e>
 800b156:	4602      	mov	r2, r0
 800b158:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b15c:	4b29      	ldr	r3, [pc, #164]	; (800b204 <__lshift+0xd8>)
 800b15e:	482a      	ldr	r0, [pc, #168]	; (800b208 <__lshift+0xdc>)
 800b160:	f000 fb1a 	bl	800b798 <__assert_func>
 800b164:	3101      	adds	r1, #1
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	e7ee      	b.n	800b148 <__lshift+0x1c>
 800b16a:	2300      	movs	r3, #0
 800b16c:	f100 0114 	add.w	r1, r0, #20
 800b170:	f100 0210 	add.w	r2, r0, #16
 800b174:	4618      	mov	r0, r3
 800b176:	4553      	cmp	r3, sl
 800b178:	db37      	blt.n	800b1ea <__lshift+0xbe>
 800b17a:	6920      	ldr	r0, [r4, #16]
 800b17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b180:	f104 0314 	add.w	r3, r4, #20
 800b184:	f019 091f 	ands.w	r9, r9, #31
 800b188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b18c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b190:	d02f      	beq.n	800b1f2 <__lshift+0xc6>
 800b192:	468a      	mov	sl, r1
 800b194:	f04f 0c00 	mov.w	ip, #0
 800b198:	f1c9 0e20 	rsb	lr, r9, #32
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	fa02 f209 	lsl.w	r2, r2, r9
 800b1a2:	ea42 020c 	orr.w	r2, r2, ip
 800b1a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ae:	4298      	cmp	r0, r3
 800b1b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1b4:	d8f2      	bhi.n	800b19c <__lshift+0x70>
 800b1b6:	1b03      	subs	r3, r0, r4
 800b1b8:	3b15      	subs	r3, #21
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	3304      	adds	r3, #4
 800b1c0:	f104 0215 	add.w	r2, r4, #21
 800b1c4:	4290      	cmp	r0, r2
 800b1c6:	bf38      	it	cc
 800b1c8:	2304      	movcc	r3, #4
 800b1ca:	f841 c003 	str.w	ip, [r1, r3]
 800b1ce:	f1bc 0f00 	cmp.w	ip, #0
 800b1d2:	d001      	beq.n	800b1d8 <__lshift+0xac>
 800b1d4:	f108 0602 	add.w	r6, r8, #2
 800b1d8:	3e01      	subs	r6, #1
 800b1da:	4638      	mov	r0, r7
 800b1dc:	4621      	mov	r1, r4
 800b1de:	612e      	str	r6, [r5, #16]
 800b1e0:	f7ff fdd6 	bl	800ad90 <_Bfree>
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	e7c1      	b.n	800b176 <__lshift+0x4a>
 800b1f2:	3904      	subs	r1, #4
 800b1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f8:	4298      	cmp	r0, r3
 800b1fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1fe:	d8f9      	bhi.n	800b1f4 <__lshift+0xc8>
 800b200:	e7ea      	b.n	800b1d8 <__lshift+0xac>
 800b202:	bf00      	nop
 800b204:	0800bbc7 	.word	0x0800bbc7
 800b208:	0800bc38 	.word	0x0800bc38

0800b20c <__mcmp>:
 800b20c:	4603      	mov	r3, r0
 800b20e:	690a      	ldr	r2, [r1, #16]
 800b210:	6900      	ldr	r0, [r0, #16]
 800b212:	b530      	push	{r4, r5, lr}
 800b214:	1a80      	subs	r0, r0, r2
 800b216:	d10d      	bne.n	800b234 <__mcmp+0x28>
 800b218:	3314      	adds	r3, #20
 800b21a:	3114      	adds	r1, #20
 800b21c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b220:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b22c:	4295      	cmp	r5, r2
 800b22e:	d002      	beq.n	800b236 <__mcmp+0x2a>
 800b230:	d304      	bcc.n	800b23c <__mcmp+0x30>
 800b232:	2001      	movs	r0, #1
 800b234:	bd30      	pop	{r4, r5, pc}
 800b236:	42a3      	cmp	r3, r4
 800b238:	d3f4      	bcc.n	800b224 <__mcmp+0x18>
 800b23a:	e7fb      	b.n	800b234 <__mcmp+0x28>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	e7f8      	b.n	800b234 <__mcmp+0x28>
	...

0800b244 <__mdiff>:
 800b244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	460d      	mov	r5, r1
 800b24a:	4607      	mov	r7, r0
 800b24c:	4611      	mov	r1, r2
 800b24e:	4628      	mov	r0, r5
 800b250:	4614      	mov	r4, r2
 800b252:	f7ff ffdb 	bl	800b20c <__mcmp>
 800b256:	1e06      	subs	r6, r0, #0
 800b258:	d111      	bne.n	800b27e <__mdiff+0x3a>
 800b25a:	4631      	mov	r1, r6
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7ff fd57 	bl	800ad10 <_Balloc>
 800b262:	4602      	mov	r2, r0
 800b264:	b928      	cbnz	r0, 800b272 <__mdiff+0x2e>
 800b266:	f240 2132 	movw	r1, #562	; 0x232
 800b26a:	4b3a      	ldr	r3, [pc, #232]	; (800b354 <__mdiff+0x110>)
 800b26c:	483a      	ldr	r0, [pc, #232]	; (800b358 <__mdiff+0x114>)
 800b26e:	f000 fa93 	bl	800b798 <__assert_func>
 800b272:	2301      	movs	r3, #1
 800b274:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b278:	4610      	mov	r0, r2
 800b27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	bfa4      	itt	ge
 800b280:	4623      	movge	r3, r4
 800b282:	462c      	movge	r4, r5
 800b284:	4638      	mov	r0, r7
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	bfa6      	itte	ge
 800b28a:	461d      	movge	r5, r3
 800b28c:	2600      	movge	r6, #0
 800b28e:	2601      	movlt	r6, #1
 800b290:	f7ff fd3e 	bl	800ad10 <_Balloc>
 800b294:	4602      	mov	r2, r0
 800b296:	b918      	cbnz	r0, 800b2a0 <__mdiff+0x5c>
 800b298:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b29c:	4b2d      	ldr	r3, [pc, #180]	; (800b354 <__mdiff+0x110>)
 800b29e:	e7e5      	b.n	800b26c <__mdiff+0x28>
 800b2a0:	f102 0814 	add.w	r8, r2, #20
 800b2a4:	46c2      	mov	sl, r8
 800b2a6:	f04f 0c00 	mov.w	ip, #0
 800b2aa:	6927      	ldr	r7, [r4, #16]
 800b2ac:	60c6      	str	r6, [r0, #12]
 800b2ae:	692e      	ldr	r6, [r5, #16]
 800b2b0:	f104 0014 	add.w	r0, r4, #20
 800b2b4:	f105 0914 	add.w	r9, r5, #20
 800b2b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b2bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2c0:	3410      	adds	r4, #16
 800b2c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b2c6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2ca:	fa1f f18b 	uxth.w	r1, fp
 800b2ce:	448c      	add	ip, r1
 800b2d0:	b299      	uxth	r1, r3
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	ebac 0101 	sub.w	r1, ip, r1
 800b2d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b2e0:	b289      	uxth	r1, r1
 800b2e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b2e6:	454e      	cmp	r6, r9
 800b2e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b2ec:	f84a 3b04 	str.w	r3, [sl], #4
 800b2f0:	d8e7      	bhi.n	800b2c2 <__mdiff+0x7e>
 800b2f2:	1b73      	subs	r3, r6, r5
 800b2f4:	3b15      	subs	r3, #21
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	3515      	adds	r5, #21
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	42ae      	cmp	r6, r5
 800b300:	bf38      	it	cc
 800b302:	2304      	movcc	r3, #4
 800b304:	4418      	add	r0, r3
 800b306:	4443      	add	r3, r8
 800b308:	461e      	mov	r6, r3
 800b30a:	4605      	mov	r5, r0
 800b30c:	4575      	cmp	r5, lr
 800b30e:	d30e      	bcc.n	800b32e <__mdiff+0xea>
 800b310:	f10e 0103 	add.w	r1, lr, #3
 800b314:	1a09      	subs	r1, r1, r0
 800b316:	f021 0103 	bic.w	r1, r1, #3
 800b31a:	3803      	subs	r0, #3
 800b31c:	4586      	cmp	lr, r0
 800b31e:	bf38      	it	cc
 800b320:	2100      	movcc	r1, #0
 800b322:	4419      	add	r1, r3
 800b324:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b328:	b18b      	cbz	r3, 800b34e <__mdiff+0x10a>
 800b32a:	6117      	str	r7, [r2, #16]
 800b32c:	e7a4      	b.n	800b278 <__mdiff+0x34>
 800b32e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b332:	fa1f f188 	uxth.w	r1, r8
 800b336:	4461      	add	r1, ip
 800b338:	140c      	asrs	r4, r1, #16
 800b33a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b33e:	b289      	uxth	r1, r1
 800b340:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b344:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b348:	f846 1b04 	str.w	r1, [r6], #4
 800b34c:	e7de      	b.n	800b30c <__mdiff+0xc8>
 800b34e:	3f01      	subs	r7, #1
 800b350:	e7e8      	b.n	800b324 <__mdiff+0xe0>
 800b352:	bf00      	nop
 800b354:	0800bbc7 	.word	0x0800bbc7
 800b358:	0800bc38 	.word	0x0800bc38

0800b35c <__d2b>:
 800b35c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b360:	2101      	movs	r1, #1
 800b362:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b366:	4690      	mov	r8, r2
 800b368:	461d      	mov	r5, r3
 800b36a:	f7ff fcd1 	bl	800ad10 <_Balloc>
 800b36e:	4604      	mov	r4, r0
 800b370:	b930      	cbnz	r0, 800b380 <__d2b+0x24>
 800b372:	4602      	mov	r2, r0
 800b374:	f240 310a 	movw	r1, #778	; 0x30a
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <__d2b+0xb0>)
 800b37a:	4825      	ldr	r0, [pc, #148]	; (800b410 <__d2b+0xb4>)
 800b37c:	f000 fa0c 	bl	800b798 <__assert_func>
 800b380:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b384:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b388:	bb2d      	cbnz	r5, 800b3d6 <__d2b+0x7a>
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	f1b8 0300 	subs.w	r3, r8, #0
 800b390:	d026      	beq.n	800b3e0 <__d2b+0x84>
 800b392:	4668      	mov	r0, sp
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	f7ff fd83 	bl	800aea0 <__lo0bits>
 800b39a:	9900      	ldr	r1, [sp, #0]
 800b39c:	b1f0      	cbz	r0, 800b3dc <__d2b+0x80>
 800b39e:	9a01      	ldr	r2, [sp, #4]
 800b3a0:	f1c0 0320 	rsb	r3, r0, #32
 800b3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	40c2      	lsrs	r2, r0
 800b3ac:	6163      	str	r3, [r4, #20]
 800b3ae:	9201      	str	r2, [sp, #4]
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	bf14      	ite	ne
 800b3b6:	2102      	movne	r1, #2
 800b3b8:	2101      	moveq	r1, #1
 800b3ba:	61a3      	str	r3, [r4, #24]
 800b3bc:	6121      	str	r1, [r4, #16]
 800b3be:	b1c5      	cbz	r5, 800b3f2 <__d2b+0x96>
 800b3c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b3c4:	4405      	add	r5, r0
 800b3c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3ca:	603d      	str	r5, [r7, #0]
 800b3cc:	6030      	str	r0, [r6, #0]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	b002      	add	sp, #8
 800b3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3da:	e7d6      	b.n	800b38a <__d2b+0x2e>
 800b3dc:	6161      	str	r1, [r4, #20]
 800b3de:	e7e7      	b.n	800b3b0 <__d2b+0x54>
 800b3e0:	a801      	add	r0, sp, #4
 800b3e2:	f7ff fd5d 	bl	800aea0 <__lo0bits>
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	6121      	str	r1, [r4, #16]
 800b3ec:	6163      	str	r3, [r4, #20]
 800b3ee:	3020      	adds	r0, #32
 800b3f0:	e7e5      	b.n	800b3be <__d2b+0x62>
 800b3f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b3f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3fa:	6038      	str	r0, [r7, #0]
 800b3fc:	6918      	ldr	r0, [r3, #16]
 800b3fe:	f7ff fd2f 	bl	800ae60 <__hi0bits>
 800b402:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b406:	6031      	str	r1, [r6, #0]
 800b408:	e7e1      	b.n	800b3ce <__d2b+0x72>
 800b40a:	bf00      	nop
 800b40c:	0800bbc7 	.word	0x0800bbc7
 800b410:	0800bc38 	.word	0x0800bc38

0800b414 <_calloc_r>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	fba1 5402 	umull	r5, r4, r1, r2
 800b41a:	b934      	cbnz	r4, 800b42a <_calloc_r+0x16>
 800b41c:	4629      	mov	r1, r5
 800b41e:	f7fd fd8f 	bl	8008f40 <_malloc_r>
 800b422:	4606      	mov	r6, r0
 800b424:	b928      	cbnz	r0, 800b432 <_calloc_r+0x1e>
 800b426:	4630      	mov	r0, r6
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	220c      	movs	r2, #12
 800b42c:	2600      	movs	r6, #0
 800b42e:	6002      	str	r2, [r0, #0]
 800b430:	e7f9      	b.n	800b426 <_calloc_r+0x12>
 800b432:	462a      	mov	r2, r5
 800b434:	4621      	mov	r1, r4
 800b436:	f7fd fd13 	bl	8008e60 <memset>
 800b43a:	e7f4      	b.n	800b426 <_calloc_r+0x12>

0800b43c <__sfputc_r>:
 800b43c:	6893      	ldr	r3, [r2, #8]
 800b43e:	b410      	push	{r4}
 800b440:	3b01      	subs	r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	6093      	str	r3, [r2, #8]
 800b446:	da07      	bge.n	800b458 <__sfputc_r+0x1c>
 800b448:	6994      	ldr	r4, [r2, #24]
 800b44a:	42a3      	cmp	r3, r4
 800b44c:	db01      	blt.n	800b452 <__sfputc_r+0x16>
 800b44e:	290a      	cmp	r1, #10
 800b450:	d102      	bne.n	800b458 <__sfputc_r+0x1c>
 800b452:	bc10      	pop	{r4}
 800b454:	f7fe bae6 	b.w	8009a24 <__swbuf_r>
 800b458:	6813      	ldr	r3, [r2, #0]
 800b45a:	1c58      	adds	r0, r3, #1
 800b45c:	6010      	str	r0, [r2, #0]
 800b45e:	7019      	strb	r1, [r3, #0]
 800b460:	4608      	mov	r0, r1
 800b462:	bc10      	pop	{r4}
 800b464:	4770      	bx	lr

0800b466 <__sfputs_r>:
 800b466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b468:	4606      	mov	r6, r0
 800b46a:	460f      	mov	r7, r1
 800b46c:	4614      	mov	r4, r2
 800b46e:	18d5      	adds	r5, r2, r3
 800b470:	42ac      	cmp	r4, r5
 800b472:	d101      	bne.n	800b478 <__sfputs_r+0x12>
 800b474:	2000      	movs	r0, #0
 800b476:	e007      	b.n	800b488 <__sfputs_r+0x22>
 800b478:	463a      	mov	r2, r7
 800b47a:	4630      	mov	r0, r6
 800b47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b480:	f7ff ffdc 	bl	800b43c <__sfputc_r>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d1f3      	bne.n	800b470 <__sfputs_r+0xa>
 800b488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b48c <_vfiprintf_r>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	460d      	mov	r5, r1
 800b492:	4614      	mov	r4, r2
 800b494:	4698      	mov	r8, r3
 800b496:	4606      	mov	r6, r0
 800b498:	b09d      	sub	sp, #116	; 0x74
 800b49a:	b118      	cbz	r0, 800b4a4 <_vfiprintf_r+0x18>
 800b49c:	6983      	ldr	r3, [r0, #24]
 800b49e:	b90b      	cbnz	r3, 800b4a4 <_vfiprintf_r+0x18>
 800b4a0:	f7ff fb12 	bl	800aac8 <__sinit>
 800b4a4:	4b89      	ldr	r3, [pc, #548]	; (800b6cc <_vfiprintf_r+0x240>)
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	d11b      	bne.n	800b4e2 <_vfiprintf_r+0x56>
 800b4aa:	6875      	ldr	r5, [r6, #4]
 800b4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	d405      	bmi.n	800b4be <_vfiprintf_r+0x32>
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	059a      	lsls	r2, r3, #22
 800b4b6:	d402      	bmi.n	800b4be <_vfiprintf_r+0x32>
 800b4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ba:	f7ff fba8 	bl	800ac0e <__retarget_lock_acquire_recursive>
 800b4be:	89ab      	ldrh	r3, [r5, #12]
 800b4c0:	071b      	lsls	r3, r3, #28
 800b4c2:	d501      	bpl.n	800b4c8 <_vfiprintf_r+0x3c>
 800b4c4:	692b      	ldr	r3, [r5, #16]
 800b4c6:	b9eb      	cbnz	r3, 800b504 <_vfiprintf_r+0x78>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7fe fafc 	bl	8009ac8 <__swsetup_r>
 800b4d0:	b1c0      	cbz	r0, 800b504 <_vfiprintf_r+0x78>
 800b4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d4:	07dc      	lsls	r4, r3, #31
 800b4d6:	d50e      	bpl.n	800b4f6 <_vfiprintf_r+0x6a>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b01d      	add	sp, #116	; 0x74
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	4b7b      	ldr	r3, [pc, #492]	; (800b6d0 <_vfiprintf_r+0x244>)
 800b4e4:	429d      	cmp	r5, r3
 800b4e6:	d101      	bne.n	800b4ec <_vfiprintf_r+0x60>
 800b4e8:	68b5      	ldr	r5, [r6, #8]
 800b4ea:	e7df      	b.n	800b4ac <_vfiprintf_r+0x20>
 800b4ec:	4b79      	ldr	r3, [pc, #484]	; (800b6d4 <_vfiprintf_r+0x248>)
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	bf08      	it	eq
 800b4f2:	68f5      	ldreq	r5, [r6, #12]
 800b4f4:	e7da      	b.n	800b4ac <_vfiprintf_r+0x20>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	0598      	lsls	r0, r3, #22
 800b4fa:	d4ed      	bmi.n	800b4d8 <_vfiprintf_r+0x4c>
 800b4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4fe:	f7ff fb87 	bl	800ac10 <__retarget_lock_release_recursive>
 800b502:	e7e9      	b.n	800b4d8 <_vfiprintf_r+0x4c>
 800b504:	2300      	movs	r3, #0
 800b506:	9309      	str	r3, [sp, #36]	; 0x24
 800b508:	2320      	movs	r3, #32
 800b50a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b50e:	2330      	movs	r3, #48	; 0x30
 800b510:	f04f 0901 	mov.w	r9, #1
 800b514:	f8cd 800c 	str.w	r8, [sp, #12]
 800b518:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b6d8 <_vfiprintf_r+0x24c>
 800b51c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b520:	4623      	mov	r3, r4
 800b522:	469a      	mov	sl, r3
 800b524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b528:	b10a      	cbz	r2, 800b52e <_vfiprintf_r+0xa2>
 800b52a:	2a25      	cmp	r2, #37	; 0x25
 800b52c:	d1f9      	bne.n	800b522 <_vfiprintf_r+0x96>
 800b52e:	ebba 0b04 	subs.w	fp, sl, r4
 800b532:	d00b      	beq.n	800b54c <_vfiprintf_r+0xc0>
 800b534:	465b      	mov	r3, fp
 800b536:	4622      	mov	r2, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ff93 	bl	800b466 <__sfputs_r>
 800b540:	3001      	adds	r0, #1
 800b542:	f000 80aa 	beq.w	800b69a <_vfiprintf_r+0x20e>
 800b546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b548:	445a      	add	r2, fp
 800b54a:	9209      	str	r2, [sp, #36]	; 0x24
 800b54c:	f89a 3000 	ldrb.w	r3, [sl]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80a2 	beq.w	800b69a <_vfiprintf_r+0x20e>
 800b556:	2300      	movs	r3, #0
 800b558:	f04f 32ff 	mov.w	r2, #4294967295
 800b55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b560:	f10a 0a01 	add.w	sl, sl, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	9307      	str	r3, [sp, #28]
 800b568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b56c:	931a      	str	r3, [sp, #104]	; 0x68
 800b56e:	4654      	mov	r4, sl
 800b570:	2205      	movs	r2, #5
 800b572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b576:	4858      	ldr	r0, [pc, #352]	; (800b6d8 <_vfiprintf_r+0x24c>)
 800b578:	f7ff fbb0 	bl	800acdc <memchr>
 800b57c:	9a04      	ldr	r2, [sp, #16]
 800b57e:	b9d8      	cbnz	r0, 800b5b8 <_vfiprintf_r+0x12c>
 800b580:	06d1      	lsls	r1, r2, #27
 800b582:	bf44      	itt	mi
 800b584:	2320      	movmi	r3, #32
 800b586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b58a:	0713      	lsls	r3, r2, #28
 800b58c:	bf44      	itt	mi
 800b58e:	232b      	movmi	r3, #43	; 0x2b
 800b590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b594:	f89a 3000 	ldrb.w	r3, [sl]
 800b598:	2b2a      	cmp	r3, #42	; 0x2a
 800b59a:	d015      	beq.n	800b5c8 <_vfiprintf_r+0x13c>
 800b59c:	4654      	mov	r4, sl
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	9a07      	ldr	r2, [sp, #28]
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ac:	3b30      	subs	r3, #48	; 0x30
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	d94e      	bls.n	800b650 <_vfiprintf_r+0x1c4>
 800b5b2:	b1b0      	cbz	r0, 800b5e2 <_vfiprintf_r+0x156>
 800b5b4:	9207      	str	r2, [sp, #28]
 800b5b6:	e014      	b.n	800b5e2 <_vfiprintf_r+0x156>
 800b5b8:	eba0 0308 	sub.w	r3, r0, r8
 800b5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	e7d2      	b.n	800b56e <_vfiprintf_r+0xe2>
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	1d19      	adds	r1, r3, #4
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	9103      	str	r1, [sp, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bfbb      	ittet	lt
 800b5d4:	425b      	neglt	r3, r3
 800b5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5da:	9307      	strge	r3, [sp, #28]
 800b5dc:	9307      	strlt	r3, [sp, #28]
 800b5de:	bfb8      	it	lt
 800b5e0:	9204      	strlt	r2, [sp, #16]
 800b5e2:	7823      	ldrb	r3, [r4, #0]
 800b5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b5e6:	d10c      	bne.n	800b602 <_vfiprintf_r+0x176>
 800b5e8:	7863      	ldrb	r3, [r4, #1]
 800b5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ec:	d135      	bne.n	800b65a <_vfiprintf_r+0x1ce>
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	3402      	adds	r4, #2
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	9203      	str	r2, [sp, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	bfb8      	it	lt
 800b5fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b6dc <_vfiprintf_r+0x250>
 800b606:	2203      	movs	r2, #3
 800b608:	4650      	mov	r0, sl
 800b60a:	7821      	ldrb	r1, [r4, #0]
 800b60c:	f7ff fb66 	bl	800acdc <memchr>
 800b610:	b140      	cbz	r0, 800b624 <_vfiprintf_r+0x198>
 800b612:	2340      	movs	r3, #64	; 0x40
 800b614:	eba0 000a 	sub.w	r0, r0, sl
 800b618:	fa03 f000 	lsl.w	r0, r3, r0
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	3401      	adds	r4, #1
 800b620:	4303      	orrs	r3, r0
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b628:	2206      	movs	r2, #6
 800b62a:	482d      	ldr	r0, [pc, #180]	; (800b6e0 <_vfiprintf_r+0x254>)
 800b62c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b630:	f7ff fb54 	bl	800acdc <memchr>
 800b634:	2800      	cmp	r0, #0
 800b636:	d03f      	beq.n	800b6b8 <_vfiprintf_r+0x22c>
 800b638:	4b2a      	ldr	r3, [pc, #168]	; (800b6e4 <_vfiprintf_r+0x258>)
 800b63a:	bb1b      	cbnz	r3, 800b684 <_vfiprintf_r+0x1f8>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	3307      	adds	r3, #7
 800b640:	f023 0307 	bic.w	r3, r3, #7
 800b644:	3308      	adds	r3, #8
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64a:	443b      	add	r3, r7
 800b64c:	9309      	str	r3, [sp, #36]	; 0x24
 800b64e:	e767      	b.n	800b520 <_vfiprintf_r+0x94>
 800b650:	460c      	mov	r4, r1
 800b652:	2001      	movs	r0, #1
 800b654:	fb0c 3202 	mla	r2, ip, r2, r3
 800b658:	e7a5      	b.n	800b5a6 <_vfiprintf_r+0x11a>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f04f 0c0a 	mov.w	ip, #10
 800b660:	4619      	mov	r1, r3
 800b662:	3401      	adds	r4, #1
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	4620      	mov	r0, r4
 800b668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b66c:	3a30      	subs	r2, #48	; 0x30
 800b66e:	2a09      	cmp	r2, #9
 800b670:	d903      	bls.n	800b67a <_vfiprintf_r+0x1ee>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0c5      	beq.n	800b602 <_vfiprintf_r+0x176>
 800b676:	9105      	str	r1, [sp, #20]
 800b678:	e7c3      	b.n	800b602 <_vfiprintf_r+0x176>
 800b67a:	4604      	mov	r4, r0
 800b67c:	2301      	movs	r3, #1
 800b67e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b682:	e7f0      	b.n	800b666 <_vfiprintf_r+0x1da>
 800b684:	ab03      	add	r3, sp, #12
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	462a      	mov	r2, r5
 800b68a:	4630      	mov	r0, r6
 800b68c:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <_vfiprintf_r+0x25c>)
 800b68e:	a904      	add	r1, sp, #16
 800b690:	f7fd fd68 	bl	8009164 <_printf_float>
 800b694:	4607      	mov	r7, r0
 800b696:	1c78      	adds	r0, r7, #1
 800b698:	d1d6      	bne.n	800b648 <_vfiprintf_r+0x1bc>
 800b69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b69c:	07d9      	lsls	r1, r3, #31
 800b69e:	d405      	bmi.n	800b6ac <_vfiprintf_r+0x220>
 800b6a0:	89ab      	ldrh	r3, [r5, #12]
 800b6a2:	059a      	lsls	r2, r3, #22
 800b6a4:	d402      	bmi.n	800b6ac <_vfiprintf_r+0x220>
 800b6a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6a8:	f7ff fab2 	bl	800ac10 <__retarget_lock_release_recursive>
 800b6ac:	89ab      	ldrh	r3, [r5, #12]
 800b6ae:	065b      	lsls	r3, r3, #25
 800b6b0:	f53f af12 	bmi.w	800b4d8 <_vfiprintf_r+0x4c>
 800b6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6b6:	e711      	b.n	800b4dc <_vfiprintf_r+0x50>
 800b6b8:	ab03      	add	r3, sp, #12
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	462a      	mov	r2, r5
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <_vfiprintf_r+0x25c>)
 800b6c2:	a904      	add	r1, sp, #16
 800b6c4:	f7fd ffea 	bl	800969c <_printf_i>
 800b6c8:	e7e4      	b.n	800b694 <_vfiprintf_r+0x208>
 800b6ca:	bf00      	nop
 800b6cc:	0800bbf8 	.word	0x0800bbf8
 800b6d0:	0800bc18 	.word	0x0800bc18
 800b6d4:	0800bbd8 	.word	0x0800bbd8
 800b6d8:	0800bd94 	.word	0x0800bd94
 800b6dc:	0800bd9a 	.word	0x0800bd9a
 800b6e0:	0800bd9e 	.word	0x0800bd9e
 800b6e4:	08009165 	.word	0x08009165
 800b6e8:	0800b467 	.word	0x0800b467

0800b6ec <__sread>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	f000 f8d6 	bl	800b8a4 <_read_r>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	bfab      	itete	ge
 800b6fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b700:	181b      	addge	r3, r3, r0
 800b702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b706:	bfac      	ite	ge
 800b708:	6563      	strge	r3, [r4, #84]	; 0x54
 800b70a:	81a3      	strhlt	r3, [r4, #12]
 800b70c:	bd10      	pop	{r4, pc}

0800b70e <__swrite>:
 800b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	461f      	mov	r7, r3
 800b714:	898b      	ldrh	r3, [r1, #12]
 800b716:	4605      	mov	r5, r0
 800b718:	05db      	lsls	r3, r3, #23
 800b71a:	460c      	mov	r4, r1
 800b71c:	4616      	mov	r6, r2
 800b71e:	d505      	bpl.n	800b72c <__swrite+0x1e>
 800b720:	2302      	movs	r3, #2
 800b722:	2200      	movs	r2, #0
 800b724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b728:	f000 f898 	bl	800b85c <_lseek_r>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	4632      	mov	r2, r6
 800b730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	4628      	mov	r0, r5
 800b738:	463b      	mov	r3, r7
 800b73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	f000 b817 	b.w	800b774 <_write_r>

0800b746 <__sseek>:
 800b746:	b510      	push	{r4, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74e:	f000 f885 	bl	800b85c <_lseek_r>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	bf15      	itete	ne
 800b758:	6560      	strne	r0, [r4, #84]	; 0x54
 800b75a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b762:	81a3      	strheq	r3, [r4, #12]
 800b764:	bf18      	it	ne
 800b766:	81a3      	strhne	r3, [r4, #12]
 800b768:	bd10      	pop	{r4, pc}

0800b76a <__sclose>:
 800b76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76e:	f000 b831 	b.w	800b7d4 <_close_r>
	...

0800b774 <_write_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	2200      	movs	r2, #0
 800b77e:	4d05      	ldr	r5, [pc, #20]	; (800b794 <_write_r+0x20>)
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	f7f7 f844 	bl	8002810 <_write>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_write_r+0x1e>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_write_r+0x1e>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	20001374 	.word	0x20001374

0800b798 <__assert_func>:
 800b798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b79a:	4614      	mov	r4, r2
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <__assert_func+0x2c>)
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68d8      	ldr	r0, [r3, #12]
 800b7a6:	b14c      	cbz	r4, 800b7bc <__assert_func+0x24>
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <__assert_func+0x30>)
 800b7aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7ae:	9100      	str	r1, [sp, #0]
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	4906      	ldr	r1, [pc, #24]	; (800b7cc <__assert_func+0x34>)
 800b7b4:	f000 f81e 	bl	800b7f4 <fiprintf>
 800b7b8:	f000 f893 	bl	800b8e2 <abort>
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <__assert_func+0x38>)
 800b7be:	461c      	mov	r4, r3
 800b7c0:	e7f3      	b.n	800b7aa <__assert_func+0x12>
 800b7c2:	bf00      	nop
 800b7c4:	20000010 	.word	0x20000010
 800b7c8:	0800bda5 	.word	0x0800bda5
 800b7cc:	0800bdb2 	.word	0x0800bdb2
 800b7d0:	0800bde0 	.word	0x0800bde0

0800b7d4 <_close_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4d05      	ldr	r5, [pc, #20]	; (800b7f0 <_close_r+0x1c>)
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	f7f7 f832 	bl	8002848 <_close>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_close_r+0x1a>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_close_r+0x1a>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20001374 	.word	0x20001374

0800b7f4 <fiprintf>:
 800b7f4:	b40e      	push	{r1, r2, r3}
 800b7f6:	b503      	push	{r0, r1, lr}
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	4805      	ldr	r0, [pc, #20]	; (800b814 <fiprintf+0x20>)
 800b7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	f7ff fe41 	bl	800b48c <_vfiprintf_r>
 800b80a:	b002      	add	sp, #8
 800b80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b810:	b003      	add	sp, #12
 800b812:	4770      	bx	lr
 800b814:	20000010 	.word	0x20000010

0800b818 <_fstat_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	2300      	movs	r3, #0
 800b81c:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_fstat_r+0x20>)
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	f7f7 f81a 	bl	800285e <_fstat>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d102      	bne.n	800b834 <_fstat_r+0x1c>
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	b103      	cbz	r3, 800b834 <_fstat_r+0x1c>
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop
 800b838:	20001374 	.word	0x20001374

0800b83c <_isatty_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	2300      	movs	r3, #0
 800b840:	4d05      	ldr	r5, [pc, #20]	; (800b858 <_isatty_r+0x1c>)
 800b842:	4604      	mov	r4, r0
 800b844:	4608      	mov	r0, r1
 800b846:	602b      	str	r3, [r5, #0]
 800b848:	f7f7 f818 	bl	800287c <_isatty>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_isatty_r+0x1a>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_isatty_r+0x1a>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20001374 	.word	0x20001374

0800b85c <_lseek_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	4611      	mov	r1, r2
 800b864:	2200      	movs	r2, #0
 800b866:	4d05      	ldr	r5, [pc, #20]	; (800b87c <_lseek_r+0x20>)
 800b868:	602a      	str	r2, [r5, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	f7f7 f810 	bl	8002890 <_lseek>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_lseek_r+0x1e>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_lseek_r+0x1e>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	20001374 	.word	0x20001374

0800b880 <__ascii_mbtowc>:
 800b880:	b082      	sub	sp, #8
 800b882:	b901      	cbnz	r1, 800b886 <__ascii_mbtowc+0x6>
 800b884:	a901      	add	r1, sp, #4
 800b886:	b142      	cbz	r2, 800b89a <__ascii_mbtowc+0x1a>
 800b888:	b14b      	cbz	r3, 800b89e <__ascii_mbtowc+0x1e>
 800b88a:	7813      	ldrb	r3, [r2, #0]
 800b88c:	600b      	str	r3, [r1, #0]
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	1e10      	subs	r0, r2, #0
 800b892:	bf18      	it	ne
 800b894:	2001      	movne	r0, #1
 800b896:	b002      	add	sp, #8
 800b898:	4770      	bx	lr
 800b89a:	4610      	mov	r0, r2
 800b89c:	e7fb      	b.n	800b896 <__ascii_mbtowc+0x16>
 800b89e:	f06f 0001 	mvn.w	r0, #1
 800b8a2:	e7f8      	b.n	800b896 <__ascii_mbtowc+0x16>

0800b8a4 <_read_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4d05      	ldr	r5, [pc, #20]	; (800b8c4 <_read_r+0x20>)
 800b8b0:	602a      	str	r2, [r5, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f7f6 ff8f 	bl	80027d6 <_read>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_read_r+0x1e>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_read_r+0x1e>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	20001374 	.word	0x20001374

0800b8c8 <__ascii_wctomb>:
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	b141      	cbz	r1, 800b8e0 <__ascii_wctomb+0x18>
 800b8ce:	2aff      	cmp	r2, #255	; 0xff
 800b8d0:	d904      	bls.n	800b8dc <__ascii_wctomb+0x14>
 800b8d2:	228a      	movs	r2, #138	; 0x8a
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	4770      	bx	lr
 800b8dc:	2001      	movs	r0, #1
 800b8de:	700a      	strb	r2, [r1, #0]
 800b8e0:	4770      	bx	lr

0800b8e2 <abort>:
 800b8e2:	2006      	movs	r0, #6
 800b8e4:	b508      	push	{r3, lr}
 800b8e6:	f000 f82b 	bl	800b940 <raise>
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f7f6 ff69 	bl	80027c2 <_exit>

0800b8f0 <_raise_r>:
 800b8f0:	291f      	cmp	r1, #31
 800b8f2:	b538      	push	{r3, r4, r5, lr}
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	d904      	bls.n	800b904 <_raise_r+0x14>
 800b8fa:	2316      	movs	r3, #22
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b906:	b112      	cbz	r2, 800b90e <_raise_r+0x1e>
 800b908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b90c:	b94b      	cbnz	r3, 800b922 <_raise_r+0x32>
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f830 	bl	800b974 <_getpid_r>
 800b914:	462a      	mov	r2, r5
 800b916:	4601      	mov	r1, r0
 800b918:	4620      	mov	r0, r4
 800b91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91e:	f000 b817 	b.w	800b950 <_kill_r>
 800b922:	2b01      	cmp	r3, #1
 800b924:	d00a      	beq.n	800b93c <_raise_r+0x4c>
 800b926:	1c59      	adds	r1, r3, #1
 800b928:	d103      	bne.n	800b932 <_raise_r+0x42>
 800b92a:	2316      	movs	r3, #22
 800b92c:	6003      	str	r3, [r0, #0]
 800b92e:	2001      	movs	r0, #1
 800b930:	e7e7      	b.n	800b902 <_raise_r+0x12>
 800b932:	2400      	movs	r4, #0
 800b934:	4628      	mov	r0, r5
 800b936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b93a:	4798      	blx	r3
 800b93c:	2000      	movs	r0, #0
 800b93e:	e7e0      	b.n	800b902 <_raise_r+0x12>

0800b940 <raise>:
 800b940:	4b02      	ldr	r3, [pc, #8]	; (800b94c <raise+0xc>)
 800b942:	4601      	mov	r1, r0
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	f7ff bfd3 	b.w	800b8f0 <_raise_r>
 800b94a:	bf00      	nop
 800b94c:	20000010 	.word	0x20000010

0800b950 <_kill_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	2300      	movs	r3, #0
 800b954:	4d06      	ldr	r5, [pc, #24]	; (800b970 <_kill_r+0x20>)
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	4611      	mov	r1, r2
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	f7f6 ff20 	bl	80027a2 <_kill>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d102      	bne.n	800b96c <_kill_r+0x1c>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b103      	cbz	r3, 800b96c <_kill_r+0x1c>
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	bf00      	nop
 800b970:	20001374 	.word	0x20001374

0800b974 <_getpid_r>:
 800b974:	f7f6 bf0e 	b.w	8002794 <_getpid>

0800b978 <_init>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr

0800b984 <_fini>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	bf00      	nop
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr
